<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSuziRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//col = &lt;number&gt; (0 = red (default); 1 = orange; 2 = blue)
//dir = "hor"/"ver" ("hor" = horizontal (default); "ver" = vertical)
//startDir = -1/1 (1 makes the suzi move right/down first (default); -1 makes the suzi move left/up first)

event_inherited();

respawn = true;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;

//Enemy specific code
col = 0; //0 = red; 1 = orange; 2 = blue
init = 1;

dir = "h";
startDir = 1;

beginStartDir = startDir;

moveTimer = 0;
moving = false;
firsttime = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    beginStartDir = startDir;
    switch col
    {
        case 0: sprite_index = sprSuziRed; break;
        case 1: sprite_index = sprSuziOrange; break;
        case 2: sprite_index = sprSuziBlue; break;
        default: sprite_index = sprSuziRed; break;
    }
}

event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    if !moving {
        moveTimer += 1;
        if moveTimer == 10 {
            image_index = 0; //After touching a wall, we want the eye to close slowly (half-open the first 10 frames)
        }
        if moveTimer == 110 {
            image_index = 1; //Eye half-open
        }
        else if moveTimer &gt;= 120 {
            image_index = 2;
            moving = true;
            if firsttime {
                if dir == "h" {
                    if place_meeting(x-4,y,objSolid) {
                        startDir = 1;
                    }
                    else if place_meeting(x+4,y,objSolid) {
                        startDir = -1;
                    }
                    else {
                        if target.x &lt; x {
                            startDir = -1;
                        }
                        else {startDir = 1;}
                    }
                }
                else {
                    if place_meeting(x,y-4,objSolid) {
                        startDir = 1;
                    }
                    else if place_meeting(x,y+4,objSolid) {
                        startDir = -1;
                    }
                    else {
                        if target.y &lt; y {
                            startDir = -1;
                        }
                        else {startDir = 1;}
                    }
                }
            }
            firsttime = 0;
        }
    }
    else {
        if dir == "h" {
            xspeed = startDir*3;
        }
        else {
            yspeed = startDir*3;
        }
        
        generalCollision();
        
        
        if ((xspeed == 0 &amp;&amp; dir == "h") or (yspeed == 0 &amp;&amp; dir == "v"))
        {
            moving = false;
            moveTimer = 0;
            image_index = 1;
            startDir = -startDir;
        }
        
        x += xspeed;
        y += yspeed;
    }
}
else if dead
{
    moveTimer = 0;
    startDir = beginStartDir;
    moving = false;
    image_index = 0;
    firsttime = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
