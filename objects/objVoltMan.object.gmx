<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVoltIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprVoltMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprVoltIntro;
poseImgSpeed = 8/60;
contactDamage = 2;

ground = false;
attackTimer = 0;
phase = 0; 
myGrav = 1;

jumpsMade = 0;
jumpsMax = 1;

redetectRoof = 0;

// store attackTimer maximums in array for use later.
attackTimerMax[0] = 35;
attackTimerMax[1] = 45;
attackTimerMax[2] = 25;
attackTimerMax[3] = 20;




//stores the weapon damage values
wpndmg[0] = 3; //Mega Buster
wpndmg[1] = 3; //Mega Buster Charge1
wpndmg[2] = 5; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 0; //HornetChaser
wpndmg[5] = 0; //JewelSatellite
wpndmg[6] = 1; //GrabBuster
wpndmg[7] = 1; //TripleBlade
wpndmg[8] = 1; //WheelCutter
wpndmg[9] = 6; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 6; //SuperArrow
wpndmg[12] = 1; //WireAdapter

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen and !instance_exists(objTextbox)
{
    if isFight
    {
        image_speed = 0;
        
        checkGroundExt(myGrav);
        gravityCheckGroundExt(0.25*myGrav);
        generalCollisionExt(myGrav);
        
        x += xspeed;
        y += yspeed;
        
        attackTimer += 1;
        
        if instance_exists(objVoltBarrier)
        {
            objVoltBarrier.x = x;
            objVoltBarrier.y = y-4;
        }
        
        switch phase
        {
            case 0: //Idle (standing still)
            if ground == true
                {
                xspeed = 0;
                sprite_index=sprVoltIdle;
                jumpsMade = 0;
                }
            else
                attackTimer = 0;
            if attackTimer == attackTimerMax[phase]
                {
                attackTimer = 0;
                if !instance_exists(objVoltBarrier)
                    phase = 1;   
                if instance_exists(objVoltBarrier)
                    {
                    phase = 2; 
                    jumpsMax = irandom_range(1,4);
                    }
                }
            break;
            
            case 1: //Jump to cieling
            // when the voltRoof detector exists, voltman jumps to its position
            if instance_exists(objVoltRoofDetector) &amp;&amp; ground == true &amp;&amp; myGrav == 1
                {
                    if objVoltRoofDetector.offRoof == true
                    {
                    ySpeedAim(objVoltRoofDetector.y+16,0.25*myGrav);
                    sprite_index=sprVoltJump;
                    image_index=0;
                    }
                    
                }
            //otherwise he creates the roof detector.    
            if !instance_exists(objVoltRoofDetector)
                {
                with objVoltRoofDetector
                    instance_destroy(); 
                VRD = instance_create(x-8,y,objVoltRoofDetector);
                }
            if instance_exists(objVoltRoofDetector) &amp;&amp; y &lt;= objVoltRoofDetector.y+24 &amp;&amp; objVoltRoofDetector.hitRoof == true
                {
                myGrav=-1;
                sprite_index = sprVoltPrepareShield;
                image_index += 0.75;
                if !instance_exists(objVoltBarrier) &amp;&amp; attackTimer &gt; attackTimerMax[phase]/3
                    {
                    instance_create(x,y,objVoltBarrier);
                    playSFX(sfxElectricShot);
                    }
                }
            else
                attackTimer = 0;
                
            if attackTimer == attackTimerMax[phase]
                {
                phase = 0;
                myGrav = 1;
                sprite_index=sprVoltJump;
                image_index=1;
                }
            break;
            
            case 2: //begin jumping around   
                if ground == false
                    attackTimer = 0;
                if ground == true &amp;&amp; attackTimer &lt;= 5
                    {
                    sprite_index=sprVoltIdle;
                    xspeed = 0;
                    }
                
                if ground == true &amp;&amp; jumpsMade &lt; jumpsMax &amp;&amp; attackTimer &gt; 5
                    {
                    yspeed = -6;
                    xspeed = 1.5 * image_xscale;
                    sprite_index=sprVoltJump;
                    image_index=0;
                    jumpsMade += 1;
                    }
                else if ground == true &amp;&amp; jumpsMade == jumpsMax &amp;&amp; attackTimer &gt; 5
                    {
                    sprite_index=sprVoltPrepareThrow;
                    attackTimer = 0;
                    phase = 3;
                    xspeed = 0;
                    }
                    
                if yspeed &gt;0 &amp;&amp; ground == false
                    {
                    image_index=1;   
                    xspeed = 1.5 * image_xscale;
                    }
            break;
            case 3: //throw shield
                if sprite_index == sprVoltPrepareThrow
                    image_index +=0.5;
                if attackTimer &gt;= attackTimerMax[phase]
                    {
                    sprite_index = sprVoltThrowShield;
                    if image_index &lt; 1
                        image_index +=0.1;
                    }
                    if attackTimer == attackTimerMax[phase]+10
                        {
                        playSFX(sfxBlockZap);
                        // create twin voltman shots
                        VS = instance_create(x+16,y-3,objVoltmanShot);
                        VS.image_xscale = 1;
                        VS = instance_create(x-16,y-3,objVoltmanShot);
                        VS.image_xscale = -1;
                        // scatter shield to the four winds
                        VS = instance_create(objVoltBarrier.x,objVoltBarrier.y,objVoltmanDischarge);
                        VS.image_index = 0;
                        VS.xspeed = 2.5;
                        VS.yspeed = -2.5;
                        VS = instance_create(objVoltBarrier.x,objVoltBarrier.y,objVoltmanDischarge);
                        VS.image_index = 1;
                        VS.xspeed = 2.5;
                        VS.yspeed = 2.5;
                        VS = instance_create(objVoltBarrier.x,objVoltBarrier.y,objVoltmanDischarge);
                        VS.image_index = 2;
                        VS.xspeed = -2.5;
                        VS.yspeed = 2.5;
                        VS = instance_create(objVoltBarrier.x,objVoltBarrier.y,objVoltmanDischarge);
                        VS.image_index = 3;
                        VS.xspeed = -2.5;
                        VS.yspeed = -2.5;
                        
                        with objVoltBarrier
                            instance_destroy();
                        attackTimer = -10;
                        sprite_index = sprVoltIdle;
                        phase = 0;
                        with objVoltRoofDetector
                            instance_destroy(); 
                        }
                break;
                                    
        }   
        
        //Face the player
        if instance_exists(target) &amp;&amp; ground == true
        {
            if x &gt; target.x
                image_xscale = -1;
            else
                image_xscale = 1;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
