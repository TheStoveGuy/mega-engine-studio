<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFanUp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtGimmick</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0.35;

shiftvisible = 1;

Dir = 0;
Velocity = 0;
playSound = true;

mySolid = instance_create(x,y,objSolidIndependent);
mySolid.sprite_index = sprite_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    switch(Dir) 
    {
    case 0: // up
        with collision_rectangle(bbox_left,bbox_top,bbox_right-2,bbox_top-16*10,objMegaman,0,1) with other
        {
            if collision_rectangle(bbox_left,bbox_top,bbox_right-2,bbox_top-16*4,other,0,1)
            or (Velocity &lt;= 0 &amp;&amp; collision_rectangle(bbox_left,bbox_top,bbox_right-2,bbox_top-16*7,other,0,1))
            {
            if Velocity &gt; -2
            {
                Velocity -= 0.1;
            }
            if other.yspeed &lt; Velocity
            {
                Velocity = other.yspeed;
            }
    //        if Velocity &lt; -2
    //            Velocity += 0.1;
            }
            else if Velocity &lt; 3
            {
                Velocity += 0.1;
                if other.yspeed &lt; Velocity
                {
                    Velocity = other.yspeed;
                }
            }
            
            if instance_exists(other)
            {
                if (!other.ground || Velocity &lt; 0)
                or place_meeting(x,y-1,other) or other.yspeed &gt; Velocity
                {
                    other.yspeed = Velocity
                }
                else if Velocity &gt; 0
                {
                    Velocity = 0;
                }
            }
            if Velocity &gt;= 0
            {
                playSound = true
            }
            else if playSound
            {
                playSFX(sfxFan);
                playSound = false;
            }
            
            for(i=1;i&gt;=-1;i-=2;)
            {
                if instance_place(x+i,y,objFanUp)
                {
                    OtherFan = instance_place(x+i,y,objFanUp)
                    if OtherFan.object_index = object_index
                    {
                        OtherFan.Velocity = Velocity;
                        OtherFan.playSound = playSound;
                    }
                }
            }
        }
    case 1: // down
        with collision_rectangle(bbox_left,bbox_bottom,bbox_right-2,bbox_bottom+16*10,objMegaman,0,1) with other 
        {
            if instance_exists(other)
            if !other.ground
            {
                other.yspeed = other.yspeed+0.1;
            }
            if other.yspeed &gt;= 0
            {
                playSound = true;
            }
            else if playSound
            {
                playSFX(sfxFan);
                playSound = false;
            }
            for(i=1;i&gt;=-1;i-=2;)
            {
                if instance_place(x+i,y,objFanUp)
                {
                    OtherFan = instance_place(x+i,y,objFanUp)
                    if OtherFan.object_index = object_index
                    {
                        OtherFan.Velocity = Velocity;
                        OtherFan.playSound = playSound;
                    }
                }
            }
        }
        break;
    case 2: // right
        with collision_rectangle(bbox_right,bbox_top,bbox_right+16*7,bbox_bottom-2,objMegaman,0,1) with other
        {
            if collision_rectangle(bbox_right,bbox_top,bbox_right+16*6,bbox_bottom-2,other,0,1)
            {
                if Velocity &gt; -2
                {
                    Velocity -= 0.1;
                }
                if Velocity &lt; -1 &amp;&amp; collision_rectangle(bbox_right,bbox_top,bbox_right+16*3,bbox_bottom-2,other,0,1)
                {
                    playSound = true
                }
                else if playSound
                {
                    playSFX(sfxFan);
                    playSound = false;
                }
            }
            else if Velocity &lt; 0
            {
                Velocity += 0.1;
            }
            
            with other
            {
                if isSlide
                {
                    if xspeed &lt; -1
                    {
                        xspeed = xspeed/2;
                    }
                    if xspeed &gt; 0 &amp;&amp; xspeed &lt; 3
                    {
                        xspeed = 3;
                    }
                }
                else
                {
                    ys = yspeed
                    yspeed = 0;
                    xspeed = -other.Velocity;
                    playerCollision();
                    x += xspeed;
                    yspeed = ys;
                }
            }
        }
        break;
    case 3: // left
        with collision_rectangle(bbox_left,bbox_top,bbox_left-16*7,bbox_bottom-2,objMegaman,0,1) with other
        {
            if collision_rectangle(bbox_left,bbox_top,bbox_left-16*6,bbox_bottom-2,other,0,1)
            {
                if Velocity &gt; -2
                {
                    Velocity -= 0.1;
                }
                if Velocity &lt; -1 &amp;&amp; collision_rectangle(bbox_left,bbox_top,bbox_left-16*3,bbox_bottom-2,other,0,1)
                {
                    playSound = true
                }
                else if playSound
                {
                    playSFX(sfxFan);
                    playSound = false;
                }
            }
            else if Velocity &lt; 0
            {
                Velocity += 0.1;
            }
            
            with other
            {
                if isSlide
                {
                    if xspeed &gt; 1
                    {
                        xspeed = xspeed/2;
                    }
                    if xspeed &lt; 0 &amp;&amp; xspeed &gt; -3
                    {
                        xspeed = -3;
                    }
                }
                else
                {
                    ys = yspeed;
                    yspeed = 0;
                    xspeed = other.Velocity;
                    playerCollision();
                    x += xspeed
                    yspeed = ys;
                }
            }
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
