<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTileAnimator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>increaseHealth = false;
increaseHealthAmount = 0;

increaseAmmo = false;
increaseAmmoAmount = 0;

increaseTimer = 0;

depthstart = depth;

player = objMegaman;

obj[0] = objMegaman;
obj[1] = prtPlayerProjectile;
obj[2] = prtEnemy;
obj[3] = prtEnemyProjectile;
obj[4] = prtGimmick;
obj[5] = prtPickup;
obj[6] = prtEffect;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global._lives -= 1;

var ID;
ID = instance_create(x, y, objFadeout);
ID.type = "restart";

/*if global._lives &gt;= 0
    ID.type = "restart";
else
{
    ID.type = "room";
    ID.myRoom = rmPass;
    global.passPlayVictory = false;
    global.passContinueRoom = room;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)
{
    x = player.x;
    y = player.y;
}

if increaseHealth //Increase Health
{
    if increaseHealthAmount &gt; 0 &amp;&amp; global.playerHealth[increasePID] &lt; 28
    {
        increaseTimer += 1;
        if increaseTimer &gt;= 3
        {
            global.playerHealth[increasePID] += 1;
            increaseHealthAmount -= 1;
            increaseTimer = 0;
        }
    }
    else
    {
        increaseHealth = false;
        if global.playerHealth[increasePID] &gt; 28 {global.playerHealth[increasePID] = 28;}
        if !increaseAmmo
        {
            global.frozen = false;
            increaseTimer = 0;
            audio_stop_sound(sfxEnergyRestore);
        }
    }
}

if increaseAmmo //Increase Ammo
{
    if increaseAmmoAmount &gt; 0 &amp;&amp; global.ammo[increasePID,increaseWeapon] &lt; 28
    {
        increaseTimer += 1;
        if increaseTimer &gt;= 3 
        {
            global.ammo[increasePID,increaseWeapon] += 1;
            increaseAmmoAmount -= 1;
            increaseTimer = 0;
        }
    }
    else
    {
        increaseAmmo = false;
        if global.ammo[increasePID,increaseWeapon] &gt; 28 {global.ammo[increasePID,increaseWeapon] = 28;}
        if !increaseHealth
        {
            global.frozen = false;
            increaseTimer = 0;
            audio_stop_sound(sfxEnergyRestore);
        }
    }
}

global.seconds += 1;

//Flicker
if depth = depthstart
{
    depth = 10;
}
else
{
    depth = depthstart;
}

for (i=0; i&lt;=6; i+=1;)
{
    with obj[i]
    {
        if depth &lt; 1000000
        {
            depth = floor(depth)+(irandom(99)*0.01);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD
for (z=0; z&lt;global.playerCount; z+=1;)
{
    dx = view_xview+16+(z*24);
    dy = view_yview+17;
    
    draw_sprite_ext(sprHealthbarBackground, 0,dx,dy,1,1,image_angle,c_black,image_alpha);
    
    //Respawn indicators
    if global.respawnTimer[z] &gt;= 0
    {
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        
        if global.respawnTimer[z] &gt; 0
        {
            draw_text(dx,dy+28,ceil(global.respawnTimer[z]/60));
        }
        else if global.respawnAllowed
        {
            draw_text(dx,dy+28,"R#E#A#D#Y")
        }
        
        draw_set_valign(fa_top);
    }
    else
    {
        //normal healthbar
        var pcol =  make_color_rgb(252, 228, 160);
        var scol =  c_white;
        if global.playerHealth[z] &lt;= global.respawnDonateThreshold
        {
            scol = pcol;
            pcol = global.secondaryCol[z];
        }
        
        for (i=1; i&lt;=global.playerHealth[z]; i+=1)
        {
            draw_sprite_ext(sprHealthbarPrimary,  0,dx+1,dy+(sprite_get_height(sprHealthbarBackground)-i*2), 1, 1, 0, pcol, 1);
            draw_sprite_ext(sprHealthbarSecondary,0,dx+1,dy+(sprite_get_height(sprHealthbarBackground)-i*2), 1, 1, 0, scol, 1);
        }
        
        var display = true;
        
        //Weapons
        if global.weapon[z] != 0 //Weapon energy
        {
            c = ceil(global.ammo[z,global.weapon[z]]);
        }
        else //Charge bar
        {
            c = 0;
            with objMegaman
            {
                if player_id
                {
                    other.c = min(28,floor(chargeTimer)/2);
                }
            }
            display = global.chargeBar;
        }
        
        if display
        {
            draw_sprite_ext(sprHealthbarBackground, 0,dx-8, dy,1,1,image_angle,global.outlineCol[z],image_alpha);
            for (i=1; i&lt;=c; i+=1) 
            {
                draw_sprite_ext(sprHealthbarPrimary,  0,dx-8+1,dy+(sprite_get_height(sprHealthbarBackground)-i*2), 1, 1, 0, global.primaryCol[z], 1);
                draw_sprite_ext(sprHealthbarSecondary,0,dx-8+1,dy+(sprite_get_height(sprHealthbarBackground)-i*2), 1, 1, 0, global.secondaryCol[z], 1);
            }
            if global.infiniteEnergy[global.weapon[z]]
            {
                draw_sprite_ext(sprInfinityMarkVertical,         0,dx-8,dy+28, 1, 1, 0, c_white, 1);
                draw_sprite_ext(sprInfinityMarkVerticalPrimary,  0,dx-8,dy+28, 1, 1, 0, global.primaryCol[z], 1);
                draw_sprite_ext(sprInfinityMarkVerticalSecondary,0,dx-8,dy+28, 1, 1, 0, global.secondaryCol[z], 1);
            }
        }
    }
}

//Keys
for (i=0; i&lt;global.keyNumber; i+=1;)
{
    draw_sprite_ext(sprKeyHud,0,dx+8,dy+(8*i),1,1,0,c_white,1)
}
//Key coins
for (i=0; i&lt;global.keyCoinTotal; i+=1;)
{
    draw_sprite_ext(sprKeyCoinHUD,i&lt;global.keyCoinCollected,view_xview+(8*i),view_yview+224-8,1,1,0,c_white,1)
}

if global.showFPS
{
    draw_set_halign(fa_right);
    draw_text(view_xview+view_wview,view_yview+view_hview-8,string(fps));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
