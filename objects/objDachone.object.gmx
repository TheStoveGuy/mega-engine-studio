<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDachoneB</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//dir = &lt;number&gt; (1 = face right (default); -1 = face left)
//col = &lt;number&gt; (0 = blue (default); 1 = green;)

event_inherited();

respawn = true;
doesIntro = false;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 8;

//creation code
dir = 1;
col = 0;
init = 1;

//Enemy specific code
rescursiveExplosion=false;
moveDelay=0;
xspeed=0;
yspeed=0;
ground=true;

//shooting variables
cooldownMax=112;
cooldownTimer = cooldownMax/2;

//AI and animation variables
imageTimer=0;
imageOffset=0;
delay=0;
radius = 128;

calibrateDirection();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    if (dir == 1)
    {
        image_xscale = 1;
    }
    else {image_xscale = -1;}
    switch col
    {
        case 0: sprite_index = sprDachoneB; break;
        case 1: sprite_index = sprDachoneG; break;
    }
}

event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    preground = ground;
    
    checkGround();
    gravityCheckGround();
    generalCollisionTurnaround();
    
    x+=xspeed;
    y+=yspeed;
    
    checkGround();
            
    //activate dachone
    calibrateDirection();
    if instance_exists(target)
    {
        if xspeed == 0 &amp;&amp; ground &amp;&amp; (global.keyShootPressed[target.player_id] || abs(target.x-x) &lt; radius)
        {
            xspeed = image_xscale*0.5;
        }
    }
    
    //if boss reaches a platform edge, turn around.    
    //if preground &amp;&amp; !ground &amp;&amp; yspeed = 0
    if ground &amp;&amp; ((!position_meeting(bbox_right+1,bbox_bottom+1,objSolid) &amp;&amp; xspeed &gt; 0) or (!position_meeting(bbox_left-1,bbox_bottom+1,objSolid) &amp;&amp; xspeed &lt; 0))
    {
        xspeed*=-1;;
        x+=xspeed*2;
    }
    //if boss reaches a screen edge do same.
    if x&gt;=view_xview+view_wview-10 &amp;&amp; xspeed &gt; 0
    {    
        xspeed=-abs(xspeed);
    }
    else if x&lt;=view_xview+10 &amp;&amp; xspeed &lt; 0
    {    
        xspeed=abs(xspeed);
    }
            
    //change image offset depending on the direction dachone is moving and what direction the sprite is facing.
    if xspeed !=0
    {
        imageTimer+=1;
        if imageTimer == 12
        {
            imageOffset+=1*image_xscale;
        }
        if imageTimer == 24
        {
            playSFX(sfxDachoneWalk)
            imageTimer=0;
            imageOffset+=1*image_xscale;
        }
        
        if imageOffset &gt;= 4
        {
            imageOffset=1;
        }
    }
            
    //shooting
    cooldownTimer+=1;
   
    var scaleX;
    scaleX = image_xscale;
    //switch (cooldownTimer)
    //{
        if cooldownTimer == cooldownMax
        {
            i = instance_create(x +(image_xscale*8),y-4,objDachoneBullet)
            with i
            {
                image_xscale=scaleX;
                image_index=0;
                xspeed=3;
                yspeed=0;
                playSFX(sfxDachoneLaser);
            }
        }
        else if cooldownTimer == cooldownMax+20
        {
            i = instance_create(x +(image_xscale*8),y-4,objDachoneBullet)
            with i
            {
                image_xscale=scaleX;
                image_index=1;
                xspeed=2;
                yspeed=1;
                playSFX(sfxDachoneLaser);
            }
        }
        else if cooldownTimer == cooldownMax+40
        {
            i = instance_create(x +(image_xscale*8),y-4,objDachoneBullet)
            with i
            {
                image_xscale=scaleX;
                image_index=2;
                xspeed=1.5;
                yspeed=1.5;
                playSFX(sfxDachoneLaser);
            }
        }
        else if cooldownTimer == cooldownMax+60
        {
            i = instance_create(x +(image_xscale*8),y-4,objDachoneBullet)
            with i
            {
                image_xscale=scaleX;
                image_index=3;
                xspeed=1;
                yspeed=2;
                playSFX(sfxDachoneLaser);
                cooldownTimer=0;
            }
        }
        else if cooldownTimer == cooldownMax+61
        {
            cooldownTimer=0;
        }
    //}
}
else if !insideView()
{
    deadTimer=0;
    image_index = 0;
    cooldownTimer = 0;
    xspeed=0;
    yspeed=0;
    imageOffset=0;
}

image_index=imageOffset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(bbox_get_ycenter_object(other.id) &lt; y-6)
{
    other.guardcancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
