<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>objPauseMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phase = 0;  //0: creating menu

parent = global.playerPauseCreator
player_id = parent.player_id;

option = 0;
option_page = 0;
oldWeapon = 0;
resetWeapon = false; //Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened? 

draw_x_off = 8;
draw_y_off = 16

with parent event_user(0);

bshow = 0;
exitconfirm = 0;

timer = irandom(4);
selectTimer = 0;

width = 6*16;
height = 11*16;

opt_etank = -10
opt_mtank = -11
opt_switch = -12;

weapon_page_n = 2
weapon_map_n[0] = 10

weapon_map[0,0] = opt_switch;
option_name[0,0] = "NEXT"

weapon_map[0,1] = megabuster;
option_name[0,1] = "P"

weapon_map[0,2] = hornetchaser;
option_name[0,2] = "H"

weapon_map[0,3] = jewelsatellite;
option_name[0,3] = "J"

weapon_map[0,4] = grabbuster
option_name[0,4] = "G"

weapon_map[0,5] = tripleblade
option_name[0,5] = "T"

weapon_map[0,6] = flashstopper
option_name[0,6] = "F"

weapon_map[0,7] = slashclaw
option_name[0,7] = "C"

weapon_map[0,8] = wheelcutter
option_name[0,8] = "W"

weapon_map[0,9] = sakugarne
option_name[0,9] = "S"

weapon_map_n[1] = 8

weapon_map[1,0] = opt_switch;
option_name[1,0] = "PREV"

weapon_map[1,1] = rushcoil
option_name[1,1] = "1"

weapon_map[1,2] = rushjet
option_name[1,2] = "2"

weapon_map[1,3] = wire
option_name[1,3] = "3"

weapon_map[1,4] = arrow
option_name[1,4] = "4"

weapon_map[1,5] = opt_etank
option_name[1,5] = "E"

weapon_map[1,6] = opt_mtank
option_name[1,6] = "M"

weapon_map[1,7] = exitstage
option_name[1,7] = "EXIT"

// determine initial selection
for (p=0;p &lt; weapon_page_n; p++)
{
    for (i=0; i &lt; weapon_map_n[p]; i ++)
    {
        if weapon_map[p,i] == global.weapon[player_id]
        {
            option = i;
            option_page = p;
        }
    }
}

// clear player's projectiles
with prtPlayerProjectile {
    if player_id == other.player_id
        instance_destroy();
}
with parent {
    if onRushJet
    {
        onRushJet = false;
        canMove = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch phase
{
    case 0: //Fading in
        timer += 5;
        if timer &gt;= width*height/16/16 {
            timer = irandom(4);
            phase = 1;
        }
        break;
    
    case 1: //Idle
        selectTimer += 1;
                
        event_user(0); //Moving the selection
        //Select the weapon/tank
        if global.keyJumpPressed[player_id] || global.keyPausePressed[player_id] || global.keyShootPressed[player_id]
        {
            opt_weapon = weapon_map[option_page,option]
            if opt_weapon == opt_switch {
                option_page = (option_page + 1) % weapon_page_n
                playSFX(sfxMenuSelect);
            }
            else if opt_weapon &lt; exitstage &amp;&amp; opt_weapon &gt;= megabuster {
                if objMegaman.inWaveBike and opt_weapon != megabuster { playSFX(sfxError) }
                else
                {
                    phase = 2;     
                    global.weapon[player_id] = opt_weapon      
                    with parent
                        event_user(0)
                    playSFX(sfxMenuSelect);
                }
            }
            else if opt_weapon == opt_etank { //E-Tank
                var etanks = global.eTanks
                if global.eTanks &gt; 0 &amp;&amp; global.playerHealth[player_id] &lt; 28 {
                    option = 99; //Nothing selected
                    phase = 3;
                    global.eTanks -= 1;
                    eTankTimer = 0;
                    loopSFX(sfxEnergyRestore);
                }
                else {playSFX(sfxError);}
            }
            else if opt_weapon == opt_mtank { //M-Tank
                if global.mTanks &gt; 0 {
                    var proceed;
                    proceed = false;
                    for(i = 1; i &lt;= global.totalWeapons; i += 1) {
                        if ceil(global.ammo[player_id,i]) &lt; 28
                            proceed = true;
                    }
                    if ceil(global.playerHealth[player_id]) &lt; 28 {
                        proceed = true;
                    }
                    if proceed { //If proceed is still false after the past calculations, it seems there is nothing to fill
                        option = 99; //Nothing selected
                        phase = 4;
                        global.mTanks -= 1;
                        eTankTimer = 0;
                        loopSFX(sfxEnergyRestore);
                    }
                    else {playSFX(sfxError);}
                }
                else {playSFX(sfxError);}
            }
            else if opt_weapon == exitstage { //Exit
                if !exitconfirm
                {
                    exitconfirm = 1; playSFX(sfxMenuSelect); exit;
                }
                else
                {
                    if global.keyJumpPressed[player_id] || global.keyPausePressed[player_id] || global.keyShootPressed[player_id] {
                        var ID;
                        ID = instance_create(x, y, objFadeout);
                        ID.type = "roomHub";
                        playSFX(sfxMenuSelect);
                        phase = 10; // doing nothing
                    }
                }
            } else {
                playSFX(sfxError);
            }
        }
        bshow += 0.05;
        if bshow = 2 {bshow = 0;}
       
        if opt_weapon != exitstage
            exitconfirm = false;
        break;
    
    case 2: // Going away
        timer += 5;
        if timer &gt;= width*height/16/16
        {
            if resetWeapon
            {
                global.weapon[player_id] = oldWeapon;
                with objMegaman event_user(0);
                with parent bullets = 0;
            }
            if instance_number(object_index) &lt;= 1
            {
                global.frozen = false;
            }
            instance_destroy();
        }
        break;
    
    case 3: //E-tank restoring energy
        if global.playerHealth[player_id] &lt; 28
        {
            eTankTimer += 1;
            if eTankTimer &gt;= 3
            {
                global.playerHealth[player_id] += 1;
                if global.playerHealth[player_id] &gt; 28
                    global.playerHealth[player_id] = 28;
                eTankTimer = 0;
            }
        }
        else
        {
            eTankTimer = 0;
            phase = 1;
            option = megabuster;
            with objMegaman event_user(0);
            audio_stop_sound(sfxEnergyRestore);
        }
        break;
    
    case 4: //M-Tank restoring energy
        eTankTimer += 1; //While it's technically an M-tank, we can use the same timer as the E-tank without any problems, since the two can't fill at the same time
        if eTankTimer &gt;= 3
        {
            eTankTimer = 0;
            
            var proceed;
            proceed = false;
            for(i = 1; i &lt;= global.totalWeapons; i += 1)
            {
                if global.ammo[player_id,i] &lt; 28
                {
                    global.ammo[player_id,i] += 1;
                    if global.ammo[player_id,i] &gt; 28
                    {
                        global.ammo[player_id,i] = 28;
                    }
                    proceed = true;
                }
            }
            
            if global.playerHealth[player_id] &lt; 28
            {
                global.playerHealth[player_id] += 1;
                if global.playerHealth[player_id] &gt; 28
                    global.playerHealth[player_id] = 28;
                    
                proceed = true;
            }
            
            if proceed == false //If proceed is still false after all these calculations, it means everything has been filled
            {
                eTankTimer = 0;
                phase = 1;
                option = megabuster;
                with objMegaman event_user(0);
                audio_stop_sound(sfxEnergyRestore);
            }
        }              
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.keyWeaponSwitchLeftPressed[player_id]
{
    playSFX(sfxMenuMove);
    option_page = (option_page + weapon_page_n - 1) % weapon_page_n
    if option &gt;= weapon_map_n[option_page]
        option = weapon_map_n[option_page] - 1
}
else if global.keyWeaponSwitchRightPressed[player_id]
{
    playSFX(sfxMenuMove);
    option_page = (option_page + 1) % weapon_page_n
    if option &gt;= weapon_map_n[option_page]
        option = weapon_map_n[option_page] - 1
}
else if global.keyDownPressed[player_id] { //Moving Downwards
    selectTimer = 0;
    option += 1;
    playSFX(sfxMenuMove);
    while (true) {
        option = option mod (weapon_map_n[option_page])
        if option == 0
            break;
        if weapon_map[option_page, option] &gt;= 0 &amp;&amp; weapon_map[option_page,option] &lt; exitstage
            if !global.weaponUnlocked[weapon_map[option_page, option]] {
                option += 1
                continue
            }
        break;
    }
}
else if global.keyUpPressed[player_id] { //Moving Upwards
    selectTimer = 0;
    option -= 1;
    playSFX(sfxMenuMove);
    while (true) {
        option += weapon_map_n[option_page]
        option = option mod (weapon_map_n[option_page])
        if option == 0
            break;
        if weapon_map[option_page, option] &gt;= 0 &amp;&amp; weapon_map[option_page, option] &lt; exitstage
        if !global.weaponUnlocked[weapon_map[option_page,option]] {
            option -= 1
            continue
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var bg_width, bg_height, draw_x, draw_y;

draw_x = view_xview[0] + draw_x_off;
draw_y = view_yview[0] + draw_y_off;

c_primary = rockprimaryCol[player_id]
c_secondary = rocksecondaryCol[player_id]

// draw menu bg:
draw_set_color(c_primary)
draw_set_alpha(1);

bg_height = 16*floor(timer / (width/16))
bg_width = 16*floor(timer mod (width/16))

if phase == 0 {
    draw_rectangle(draw_x+0.5,draw_y+0.5,draw_x+width-0.5,draw_y+bg_height + 1,false)
    draw_rectangle(draw_x+0.5,draw_y+bg_height-0.5,draw_x+bg_width-0.5,draw_y+bg_height-0.5 + 16,false)
} else if phase == 2 {
    draw_rectangle(draw_x+0.5,draw_y - 1 + bg_height + 16, draw_x+width-0.5, draw_y+height - 0.5,false)
    draw_rectangle(draw_x+0.5 + bg_width,draw_y + 1 + bg_height,draw_x+width-0.5,draw_y + 1 + bg_height + 16,false)
} else {
    draw_rectangle(draw_x+0.5,draw_y+0.5,draw_x+width-0.5,draw_y+height-0.5,false)
}

draw_set_color(c_secondary)
for (_y = 0; _y &lt; height/8; _y += 1) {
    for (_x = 0; _x &lt; width/8; _x += 1) {
        if _x == 0 || _y == 0 || _x == width/8 - 1 || _y == height/8 - 1 {
            if phase == 0 {
                if _y*8 &gt; bg_height
                    break;
                if _y*8 == bg_height &amp;&amp; _x*8 &gt; bg_width
                    break;
            }
            if phase == 2 {
                if _y*8 &lt; bg_height
                    break;
                if _y*8 == bg_height &amp;&amp; _x*8 &lt; bg_width
                    break;
            }
            draw_sprite_ext(sprPauseKnurl,0,draw_x + 8*_x, draw_y + 8*_y,1,1,0,c_secondary,1)
        }
    }
}

if phase == 0 || phase == 2
{
    exit;
}

draw_set_halign(fa_left);
draw_set_valign(fa_middle);

draw_x_w = draw_x + 12;

// draw a each weapon row:
for (i=0;i&lt;weapon_map_n[option_page];i+=1) {
    opt_weapon = weapon_map[option_page,i]
    draw_y_w = draw_y + 16*i+16;
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    // option is weapon or utility:
    if opt_weapon &lt; exitstage &amp;&amp; opt_weapon &gt;= megabuster {
        if global.weaponUnlocked[opt_weapon] {
            var ammo;
            // bar length
            if opt_weapon == megabuster
            {
                ammo = global.playerHealth[player_id]
            }
            else
            {
                ammo = ceil(global.ammo[player_id,opt_weapon]);
            }
            
            // black bar behind energy
            draw_set_color(c_black)
            draw_sprite(sprPauseAmmoBar,0, draw_x_w + 16,draw_y_w)
            
            // weapon abbreviation
            draw_set_color(c_white);
            
            if selectTimer mod 12 &gt;= 6 || i != option
                draw_text(draw_x_w, draw_y_w, option_name[option_page,i])
            
            for (j=0;j&lt;ammo;j += 1) {
                draw_sprite(sprPauseAmmoUnit, 0, draw_x_w + 16 + 2*j,draw_y_w)
            }
        }
    } else if opt_weapon == exitstage {
        if selectTimer mod 12 &gt;= 6 || i != option {
            if !exitconfirm
                draw_text(draw_x_w, draw_y_w, "QUIT")
            else
                draw_text(draw_x_w, draw_y_w, "SURE?")
        }
    } else if opt_weapon == opt_switch {
        if selectTimer mod 12 &gt;= 6 || i != option 
            draw_text(draw_x_w, draw_y_w, option_name[option_page,i])
    } else if opt_weapon == opt_etank || opt_weapon == opt_mtank {
        if selectTimer mod 12 &gt;= 6 || i != option 
            draw_text(draw_x_w, draw_y_w, option_name[option_page,i])
        var subimg, count;
        subimg = 0
        count = global.eTanks
        if opt_weapon == opt_mtank
        {
            subimg = 1
            count = global.mTanks
        }
        spacing = min(12,48/max(1,count))
        for (j=0; j&lt; count; j += 1) {
            draw_sprite(sprPauseEtank,subimg,draw_x_w + 16 + spacing*j,draw_y_w)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
