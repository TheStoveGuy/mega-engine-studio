<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGabgyoRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//col = &lt;number&gt; (0 = red (default); 1 = yellow)
//variation = &lt;number&gt; (0 = out-of-pit jumper (default); 1 = swimmer;)

event_inherited();

respawn = true;

healthpointsStart = 1;
healthpoints = healthpointsStart;

ogContactDamage = 3;
contactDamage = 3;

//Enemy specific code
col = 0;
variation = 0;
init = 1;

phase = 0;
timer = 0;

imgIndex = 0;
imgSpd = 0.16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    if (col == 1)
    {
        sprite_index = sprGabgyoYellow;
    }
    if (variation == 1)
    {
        imgIndex = 4;
    }
}

if (variation == 0 &amp;&amp; phase != 1)
{
    visible = false;
    canHit = false;
    contactDamage = 0;
}

event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    if (variation == 0) //out-of-pit jumper
    {
        switch (phase)
        {
            case 0: //wait to jump
                
                if instance_exists(target)
                {
                     if (abs(target.x - x) &lt; 32) //&lt;-- detection range here
                     {
                        phase = 1;
                        calibrateDirection();
                        visible = true;
                        canHit = true;
                        if (instance_exists(target))
                        {
                            ySpeedAim(target.y, gravAccel);
                            yspeed -= 0.8; //little extra height
                        }
                        
                        contactDamage = ogContactDamage;
                    }
                }
                
                break;
                
            case 1: //jumping
                imgIndex += imgSpd;
                
                if (yspeed &lt; 0)
                {
                    if (imgIndex &gt;= 2)
                    {
                        imgIndex = imgIndex mod 2;
                    }
                }
                else
                {
                    if (imgIndex &gt;= 4)
                    {
                        imgIndex = 2 + imgIndex mod 4;
                    }
                }
                yspeed += gravAccel; //don't change gravity if in the water, so behavior is consistant, and it works with ySpeedAim
                
                if (y + yspeed &gt;= ystart)
                {
                    phase = 2;
                    y = ystart;
                    yspeed = 0;
                    visible = false;
                    imgIndex = 0;
                }
                generalCollision();
                
                break;
                
            //cooldown
            case 2:
                timer += 1;
                if (timer &gt;= 90)
                {
                    phase = 0;
                    timer = 0;
                }
                
                break;
        }
    }
    else if (variation == 1) //swimmer
    {
        //animation
        imgIndex += imgSpd;
        if (imgIndex &gt;= 8)
        {
            imgIndex = 4 + imgIndex mod 8;
        }
        
        switch (phase)
        {
            case 0: //start facing the player
                calibrateDirection();
                phase = 1;
                
                break;
                
            case 1: //swim around
                generalCollision();
                range = 48; //&lt;-- movement area width here
                if (xspeed == 0 || x &lt; xstart - range || x &gt; xstart + range)
                {
                    image_xscale = -image_xscale;
                }
                xspeed = 1.6 * image_xscale;
                
                break;
        }
    }
    
    x += xspeed;
    y += yspeed;
}
else if dead
{
    if (variation == 0 &amp;&amp; phase == 1)
    {
        timer += 1;
        if (timer &gt;= 96)
        {
            phase = 0;
            timer = 0;
            
            dead = false;
            beenOutsideView = false;
        }
    }
    else
    {
        phase = 0;
        timer = 0;
    }
    
    xpeed = 0;
    yspeed = 0;
    
    if (variation == 0)
    {
        imgIndex = 0;
    }
    else if (variation == 1)
    {
        imgIndex = 4;
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
