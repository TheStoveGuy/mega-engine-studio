<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprScrewBomberRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//col = &lt;number&gt; (0 = red (default); 1 = orange; 2 = blue)

event_inherited();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 1;

//Enemy specific code
col = 0; //0 = red; 1 = orange; 2 = blue
init = 1;

shootTimer = 0;
shooting = false;
shootAmount = 0;
animate = false;
animateTimer = 0;
image_xscale = 1;

radius = 100;

checkGround();

if !ground
{
    if place_meeting(x,y-12,objSolid)
    {
        image_yscale = -1;
        y += 16;
        ystart = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    switch col
    {
        case 0: sprite_index = sprScrewBomberRed; break;
        case 1: sprite_index = sprScrewBomberOrange; break;
        case 2: sprite_index = sprScrewBomberBlue; break;
        default: sprite_index = sprScrewBomberRed; break;
    }
}

event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    if distance_to_object(target) &lt;= radius || shooting || image_index != 0 {
        if !shooting {
            shootTimer += 1;
            if shootTimer == 85 {
                image_index = 1;
            }
            else if shootTimer == 90 {
                image_index = 2;
                animate = true;
                shooting = true;
                shootTimer = 0;
            }
        }
        else {
            shootTimer += 1;
            if shootTimer == 24 {
                if shootAmount == 2 {
                    animate = false;
                    image_index = 1;
                    animateTimer = 0;
                }
            }
            else if shootTimer == 29 {
                if shootAmount == 2 {
                    shootTimer = 0;
                    shooting = false;
                    shootAmount = 0;
                    image_index = 0;
                }
            }
            else if shootTimer == 30
            {
                if shootAmount != 2
                {
                    var shootID;
                    shootID = instance_create(x+8,y+3*image_yscale, objBeakBullet);
                    shootID.image_index = col;
                    shootID.dir = 0;
                    shootID.xscale = 1;
                    
                    shootID = instance_create(x+4,y+2*image_yscale, objBeakBullet);
                    shootID.image_index = col;
                    shootID.dir = 45;
                    if image_yscale = -1 {
                        shootID.dir -= 90;
                    }
                    shootID.xscale = 1;
                    
                    shootID = instance_create(x,y,objBeakBullet);
                    shootID.image_index = col;
                    shootID.dir = 90;
                    if image_yscale = -1 {
                        shootID.dir += 180;
                    }
                    shootID.xscale = 1;
                    
                    shootID = instance_create(x-4,y+2*image_yscale, objBeakBullet);
                    shootID.image_index = col;
                    shootID.dir = 135;
                    if image_yscale = -1 {
                        shootID.dir += 90;
                    }
                    shootID.xscale = 1;
                    
                    shootID = instance_create(x-8,y+3*image_yscale, objBeakBullet);
                    shootID.image_index = col;
                    shootID.dir = 180;
                    shootID.xscale = 1;
                        
                    shootAmount += 1;
                    shootTimer = 0;
                    playSFX(sfxEnemyShootClassic);
                }
            }
        }
        
        if animate {
            animateTimer += 1;
            if animateTimer &gt;= 4 {
                animateTimer = 0;
                switch image_index {
                    case 2: image_index = 3; break;
                    case 3: image_index = 4; break;
                    case 4: image_index = 2; break;
                }
            }
        }
    }
    else{
        if shootTimer &lt; 85 {
            shootTimer += 1;
        }
    }
}
else if dead
{
    shootTimer = 0;
    shooting = false;
    shootAmount = 0;
    image_index = 0;
    animate = false;
    animateTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
