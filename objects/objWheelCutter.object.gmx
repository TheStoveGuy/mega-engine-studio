<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWheelCutter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

wpnID = 8; //Weapon ID

ammo_cost = 1;

image_speed = 0.6;

penetrate = 1;
pierces = 2;

xspeed=0;
yspeed=0;
grav=0;

attached = true;

ground = false;
bounceTimes = 0;
wallwait = 0;

jumpSpeed = 7;
accel = 0.25;
stepend = 0;
maxVspeed = 7;

playSFX(sfxWheelCutter1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stepend = 1;
if attached &amp;&amp; instance_exists(parent)
{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if attached
{ 
    if instance_exists(parent)
    {
        stepend = 0;
        event_user(0);
        parent.shootTimer = 0;
    }
}

if !global.frozen
{
    if attached &amp;&amp; !global.timeStopped
    {
        if place_meeting(x,y,objSolid) or place_meeting(x,y,prtMovingPlatformSolid)
        {
        
            with parent
            {
                if !climbing
                {
                    accel = other.accel*2;
                    if global.GravityDir = 1
                    {
                        if yspeed &gt; -jumpSpeed {yspeed -= accel;}
                        if yspeed &gt; 0 {yspeed -= accel*2;}
                        if yspeed &lt; -jumpSpeed {yspeed = -jumpSpeed;}
                    }
                    else
                    {
                        if yspeed &lt; jumpSpeed {yspeed += accel;}
                        if yspeed &lt; 0 {yspeed += accel;}
                        if yspeed &gt; jumpSpeed {yspeed = jumpSpeed;}
                    }
                }
            }
        }
    }
    else
    {
        if abs(xspeed) &lt; 5
        {
            xspeed += 0.05*image_xscale;
        }
        
        checkGround();
        gravityCheckGround();
        
        if !bounceTimes
        {
            xspeed = 0;
            if ground
            {
                bounceTimes += 1;
            }
        }
        
        ys = yspeed;
        xs = xspeed;
        event_user(1); //Modified collision code
        
        x += xspeed;
        y += yspeed;
        
        if yspeed = 0 //Bounce from ground
        {
            if ys != 0
            {
                if ys &gt; 0
                {
                    ground = false;
                    yspeed=-ys*0.5; 
                    if yspeed &gt; -0.5
                    {
                        yspeed = 0;
                        ground = true;
                    }
                    bounceTimes += 1;
                }
                else
                {
                    instance_destroy();
                    instance_create(x,y,objExplosion);
                }
            }
        }
        
        if xspeed = 0
        {
            if xs != 0
            {
                wallwait += 1;
                if wallwait &gt; 10
                {
                    if yspeed = 0 {playSFX(sfxWheelCutter2);}
                    if yspeed &gt; -jumpSpeed {yspeed -= accel;}
                    if yspeed &lt; -jumpSpeed{yspeed = -jumpSpeed;}
                    yspeed -= gravAccel;
                }
                else
                {
                    yspeed = 0;
                }
            }
        }
        else
        {
            wallwait = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpSpeed = parent.jumpSpeed;
maxVspeed = parent.maxVspeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if attached
{
    canhit = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///generalCollision()
//Handles a general object's collision code. The object cannot have a specified mask. If it does, use generalCollisionMask()

var mySolid,myxspeed,myyspeed;
myxspeed = xspeed;
if xspeed &gt; -1 &amp;&amp; xspeed &lt; 1 {
    myxspeed = sign(xspeed);
}
myyspeed = yspeed;
if yspeed &gt; -1 &amp;&amp; yspeed &lt; 1 {
    myyspeed = sign(yspeed);
}

if xspeed != 0 {
    //Wall
    mySolid = instance_place(x+myxspeed, y, objSolid);
    if mySolid {
        if mySolid.object_index == objDestroyableBlockWheel { exit; }
        
        if xspeed &lt; 0 {
            //x = mySolid.bbox_right + (x - (bbox_left-1))//-1;
            x = mySolid.bbox_right;
            while place_meeting(x, y, mySolid) {x += 1;}
        }
        else {
            //x = mySolid.bbox_left - (bbox_right+1 - x)-1;
            x = mySolid.bbox_left;
            while place_meeting(x, y, mySolid) {x -= 1;}
        }
        xspeed = 0;
    }
    
    //Wall (moving platform)
    mySolid = instance_place(x+myxspeed, y, prtMovingPlatformSolid);
    if mySolid &amp;&amp; xspeed != 0 {    
        if !mySolid.dead {
            if xspeed &lt; 0 {
                //x = mySolid.bbox_right + (x - (bbox_left-1));
                x = mySolid.bbox_right;
                while place_meeting(x, y, mySolid) {x += 1;}
            }
            else {
                //x = mySolid.bbox_left - (bbox_right+1 - x);
                x = mySolid.bbox_left;
                while place_meeting(x, y, mySolid) {x -= 1;}
            }
            xspeed = 0;
        }
    }
}

if yspeed &gt; 0 {
    //Floor
    mySolid = instance_place(x, y+myyspeed, objSolid);
    if mySolid {
        y = mySolid.bbox_top;
        while place_meeting(x, y, mySolid) {y -= 1;}
        ground = true;
        yspeed = 0;
    }
    
    //Topsolids
    mySolid = instance_place(x, y+myyspeed, objTopSolid);
    if mySolid {
        if !place_meeting(x, y, mySolid) {
            //y = mySolid.bbox_top - (bbox_bottom+1 - y);
            y = mySolid.bbox_top;
            while place_meeting(x, y, mySolid) {y -= 1;}
            ground = true;
            yspeed = 0;
        }
    }
    
    //Floor (moving platform)
    var mySolid;
    mySolid = instance_place(x, y+myyspeed, prtMovingPlatformSolid);
    if mySolid {
        if !mySolid.dead {
            y = mySolid.bbox_top;
            while place_meeting(x, y, mySolid) {y -= 1;}
            ground = true;
            yspeed = 0;
        }
    }
    
    //Topsolids (moving platform)
    mySolid = instance_place(x, y+myyspeed, prtMovingPlatformJumpthrough);
    if mySolid {
        if !mySolid.dead {
            if !place_meeting(x, y, mySolid) {
                //y = mySolid.bbox_top - (bbox_bottom+1 - y);
                y = mySolid.bbox_top;
                while place_meeting(x, y, mySolid) {y -= 1;}
                ground = true;
                yspeed = 0;
            }
        }
    }
}

if yspeed &lt; 0 {
    //Ceiling
    mySolid = instance_place(x, y+myyspeed, objSolid);
    if mySolid {
        //y = mySolid.bbox_bottom + (y - (bbox_top-1));
        y = mySolid.bbox_bottom;
        while place_meeting(x, y, mySolid) {y += 1;}
        yspeed = 0;
    }
    
    //Ceiling (moving platform)
    mySolid = instance_place(x, y+myyspeed, prtMovingPlatformSolid);
    if mySolid {
        if !mySolid.dead {
            //y = mySolid.bbox_bottom + sprite_get_yoffset(sprite_index);
            y = mySolid.bbox_bottom;
            while place_meeting(x, y, mySolid) {y += 1;}
            yspeed = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var detach = !global.keyShoot[player_id]
if global.playerHealth[player_id] &lt;= 0 {detach = 1;}

if detach
or parent.isSlide or parent.teleporting or parent.isHit
{
    attached = 0;
    grav = 0.25;
    if place_meeting(x,y,objSolid) or place_meeting(x,y+1,objSolid)
    {
        instance_destroy();
        instance_create(x,y,objExplosion);
    }
    exit;
}

with parent
{
    if climbing {
        other.yy = 3; other.xx = 17;
    }
    else if !ground {
        other.yy = -1; other.xx = 19;
    }
    else {
        if !isStep {
            other.yy = 4; other.xx = 21;
        }
        else {
            other.yy = 4; other.xx = 23;
        }
    }
}

if stepend = 0 {xx = 19;}

image_xscale = parent.image_xscale;
image_yscale = parent.image_yscale;
x = parent.x+xx*image_xscale;
y = parent.y+yy*global.GravityDir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
