<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBossDoor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code:
//dir = -1/1 (-1 = opened from the left (default); 1 = opened from the right); 0 = opened both ways;
mySolid = noone

dir = 0;
height = 4;
doorHeight = height
opening = false;
closing = false;
canOpen = true;
openImgSpeed = 0.125;
layer = 1000000;
image_speed = 0;

BlockSolid = noone;
isTile = false;

type = '';

triggerPlayer = objMegaman
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,z,t;

if isTile &amp;&amp; type != ''
{
    for(i=0; i&lt;image_xscale; i+=1;)
    for(z=0; z&lt;image_yscale; z+=1;)
    {
        t = tile_layer_find(1000000,x+i*16,y+z*16);
        if t {tile_delete(t);}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canOpen
{
    if instance_exists(objMegaman)
    {
        var test_col = collision_rectangle(bbox_left+3, bbox_top+3, bbox_right-3, bbox_bottom-3, objMegaman, false, false);
        if instance_exists(test_col)
        {
            triggerPlayer = test_col;
            if !triggerPlayer.teleporting
            {   
                if type = "h" or type = "v"
                {
                    canOpen = false;
                    opening = true;
                    with triggerPlayer
                    {
                        isShoot = 0;
                        if other.type = "h"
                        {
                            i = sign(other.mid-x);
                            playerCameraInit(64*i,0);
                            xy = "x";
                        }
                        if other.type = "v"
                        {
                            i = sign(other.mid-y);
                            playerCameraInit(0,64*i);
                            xy = "y";
                        }
                        ID = instance_create(x, y, objSectionSwitcher);
                        ID.dir = xy;
                        ID.num = 1*i;
                        ID.door = true;
                        ID.doorWait = other.height;
                    }
                }
            }
        }
    }
}

if closing or opening
{
    lastHeightFrame = doorHeight;
    if closing
    {
        doorHeight += openImgSpeed
    }
    else
    {
        doorHeight -= openImgSpeed
    }
    if doorHeight &lt; 0 {doorHeight = 0;}
    if doorHeight &gt; height {doorHeight = height;}
    
    if floor(doorHeight) != floor(lastHeightFrame)
    {
        playSFX(sfxDoor);
        if isTile
        {
            if type = 'h'
            {
                for(i=0;i&lt;image_xscale;i+=1;)
                {
                    t = tile_layer_find(layer,x+i*16,y+(floor(doorHeight)-1+opening)*16);
                    if t {tile_set_visible(t,closing);}
                }
            }
            if type = 'v'
            {
                for(i=0;i&lt;image_yscale;i+=1;)
                {
                    t = tile_layer_find(layer,x+(floor(doorHeight)-1+opening)*16,y+i*16);
                    if t {tile_set_visible(t,closing);}
                }
            }
        }
    }
    
    if floor(doorHeight) == height &amp;&amp; closing
    {
        with objSectionSwitcher {instance_destroy();}
        doorHeight = height;
        closing = false;
        canOpen = true;
        opening = false;
    }
}

instance_activate_object(mySolid);
if instance_exists(mySolid)
{
    if global.LockTransition {
        mySolid.issolid = 1;
    }
    else if instance_exists(triggerPlayer) {
        mySolid.issolid = 1;
        if dir != 0
        {
            if type = 'h' {
                if sign(other.mid-triggerPlayer.x) = -sign(dir) {
                    mySolid.issolid = 2;
                }
            }
            if type = 'v' {
                if sign(other.mid-triggerPlayer.y) = -sign(dir) {
                    mySolid.issolid = 2;
                }
            }
        }
        else {mySolid.issolid = 2;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if in upper-left corner
if place_meeting(x,y-4,object_index) or place_meeting(x-4,y,object_index) {exit;}

//Set vertical (horizontal door)
while place_meeting(x,y+4,object_index)
{
    while place_meeting(x,y+4,object_index)
    {
        with instance_place(x,y+4,object_index) {instance_destroy();}
    }
    image_yscale += 1;
}
    
//Set horizontal (vertical door)
while place_meeting(x+4,y,object_index)
{
    while place_meeting(x+4,y,object_index)
    {
        with instance_place(x+4,y,object_index) {instance_destroy();}
    }
    image_xscale += 1;
}

var v; v=0;
//If x- and y-scale is same
if image_xscale == image_yscale
{
    v = place_meeting(x,y,objSectionVerticalScrolling);
}
//If vertical
if (image_xscale &gt; image_yscale) or v
{
    type = 'v';
    height = image_xscale;
    doorHeight = height;
    mid = bbox_top+(bbox_bottom-bbox_top)*0.5;
    sprite_index = sprBossDoorVertical;
}
//If horizontal
else if (image_xscale &lt; image_yscale) or !v
{
    type = 'h';
    height = image_yscale;
    doorHeight = height;
    mid = bbox_left+(bbox_right-bbox_left)*0.5;
    sprite_index = sprBossDoor;
}

//Set direction of the door
if type = 'h'
{
    if place_meeting(x,y,objSectionArrowRight)
    {
        if !place_meeting(x,y,objSectionArrowLeft)
        {
            dir = -1;
        }
    }
    else if place_meeting(x,y,objSectionArrowLeft)
    {
        dir = 1;
    }
}
if type = 'v'
{
    dir = -1;
    if place_meeting(x,y,objSectionPit)
    {
        dir = 1;
    }
}

//Set solid part of the door
mySolid = instance_create(x, y, objSolidIndependent);
mySolid.image_xscale = image_xscale;
mySolid.image_yscale = image_yscale;

var xs,ys,tx,ty,d,tile;
d = 1000000; //Tile layer
if isTile
{
    //Tile split check
    for(xs=0;xs&lt;image_xscale;xs+=1;)
    for(ys=0;ys&lt;image_yscale;ys+=1;)
    {
        tile = tile_layer_find(d,x+xs*16,y+ys*16);
        if tile
        {
            if tile_get_left(tile) &gt; 16 or tile_get_top(tile) &gt; 16
            {
                for(tx=0;tx&lt;tile_get_width(tile); tx+=16;) {
                for(ty=0;ty&lt;tile_get_height(tile);ty+=16;) {
                    tile_add(tile_get_background(tile),
                        tile_get_left(tile)+tx,tile_get_top(tile)+ty,
                        16,16,
                        tile_get_x(tile)+tx,tile_get_y(tile)+ty,d);
                }
                }
                tile_delete(tile);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isTile {exit;}

var yy,xx; yy=y; xx=x;

//Draw horizontal door
if type = 'h' {
    for (i=0; i&lt;=doorHeight-1; i+=1;) {
        repeat(image_xscale) {
            draw_sprite_ext(sprite_index,image_index,xx,yy,1,1,0,c_white,1);
            xx += 16;
        }
        yy += 16; xx=x;
    }
}
//Draw vertical door
if type = 'v' {
    for (i=0; i&lt;=doorHeight-1; i+=1;) {
        repeat(image_yscale) {
            draw_sprite_ext(sprite_index,image_index,xx,yy,1,1,0,c_white,1);
            yy += 16;
        }
        xx += 16; yy=y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
