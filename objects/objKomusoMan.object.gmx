<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKomusoIntro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprKomusoMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//deadlyShadowClones = true; -  use this if you want the shadow clones to cross the entire screen rather than halfway.
event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprKomusoIntro;
poseImgSpeed = 12/60;
contactDamage = 4;

ground = false;
attackTimer = 0;

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;
// this is the minmum image_indexs of komuso man for any given animation. imageNoMin is what the image_index is set to when komuso man has finished an animation.
imageNoMin = 0;

phase = 0; 

walkX = 2.5;
resetY = y;

delay = 0;

hasFired = false;
moveToLocation = 0;
locationX = 0;
locationY = view_yview + 64;
timesMoved = 0;

guard = 0;

shadowClones = ds_list_create();
shadowClones[0] = 0;
shadowClones[1] = 1;
shadowClones[2] = 2;

deadlyShadowClones  = false;

//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 1; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 0; //HornetChaser
wpndmg[5] = 0; //JewelSatellite
wpndmg[6] = 4; //GrabBuster
wpndmg[7] = 1; //TripleBlade
wpndmg[8] = 4; //WheelCutter
wpndmg[9] = 2; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 6; //WireAdapter

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false
{
    if isFight == true
    {
        locationY = view_yview + 64;
        x += xspeed;
        y += yspeed;
        image_speed = 0;
        //checkGround();
        //gravityCheckGround();
        //generalCollision();
        
        //setup locations to transport to
        switch moveToLocation
            {
            case 0:
                locationX = view_xview + 48;
            break;
            case 1:
                locationX = view_xview + (view_wview/2);
            break;
            case 2:
                locationX = view_xview + view_wview - 48;
            break;
            }       
        
        // resets the image timer if kumuso man ever changes poses
        if pose != sprite_index
            {
            pose = sprite_index;
            imageTimer = 0;
            }
        
        attackTimer += 1;
        if delay &gt; 0
            delay -= 1;
        imageTimer += 1;
        if imageTimer &gt;= imageTimerMax &amp;&amp; image_index &lt; image_number-1
        {
            imageTimer = 0;
            image_index += 1;
        }
        if imageTimer &gt;= imageTimerMax &amp;&amp; image_index == image_number-1
        {
            imageTimer = 0;
            image_index = imageNoMin;
        }
        switch phase
            {
            case 0: // idle
                sprite_index = sprKomusoFlute;
                imageTimerMax = 9999;
                if attackTimer &gt;= 35
                    {
                    phase = 1;
                    attackTimer = 0;
                    }
            
            case 1: // summon doppler gangers
                imageTimerMax = 7;
                imageNoMin = 0;
                    if image_xscale == 1
                        moveToLocation = 2 - instance_number(objKomusoDoppler);
                    else
                        moveToLocation = instance_number(objKomusoDoppler);
                    
                if attackTimer == 35 &amp;&amp; instance_number(objKomusoDoppler) &lt; 2
                    {
                    delay = 4;
                    playSFX(sfxKomusoDoppler);
                    instance_create(x,y,objKomusoSmoke);
                    kD = instance_create(x,y,objKomusoDoppler);
                    kD.image_xscale = image_xscale;
                    kD.moveToLocation = moveToLocation;
                    kD.deadlyShadowClones = deadlyShadowClones;
                    }  
                if attackTimer == 35 &amp;&amp; instance_number(objKomusoDoppler) &gt;= 2 &amp;&amp; delay == 0
                    {
                    playSFX(sfxKomusoDoppler);
                    instance_create(x,y,objKomusoSmoke);
                    phase = 2;
                    }
            break;
            case 2: // dash to location
                
                guard = true;
                sprite_index = sprKomusoDoppler2;
                imageTimerMax = 4;
                imageNoMin = 2;
               
                if xspeed == 0
                    xspeed = (2.5+deadlyShadowClones)*image_xscale;
                if (image_xscale = 1 &amp;&amp; x &gt;= view_xview + (view_wview/2) &amp;&amp; deadlyShadowClones == false) || (image_xscale = -1 &amp;&amp; x &lt;= view_xview + (view_wview/2) &amp;&amp; deadlyShadowClones == false)
                or (image_xscale = 1 &amp;&amp; x &gt;= view_xview + (view_wview-32) &amp;&amp; deadlyShadowClones == true) || (image_xscale = -1 &amp;&amp; x &lt;= view_xview + 32 &amp;&amp; deadlyShadowClones == true)
                    phase = 3;
                
            break;
            case 3: // fly to upper location
                xspeed = 0;
                yspeed = 0;
                sprite_index = sprKomusoDoppler1;
                mp_linear_step(locationX,locationY,3.5,false);
                if abs(x - locationX) &lt;= 2 &amp;&amp; abs(y - locationY) &lt;= 2
                    {
                    x = locationX;
                    y = locationY;
                    phase = 4;
                    with objKomusoDoppler
                        phase = 3;
                    }
            break;
            case 4: // fire shots
                if hasFired == false
                    delay = 25;
                    imageTimerMax = 5;
                    imageNoMin = image_number-1;
                sprite_index = sprKomusoDoppler3;
                if image_index &gt;= 3 &amp;&amp; hasFired == false
                    {
                    hasFired = true;
                    var ID;
                    imageTimerMax = 15;
                    ID = instance_create(x, y, objKomusoBullet);
                        ID.angle = 90+180;
                        ID.xscale = image_xscale;
                    ID = instance_create(x, y, objKomusoBullet);
                        ID.angle = 135+180;
                        ID.xscale = image_xscale;
                    ID = instance_create(x, y, objKomusoBullet);
                        ID.angle = 45+180;
                        ID.xscale = image_xscale;
                    playSFX(sfxKomusoShot);
                    }
                if image_index &gt; 3
                    imageTimerMax = 6;
                if image_index &gt; 3 &amp;&amp; instance_number(objKomusoBullet) &lt; 2 &amp;&amp; delay == 0
                    {
                    phase = 5;
                    timesMoved += 1;
                    with objKomusoDoppler
                        phase = 4;
                    }
            break;
            case 5: // move to middle
                moveToLocation = 1;
                locationY = resetY;
                image_index = 3;
                mp_linear_step(locationX,locationY,2,false);
                if abs(x - locationX) &lt;= 2 &amp;&amp; abs(y - locationY) &lt;= 2
                    {
                    x = locationX;
                    y = resetY;
                    guard = false;
                    playSFX(sfxKomusoDoppler);
                    instance_create(x,y,objKomusoSmoke);
                    if timesMoved == 1
                        phase = 6;
                    else
                        phase = 8;
                    sprite_index = sprKomusoFlute;
                    imageTimerMax = 9999;
                    delay = 4;
                    }
            break;
            case 6: // move to other side of the screen. 
                xspeed = 2.5*image_xscale;
                sprite_index = sprKomusoDash;
                imageTimerMax = 4;
                imageNoMin = 2;
                checkGround();
                gravityCheckGround();
                generalCollision();
                if xspeed == 0 &amp;&amp; delay == 0 &amp;&amp; timesMoved &lt; 10
                    {
                    image_xscale = image_xscale * -1;
                    hasFired = false;
                    phase = 0;
                    attackTimer = 0;
                    locationY = view_yview + 64;
                    }
                if xspeed == 0 &amp;&amp; delay == 0 &amp;&amp; timesMoved &gt;= 10
                    phase = 10;
            break;
            // phase 7 - no phase here - waiting for new phase!    
            case 8: // summon fire pillars
                timesMoved = 10;
                calibrateDirection();
                sprite_index = sprKomusoFlute;
                imageTimerMax = 12;
                imageNoMin = 0;
            if !instance_exists(objKomusoFire)
                {
                playSFX(sfxKomusoFireTower);
                kF = instance_create(view_xview+(view_wview/4),view_yview+view_hview,objKomusoFire);
                    kF.cDir = 1;
                kF = instance_create(view_xview+(view_wview/4),view_yview+view_hview,objKomusoFire);
                    kF.cAngle = degtorad(270);
                kF = instance_create(view_xview+view_wview-(view_wview/4),view_yview+view_hview,objKomusoFire);
                    kF.cDir = 1;
                    kF.cAngle = degtorad(270);
                kF = instance_create(view_xview+view_wview-(view_wview/4),view_yview+view_hview,objKomusoFire);
                }
                phase = 9;
            break;
            // phase 9 - no phase here - waiting for new phase!
            case 10: // teleport
                image_xscale = 1;
                sprite_index = sprKomusoTeleport1;
                imageTimerMax = 3;
                imageNoMin = image_number-1;
                
                if image_index &gt;= 8
                    canHit = false;
                    contactDamage = 0;
                if image_index &gt;= imageNoMin
                    if instance_exists(target)
                    {
                        x = target.x;
                        delay = 8;
                        sprite_index = sprKomusoTeleport2;
                        image_index = 0;
                        phase = 11;
                        timesMoved += 1;
                        playSFX(sfxKomusoDoppler);
                    }
                    else
                    {
                        x = x;
                        delay = 8;
                        sprite_index = sprKomusoTeleport2;
                        image_index = 0;
                        phase = 11;
                        timesMoved += 1;
                        playSFX(sfxKomusoDoppler);
                    }
            break;
            case 11: // teleport in
                imageNoMin = image_number-1;
                if timesMoved &gt; 11
                    timesMoved = 0;
                if image_index &gt; 10 &amp;&amp; delay = 0
                    {
                    calibrateDirection();
                    canHit = true;
                    contactDamage = 4;
                    }
                if image_index &gt;= imageNoMin &amp;&amp; delay = 0
                    phase = 6;
            break;
                    
            
           }
    }
}
else
{
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if guard
{
    other.guardcancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
