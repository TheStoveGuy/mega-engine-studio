<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPierrobug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//col = &lt;number&gt; (0 = grey ball(default); 1 = teal ball; )  

event_inherited();

respawn = true;

healthpointsStart = 6;
healthpoints = healthpointsStart;
contactDamage = 6;

//Enemy specific code
calibrateDirection()

hasFired=false;
imageOffset=0;
imageTimer=0;
imageTimerMax=12;
timerAdd=1;
beginShoot=0;

objectThrown=objPierrobugBall;

col = 0;

//stores the weapon damage values
wpndmg[4] = 3; //HornetChaser
wpndmg[5] = 6; //JewelSatellite
wpndmg[6] = 2; //GrabBuster
wpndmg[7] = 1; //TripleBlade
wpndmg[8] = 3; //WheelCutter
wpndmg[9] = 6; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 6; //SuperArrow
wpndmg[12] = 3; //WireAdapter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_index=imageOffset;

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    calibrateDirection()
    checkGround();
    gravityCheckGround();
    generalCollision();
    x += xspeed;
    y += yspeed;
        
    // animation timer setup;
    switch (imageOffset)
    {
        case 0 :
            imageTimerMax=10;
            timerAdd=1;
            break;
        case 1: 
            imageTimerMax=10;
            break;
        case 2: 
            imageTimerMax=10;
            timerAdd=-1;
            break;
        case 3: 
            imageTimerMax=12;
            break;
        case 6: 
            imageTimerMax=24;
            break;
    }    
    
    imageTimer += 1;
       
    if imageTimer == imageTimerMax &amp;&amp; imageOffset &lt; 3 &amp;&amp; beginShoot &lt; 3
        {
        imageOffset += timerAdd;
        imageTimer=0;
        if imageOffset == 2
            beginShoot+=1;
        
        }
        if imageTimer == imageTimerMax &amp;&amp; imageOffset &lt; 3 &amp;&amp; beginShoot == 3
        {
        imageOffset = 3;
        imageTimer=0;
        }
    else if imageTimer == imageTimerMax &amp;&amp; imageOffset &gt;= 3
        {
        imageOffset += 1;
        imageTimer=0;
        
        }
        var ID;
        if imageOffset == 6 &amp;&amp; !hasFired
        {
            hasFired = true;
            playSFX(sfxFallNoise);
            var ID;
            ID = instance_create(x+(image_xscale*7), y-15, objectThrown);
            {
                ID.xscale = image_xscale;
                ID.xspeed = 3*image_xscale;
                ID.yspeed = -4;
            }
            ID = instance_create(x+(image_xscale*7), y-15, objectThrown);
            {
                ID.xscale = image_xscale;
                ID.xspeed = 4*image_xscale;
                ID.yspeed = -3;
            }
            ID = instance_create(x+(image_xscale*7), y-15, objectThrown);
            {
                ID.xscale = image_xscale;
                ID.xspeed = 2*image_xscale;
                ID.yspeed = -5;
            }
         }
        if imageOffset == 7
        {
            imageOffset = 0;
            timerAdd = 1;
            beginShoot = 0;
            hasFired = false;
        }
}
else if dead
{
    calibrateDirection()
    xspeed = 0;
    yspeed = 0;
    image_index = 0;
    hasFired = false;
    timerAdd = 1;
    beginShoot = 0;
}

image_index=imageOffset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if imageOffset &lt; 3
{
    other.guardcancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
