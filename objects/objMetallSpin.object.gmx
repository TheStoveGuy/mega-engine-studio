<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMetallSpin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

calibrateDirection();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

//Enemy specific code
radius = 4 * 16; //Four blocks; the radius that MM needs to enter to trigger the shooting of the Met
cooldownTimer = 0;
canShoot = true;
image_speed = 0;
image_index = 0;

xspeed = 0;
yspeed = 0;
animTimer = 0;
isDancing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false &amp;&amp; dead == false &amp;&amp; global.flashStopper == false
{
    checkGround();
    gravityCheckGround();
    generalCollision();
    
    if instance_exists(target)
    {
        if xspeed == 0 { calibrateDirection(); }
        if distance_to_object(target) &lt;= radius
        {
            if canShoot == true
            {
                canShoot = false;
                if cooldownTimer &gt;= 0 { image_index = 1; }
            }
        }
    }
    
    if animTimer &gt; 0 { animTimer -= 1; }
    if animTimer == 12 or animTimer == 8 or animTimer == 4 or animTimer == 1
    {
        image_index -= 1;
    }
    
    if isDancing == true
    {
        image_index += 0.25;
        if image_index &lt; 5 { image_index = 5; }
        if image_index &gt; 8 { image_index = 5; }
    }
    
    if canShoot == false
    {
        cooldownTimer += 1;
        if cooldownTimer == 1 { image_index = 1; }
        else if cooldownTimer == 8 { image_index = 2; }
        else if cooldownTimer == 12 { image_index = 3; }
        else if cooldownTimer == 16 { image_index = 4; }
        else if cooldownTimer == 20
        {
            isDancing = true;
            ID = instance_create(x+image_xscale*8, sprite_get_ycenter(), objEnemyBullet);
            ID.xspeed = 2*image_xscale;    
            playSFX(sfxEnemyShoot);
        }
        else if cooldownTimer == 60
        {
            ID = instance_create(x+image_xscale*8, sprite_get_ycenter(), objEnemyBullet);
            ID.xspeed = 2*image_xscale;    
            playSFX(sfxEnemyShoot);
        }
        else if cooldownTimer == 100
        {
            isDancing = false;
            image_index = 4;
            animTimer = 16;
            ID = instance_create(x+image_xscale*8, sprite_get_ycenter(), objEnemyBullet);
            ID.xspeed = 2*image_xscale;    
            playSFX(sfxEnemyShoot);
        }
        else if cooldownTimer == 150
        {
            canShoot = true;
            cooldownTimer = 0;
        }
    }
        
    x += xspeed;
    y += yspeed;
}
else
{
    if dead == true
    {
        animTimer = 0;
        cooldownTimer = 0;
        canShoot = true;
        image_index = 0;
        image_speed = 0;
        isDancing = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if image_index == 0
{
    other.guardcancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
