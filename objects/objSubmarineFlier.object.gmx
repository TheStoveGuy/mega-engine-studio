<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSubmarineFlier</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 3;

//Enemy specific code
phase = 0;
timer = 0;

xspeed = 0;
yspeed = 0;
waterY = 0;
sinCounter = 0;

imgSpd = 0.2;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    switch (phase)
    {
        
        case 0: //start facing mega man
            calibrateDirection();
            phase = 1;
            break;
        case 1: //slower flying in a sine pattern
            imgIndex += imgSpd;
            if (imgIndex &gt;= 4){
                imgIndex = imgIndex mod 4;
            }
            xspeed = 0.4 * image_xscale;
            
            sinCounter += 0.03;
            yspeed = -(cos(sinCounter) * 0.5);
            
            reveal = false;
            if (healthpoints &lt;= healthpointsStart - 2){
                reveal = true;
            }
            
            if (!reveal &amp;&amp; instance_exists(target)){
                if (target.bbox_left &lt; bbox_right &amp;&amp; target.bbox_right &gt; bbox_left){
                    reveal = true;
                    healthpoints = healthpointsStart - 2;
                }
            }
            
            if (reveal){
                phase = 2;
                xspeed = 0;
                imgIndex = 4;
            }
            break;
        case 2: //shedding cloud animation and falling down to water
            gravityNoGround();
            
            if (imgIndex &lt; 5){
                imgIndex += imgSpd;
            }
            
            if (waterY == 0)
            {
                water = instance_place(x, y + yspeed, objWater);
                if (instance_exists(water)/* &amp;&amp; bbox_top &lt; water.bbox_top &amp;&amp;
                    !collision_rectangle(bbox_left, bbox_top - 1, bbox_right, bbox_top - 1, objWater, false, false)*/){
                    
                    waterY = water.y - 2;
                }
            }
            else if (y &gt;= waterY)
            {
                phase = 3;
                yspeed = 0;
                y = waterY
                imgIndex = 5;
            }
            break;
        case 3: //pause for a bit after falling into the water
            timer += 1;
            if (timer &gt;= 60) //&lt;-- pause time here
            {
                phase = 4;
                timer = 0;
            }
            
            break;
        
        case 4:
            generalCollision();
            
            imgIndex += imgSpd;
            if (imgIndex &gt;= 9){
                imgIndex = 7;
            }
            
            if (instance_exists(target)){
                //turn around
                if (bbox_left &gt; target.bbox_right){
                    image_xscale = -1;
                }
                
                if (bbox_right &lt; target.bbox_left){
                    image_xscale = 1;
                }
                
                //shoot
                timer += 1;
                if (timer &gt;= 65){ //&lt;-- shot wait time here
                    bullet = instance_create(x, y - 12, objEnemyBullet);
                    with (bullet){
                        yspeed = -2.7;
                        grav = 0.15;
                        xSpeedAim(target, yspeed, grav);
                    }
                    
                    timer = 0;
                }
            }
            xspeed = 1 * image_xscale;
            break;
    }
       
    x += xspeed;
    y += yspeed;
}
else if dead
{
    phase = 0;
    timer = 0;
    inWater = false;
    
    xspeed = 0;
    yspeed = 0;
    sinCounter = 0;
    
    image_index = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
