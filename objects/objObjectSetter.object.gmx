<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprObjectSetter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set blank data
lb = objGlobalControl.lb;
for (i=0; i&lt;lb; i+=1;)
{
    if background_exists(i)
    {
        background[i] = '0/x';
    }
}

//Check for set-up-tiles and set attributes
with object_index
{
    var ix,iy,t,d,i,bg,found;
    
    d = 1000000; //Tile layer
    bg = 0;
    found = 0;
    
    //Add tileset
    t = tile_layer_find(d,x,y);
    if t
    {
        bg = tile_get_background(t);
        if (tile_get_width(t) = background_get_width(bg)) &amp;&amp; (tile_get_height(t) = background_get_height(bg))
        {
            if !found
            {
                data = '';
                for (iy=0; iy&lt;background_get_height(bg); iy+=16;)
                {
                    for (ix=0; ix&lt;background_get_width(bg); ix+=16;)
                    {
                        atr = 0;
                        if place_meeting(x+ix,y+iy,objSolid) {atr = 1;}
                        if place_meeting(x+ix,y+iy,objLadder) {atr = 2;}
                        if place_meeting(x+ix,y+iy,objSpike) {atr = 3;}
                        if place_meeting(x+ix,y+iy,objWater) {atr = 4;}
                        f = instance_place(x+ix,y+iy,objWaterFiller)
                        if f {
                            atr = 10;
                            with f {instance_destroy();}
                        }
                        if place_meeting(x+ix,y+iy,objIce) {atr = 5;}
                        if place_meeting(x+ix,y+iy,objBossDoor) {atr = 6;}
                        if place_meeting(x+ix,y+iy,objTopSolid) {atr = 8;}
                        data += string(atr)+'/';
                    }
                    data += 'x'
                }
                other.background[bg] = data;
            }
        }
    }
    tile_delete(t);
    if id != other.id {instance_destroy();}
}

bg = 0;

//Lay down objects
tiles = tile_get_ids_at_depth(d);
l = array_length_1d(tiles);
for (i=0; i&lt;l; i+=1;)
{
    t = tiles[i];
    tleft = tile_get_left(t);
    ttop = tile_get_top(t);
    tx = tile_get_x(t);
    ty = tile_get_y(t);
    
    //Get all tiles
    for (ix=0;ix&lt;tile_get_width(t);ix+=16;)
    for (iy=0;iy&lt;tile_get_height(t); iy+=16;)
    {
        //Check tileset
        if tile_get_background(t) != bg
        {
            //Replace tileset
            bg = tile_get_background(t);
            //Blank out for default
            for (xs=0;xs&lt;background_get_width(bg)/16; xs+=1;)
            for (ys=0;ys&lt;background_get_height(bg)/16;ys+=1;)
            {
                attribute[xs,ys] = 0;
            }
            totaldata = background[bg]; //Get data for the row
            iniy = 0;
            while totaldata != '' { //Seperate Data
                slpos = string_pos('x',totaldata);
                rowdata = string_copy(totaldata,1,slpos-1);
                totaldata = string_delete(totaldata,1,slpos);
                inix = 0;
                while rowdata != '' { //Seperate Data
                    slpos = string_pos('/',rowdata);
                    attribute[inix,iniy] = real(string_copy(rowdata,1,slpos-1));
                    rowdata = string_delete(rowdata,1,slpos);
                    inix += 1;
                }
                iniy += 1;
            }
        }
        
        atr = 0;
        if tleft+ix &lt; background_get_width(bg) &amp;&amp; ttop+iy &lt; background_get_height(bg)
        {
            atr = attribute[(tleft+ix)/16,(ttop+iy)/16]; //Get attribute
        }
        
        if atr != 0 //Place object
        {
            switch(atr)
            {
                case 1:
                    atr = instance_create(tx+ix,ty+iy,objSolid); break;
                case 8:
                    atr = instance_create(tx+ix,ty+iy,objTopSolid); break;
                case 2:
                    atr = instance_create(tx+ix,ty+iy,objLadder); break;
                case 3:
                    atr = instance_create(tx+ix,ty+iy,objSpike); break;
                case 4:
                    atr = instance_create(tx+ix,ty+iy,objWater); break;
                case 10:
                    atr = instance_create(tx+ix,ty+iy,objWaterFiller); break;
                case 5:
                    atr = instance_create(tx+ix,ty+iy,objIce); break;
                case 6:
                    atr = instance_create(tx+ix,ty+iy,objBossDoor); atr.isTile = true; break;
            }
            //atr.visible = 1;
        }
    }
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
