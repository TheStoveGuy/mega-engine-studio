<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTileAnimator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000010</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

img = 0;
alarmimg = 0;

xoff = 0;
yoff = 0;

init = false;

//default values (change these in creation code)
mybg = 0; //my background

bgl = 0; //left
bgt = 0; //top
bgh = 0; //height
bgw = 0; //width

tile = 0; //is a background or a sprite

xspeed = 0; //Horizontal speed
yspeed = 0; //Vertical speed

maximg = 1; //Maximum amount of images
imginterval = -1; //Delay between images
horv = ""; //bg's animation are aligned horizontal "h" or vertical "v" in the sprite sheet (background)

snaptogrid = 0; //align to 16x16 grid
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !init
{
    if !mybg
    {
        instance_destroy();
    }
    
    if bgl = 0 &amp;&amp; bgt = 0 &amp;&amp; bgw = 0 &amp;&amp; bgh = 0
    {
        if tile
        {
            bgw = background_get_width(mybg);
            bgh = background_get_height(mybg);
        }
        else
        {
            bgw = sprite_get_width(mybg);
            bgh = sprite_get_height(mybg);
        }
    }
    init = true;
}

if !global.frozen or instance_exists(objSectionSwitcher)
{
    if imginterval //Image cycling
    {
        alarmimg += 1;
        if (alarmimg &gt;= imginterval)
        {
            alarmimg = 0;
            img += 1;
            if img &gt;= maximg
            {
                img = 0;
            }
        }
    }
    //Reset position
    xoff += xspeed;
    if (abs(xoff) &gt;= bgw)
    {
        xoff -= bgw*sign(xoff);
    }
    
    yoff += yspeed;
    if (abs(yoff) &gt;= bgh)
    {
        yoff -= bgh*sign(yoff);
    }
}

for (z = 0; z &lt;= floor(224 / bgh) + 2; z += 1;)
{
    for (i=0; i &lt;= floor(256 / bgw) + 2; i += 1;)
    {
        xshift = round(xoff);
        yshift = round(yoff);
        
        if (snaptogrid)
        {
            xshift = round(xoff/16)*16;
            yshift = round(yoff/16)*16;
        }
        
        if (tile)
        {
            xadd = 0;
            yadd = 0;
            if (horv = "h")
            {
                xadd = img*bgh;
            }
            if (horv = "v")
            {
                yadd = img*bgw;
            }
            draw_background_part(mybg, bgl + xadd, bgt + yadd, bgw, bgh,
                (floor(view_xview / bgw) * bgw) - bgw + i * bgw + xshift,
                (floor(view_yview / bgh) * bgh) - bgh + z * bgh + yshift
            );
        }
        else
        {
            draw_sprite_part(mybg, img, bgl, bgt, bgw, bgh,
                (floor(view_xview / bgw) * bgw) - bgw + i * bgw + xshift,
                (floor(view_yview / bgh) * bgh) - bgh + z * bgh + yshift
            );
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
