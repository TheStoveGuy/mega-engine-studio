<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM9SpinningPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMovingPlatformJumpthrough</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0.1;

respawn = true;

respawnRange = -1;
despawnRange = -1;

xspeed = 1;
yspeed = 0;

Attached[0] = false;
AttachX[0] = x;
Offset[0] = 0;
SpinRate = 1/30;

for (i=0; i&lt;global.playerCount; i+=1)
{
    Attached[i] = false
    AttachX[i] = 0;
    Offset[i] = 0;
}

CurrX = x;
CurrY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//if global.frozen == false &amp;&amp; dead == false
with objMegaman with other if Attached[other.player_id]
{
    var pid = other.player_id;
    other.image_yscale = 1;
    sprx = min(max(24,24+floor((Offset[pid]+min(0,Dir[pid]/6))*3)),24+2);
    spry = 0;
    if Dir[pid] == 1 &amp;&amp; !Offset[pid] &gt;= 0.95 or Offset[pid] &lt;= 0.15
    {
        spry = 1;
    }
    
    with other
    {
        playerHandleSprites("Magnet");
    }
}

//Stop movement if out of range
if instance_exists(objMegaman)
{
    if !insideSection(x,y)
    {
        x -= xspeed;
        y -= yspeed;
        x = CurrX;
        y = CurrY;
    }
    else
    {
        CurrX = x;
        CurrY = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead
{
    if place_meeting(x+xspeed,y,objMM9PlatformStop)
    {
        xspeed = -xspeed;
    }
    
    with objMegaman with other
    {
        var pid = other.player_id
        if (place_meeting(x,y-global.GravityDir*2,other) &amp;&amp; !place_meeting(x,y,other) &amp;&amp; other.ground)
        or Attached[pid]
        {
            if !Attached[pid]
            {
                Attached[pid] = true;
                canShoot = false;
                AttachX[pid] = other.x-x
                if other.y &gt; y+8
                {
                    Offset[pid] = 1;
                    Dir[pid] = -1;
                }
                else
                {
                    Offset[pid] = 0;
                    Dir[pid] = 1;
                }
            }
            else
            {
                other.x = x+AttachX[pid];
                other.y = y-16+(40*Offset[pid]);
                other.canShoot = false;
                Offset[pid] += SpinRate*Dir[pid];
                if Offset[pid] &gt; 1
                {
                    Offset[pid] = 1
                    Dir[pid] = -1;
                }
                if Offset[pid] &lt; 0
                {
                    Offset[pid] = 0
                    Dir[pid] = 1;
                }
                depth = other.depth-Dir[pid]
                if global.keyJumpPressed[other.player_id]
                {
                    if Offset[pid] &gt; 0.5
                    {
                        yspeed = other.jumpSpeed;
                    }
                    else
                    {
                        yspeed = -other.jumpSpeed;
                    }
                    Attached[pid] = false;
                    // It was easier to just flip the players sprites temporarily for this
                    other.image_yscale = global.GravityDir;
                    other.canShoot = true;
                }
                target.playLandSound = 0;
                target.playLandSoundTimer = 0;
            }
        }
        else
        {
            // This replicates the flicker effect seen in MM9
            if depth &gt; target.depth
            {
                depth = target.depth-1;
            }
            else
            {
                depth = target.depth+1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
