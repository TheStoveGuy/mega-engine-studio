<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLeverHide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>prtGimmick</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0;

active = false;
myinstance = noone;
myindex = noone;
image_alpha = 0;

sprite_index = sprLeverField;

TILE_DEPTH_UNSET = 4.035234 // special value for unset tiles

tag = "";
object = noone;
tile_depth = TILE_DEPTH_UNSET;
    
otheruptag = noone;
otherstate = noone;
    
// time since created:
create_time = 0;

// has propagated tag and depth to other fields?
propagated = false;

// background tile information
bg_src = -1;
bg_l = 0;
bg_t = 0;
bg_w = 16;
bg_h = 16;
bg_x = x;
bg_y = y;

event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !global.frozen &amp;&amp; !global.flashStopper &amp;&amp; create_time &gt; 1
{
    if active
    {
        image_alpha = min(image_alpha + 0.1,1);
        if ((image_alpha &gt;= 0.5 || object != noone) || create_time &lt; 3)
        &amp;&amp; myinstance == noone &amp;&amp; myindex != noone
        {
            // activate object:
            myinstance = instance_create(x,y,myindex);
            
            // water needs special treatment
            if myindex == objWater
            {
                with myinstance
                {
                    alarm[0] = -1;
                }
            }
            // ladders need special treatment
            if myindex == objLadder || myindex == objLadderLever_NaOH
            {
                with myinstance {alarm[0] = 1;}
            }
            // custom creation code
            if otheruptag != noone
            {
                myinstance.uptag = otheruptag;
            }
            if otherstate != noone
            {
                myinstance.state = otherstate;
            }
            
            if myindex == objDownwardsTeleport
            {
                with myinstance
                {
                    X=80;
                    Y=720;
                }
            }
        }
    }
    else 
    {
        image_alpha = max(image_alpha - 0.1,0);
        if (image_alpha &lt; 0.5 &amp;&amp; object == noone) || (image_alpha == 0 &amp;&amp; object != noone)
        &amp;&amp; instance_exists(myinstance)
        {
            with myinstance {instance_destroy()}
            myinstance = noone;
        }
    }
    
    // custom objects set alpha:
    if object != noone &amp;&amp; instance_exists(myinstance)
    {
        myinstance.image_alpha = image_alpha;
    }
}

if instance_exists(objSectionSwitcher)
{
    image_alpha = active;
    if object != noone &amp;&amp; instance_exists(myinstance)
    {
        myinstance.image_alpha = image_alpha;
    }
}

create_time += 1;
depth = tile_depth;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find tile underneath
t = tile_layer_find(tile_depth,x+8,y+8);
split_tile(t);

t = tile_layer_find(tile_depth,x+8,y+8);
if t
{
    bg_src = tile_get_background(t);
    bg_l = tile_get_left(t);
    bg_t = tile_get_top(t);
    bg_w = tile_get_width(t);
    bg_h = tile_get_height(t);
    bg_x = tile_get_x(t);
    bg_y = tile_get_y(t);
    tile_delete(t);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find object underneath field

// set depth to proper value
if tile_depth == TILE_DEPTH_UNSET
{
    tile_depth = 1000000 // replacement tile depth
}
depth = tile_depth;

if object != noone //Set custom object
{
    myindex = object;
}

if myindex == noone //Set tile object
{
    myobj = 0;
    for (i=1; i&lt;=7; i+=1;)
    {
        switch(i)
        {
            case 1: obj = objSolid break;
            case 2: obj = objIce break;
            case 3: obj = objSpike break;
            case 4: obj = objLadder break;
            case 5: obj = objTopSolid break;
            case 6: obj = objWater break;
            case 7: obj = objStandSolid break;
        }
        in_pos = instance_position(x+8,y+8,obj)
        if instance_exists(in_pos)
        {
            myobj = in_pos
        }
    }
    
    if myobj
    {
        myindex = myobj.object_index;
        if myindex == objLadder
        {
            myindex = objLadderLever_NaOH
        }
        
        with myobj {instance_destroy();}
    }
    
    // find tile underneath
    event_user(3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// propagate tag

if tag == "" {exit;}
if propagated {exit;}

propagated = true;
    
for (x_offset = -1; x_offset &lt;= 1; x_offset += 1) {
for (y_offset = -1; y_offset &lt;= 1; y_offset += 1)
{
    // skip diagonals and center:
    if abs(x_offset)+abs(y_offset) != 1
    {
        continue;
    }
    
    ix = x + 8 + 16*x_offset;
    iy = y + 8 + 16*y_offset;
    
    o = instance_position(ix,iy,object_index)
    if instance_exists(o) &amp;&amp; o != id
    {
        // propagate tag if other's tag is blank
        if o.tag == ""
        {
            with o
            {
                tag = other.tag
                event_user(1);
            }
        }
        // propagate tile depth to fields with same tag
        if o.tag == tag
        {
            if o.tile_depth == TILE_DEPTH_UNSET
            {
                o.tile_depth = tile_depth;
            }
        }
    }
}
}

// find object underneath field
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// propagate tags
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bg_src &gt; -1
{
    draw_background_part_ext(bg_src,bg_l,bg_t,bg_w,bg_h,bg_x,bg_y,1,1,c_white,image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
