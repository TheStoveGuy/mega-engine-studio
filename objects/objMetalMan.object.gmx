<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMetalJump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprMetalMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprMetalIntro;
poseImgSpeed = 0.2;
contactDamage = 6; //3 blades

ground = false;
attackTimer = 0;
throwTimer = 0;
jumpTimer = 0;
jumpAmount = 0;
canInitShoot = true;
phase = 0; //0 = nothing; 1 = running; 2 = jumping; 3 = shooting;
getLastXspeed = xspeed;
getLastYspeed = yspeed;
GetX = 0;
flashTimer = 0;
bladeThrow = 5;

//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 2; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 1; //HornetChaser
wpndmg[5] = 1; //JewelSatellite
wpndmg[6] = 1; //GrabBuster
wpndmg[7] = 2; //TripleBlade
wpndmg[8] = 8; //WheelCutter - why not it looks like the metal blade and has a low chance of hitting ~Ren
wpndmg[9] = 1; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 1; //WireAdapter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false
{
    if isFight == true
    {
        x += xspeed;
        y += yspeed;
        
        checkGround();
        gravityCheckGround();
        generalCollision();
        flashTimer += 1;
        if flashTimer == (60*7)+1
            {
            if instance_exists(objMM2Conveyor)
                with objMM2Conveyor
                    dir = -dir;
            flashTimer = 0;
            playSFX(sfxGravityFlip);
            }
        
        switch phase
        {
            case 0: //Idle (running in place)
                attackTimer += 1;
                xspeed = 0;
                if GetX = 0
                    GetX = abs(x-(view_xview+view_wview/2));
                sprite_index = sprMetalRun;
                image_speed = 0.15;
                if global.keyShootPressed[target.player_id]
                or attackTimer &gt;= 60*3
                    {
                    randomize();
                    yspeed = -choose(3,5,7);
                    phase = 1;
                    ground = false;
                    attackTimer = 0;
                    }
                if instance_exists(target)
                    {
                    if (target.x &gt; view_xview+view_wview/2 &amp;&amp; x &gt; view_xview+view_wview/2)
                    or (target.x &lt; view_xview+view_wview/2 &amp;&amp; x &lt; view_xview+view_wview/2)
                        {
                            var dx, initYspeed;
                            if x &gt; view_xview+view_wview/2
                                dx = (view_xview+view_wview/2)-GetX - sprite_get_xcenter();
                            else
                                dx = (view_xview+view_wview/2)+GetX - sprite_get_xcenter();
                            initYspeed = -7;
                            
                            var time, yy, yyspeed; //time: How much time (in frames) it would take to land on Mega Man's location
                            yy = bbox_bottom;
                            yyspeed = initYspeed;
                            time = 0;
                            
                            while yy &lt; bbox_bottom || yyspeed &lt; 0
                            {
                                yyspeed += 0.25;
                                yy += yyspeed;
                                time += 1;
                            }
                            
                            xspeed = dx / time;
                            yspeed = initYspeed;
                            ground = false;
                            phase = 1;
                            attackTimer = 0;
                        }
                    }
            break;



            case 1: //Jumping/Shooting
                sprite_index = sprMetalJump;
                if (attackTimer == floor(attackTimer/20)*20 &amp;&amp; yspeed &gt;= 0 &amp;&amp; throwTimer == 0 &amp;&amp; xspeed == 0)
                or (attackTimer == 0 &amp;&amp; yspeed &gt; 0 &amp;&amp; xspeed != 0 &amp;&amp; throwTimer == 0)
                    {
                    if attackTimer == 0
                        attackTimer += 1;
                    getLastXspeed = xspeed;
                    getLastYspeed = yspeed;
                    throwTimer += 1;
                    }
                else
                if throwTimer &gt; 0
                    {
                    throwTimer += 1;
                    if xspeed == 0
                        yspeed = min(1,yspeed);
                    sprite_index = sprMetalJumpThrow;
                    image_index = 0+min(floor(throwTimer/bladeThrow),1)
                    if throwTimer == bladeThrow
                        {
                        playSFX(sfxMetalBlade);
                        instance_create(x+image_xscale*8,y,objMetalManBlade);
                        }
                    if throwTimer &gt;= bladeThrow*2
                        {
                        throwTimer = 0;
//                        xspeed = getLastXspeed;
//                        yspeed = getLastYspeed;
                        }
                    }
//                if throwTimer == 0
                if xspeed == 0
                    attackTimer += 1;
                if ground
                    {
                    phase = 0;
                    throwTimer = 0;
                    attackTimer = 0;
                    }
            break;
        }
        
        //Face the player
        if instance_exists(target)
        {
            if x &gt; target.x
                image_xscale = -1;
            else
                image_xscale = 1;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBusterShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.sprite_index == sprMetalBlade){
    healthpoints = 0;
    event_user(10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if flashTimer == floor(flashTimer/(60*7))*(60*7) 
and flashTimer &gt; 0{
    draw_set_color(c_white);
    draw_rectangle(view_xview-1,view_yview-1,view_xview+view_wview+1,view_yview+view_hview+1,false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
