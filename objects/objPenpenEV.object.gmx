<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPenpenEV</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 3;

//Enemy specific code
phase = 0;
timer = 0;
boostWait = 100;
workaround = false;

xSpd = 2;
xspeed = 0;
yspeed = 0;

animCount = 0;
imgSpd = 0.3;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false &amp;&amp; dead == false &amp;&amp; global.flashStopper == false
{
    checkGround();
    gravityCheckGround();
    generalCollision();
    
    switch (phase)
    {
        //start facing mega man
        case 0:
            calibrateDirection();
            phase = 1;
            
            break;
        
        //spin twice
        case 1:
            imgIndex += imgSpd / 2 + (abs(xspeed) / 4);
            if (imgIndex &gt;= 8)
            {
                imgIndex = imgIndex mod 8
                
                if (xspeed == 0 &amp;&amp; yspeed == 0)
                {
                    animCount += 1;
                }
            }
            
            if (instance_exists(target))
            {
                //V number of spins in place until readying for rocketing off below V
                if (animCount &gt;= 2 &amp;&amp; ((imgIndex == 2 &amp;&amp; target.x &lt; x &amp;&amp; image_xscale == -1)
                    || (imgIndex == 6 &amp;&amp; target.x &gt;= x &amp;&amp; image_xscale == -1)
                    || (imgIndex == 6 &amp;&amp; target.x &lt; x &amp;&amp; image_xscale == 1)
                    || (imgIndex == 2 &amp;&amp; target.x &gt;= x &amp;&amp; image_xscale == 1) || workaround))
                {
                    phase = 2;
                    xspeed = 0;
                    animCount = 0;
                    imgIndex = 2;
                    calibrateDirection();
                    workaround = false;
                }
            }
            
            if (xspeed &gt; 0)
            {
                xspeed -= 0.01;
            }
            
            if (xspeed &lt; 0)
            {
                xspeed += 0.01;
            }
            
            if (xspeed != 0 &amp;&amp; xspeed &lt; 0.04 &amp;&amp; xspeed &gt; -0.04)
            {
                xspeed = 0;
            }
            
            break;
        
        //small wait before turning on the side
        case 2:
            timer += 1;
            if (timer &gt;= 20) //&lt;-- time in grace period before turning on his side here
            {
                phase = 3;
                timer = 0;
                imgIndex = 8;
            }
            
            break;
        
        //go on the side and wait a bit
        case 3:
            if (imgIndex &lt; 9){
                imgIndex += imgSpd;
            }
            else
            {
                imgIndex = 9;
                
                if (timer == 0)
                {
                    playSFX(sfxClamp);
                }
                
                timer += 1;
                if (timer &gt;= 30)
                {
                    phase = 4;
                    timer = 0;
                    imgIndex = 10;
                }
            }
            
            break;
        
        //extend booster
        case 4:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 14)
            {
                phase = 5;
                xspeed = 3 * image_xscale;
                imgIndex = 14;
                playSFX(sfxEnemyBoost);
            }
            
            break;
        
        //boost
        case 5:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 17)
            {
                imgIndex = 14 + imgIndex mod 17;
            }
            
            if (xspeed == 0)
            {
                timer = boostWait;
            }
            
            if (timer &lt; boostWait)
            {
                timer += 1;
            }
            else
            {
                if (ground)
                {
                    phase = 6;
                    timer = 0;
                    xspeed = 0;
                    imgIndex = 13;
                }
            }
            
            break;
        
        //retract booster and get back up
        case 6:
            imgIndex -= imgSpd;
            if (imgIndex &lt; 8)
            {
                phase = 1;
                imgIndex = 2;
            }
            
            break;
    }
    
    x += xspeed;
    y += yspeed;
}
else if dead
{
    phase = 0;
    timer = 0;
    animCount = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prtPlayerProjectile">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get knocked by shots</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//wpndmg[other.wpnID]
if (phase == 1)
{
   animCount = 0;
    
    if (other.x &lt; x)
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
    
    xspeed += wpndmg[other.wpnID] / 2 * -image_xscale;
    
    workaround = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
