<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTileAnimator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.frozen = true;
global.switchingSections = true;

Plat = noone;

with objMegaman
{
    viewplayer = 1;
    visible = false;
}

dir = 'x';
num = 1;

mydoor = 0;
door = false;
darken = 0;
alpha = 0;
darksp = 1/16;

triggerPlayer = instance_nearest(x,y,objMegaman);

if instance_exists(triggerPlayer)
{
    with triggerPlayer
    {
        visible = true;
        other.mydoor = instance_place(x,y,objBossDoor);
        if place_meeting(x,y,objFadetransition) {other.darken = true;}
    }
    
    doorWait = 4;
    alarm[0] = 1;
}
else {instance_destroy();}

//Get platform
var i,obj;
for (i=0; i&lt;=1; i+=1;)
{
    if i = 0 {obj = prtMovingPlatformJumpthrough;}
    if i = 1 {obj = prtMovingPlatformSolid;}
    with obj
    {
        if doesShift &amp;&amp; ((xspeed != 0 &amp;&amp; doesShiftX) or (yspeed != 0 &amp;&amp; doesShiftY))
        {
            if other.Plat = noone
            {
                if place_meeting(x,y-2*global.GravityDir,other.triggerPlayer) &amp;&amp; !place_meeting(x,y,other.triggerPlayer)
                {
                    other.Plat = id;
                }
            }
        }
    }
}

//Rest objects
event_user(0);

instance_deactivate_all(true);
activateImportantObjects();

if Plat != noone 
{
    instance_activate_object(Plat);
    Platx = Plat.x-x
    Platy = Plat.y-y
}

view_xview = round(view_xview);
view_yview = round(view_yview);

//Variables that can me modified to make switching sections faster/slower
screenSpeedHor = 4; //horizontal scroll speed
playerSpeedHor = 0.4; //horizontal player speed
playerSpeedHorDoor = 0.7; //horizontal player speed - door

screenSpeedVer = 4; //vertical scroll speed
playerSpeedVer = 0.6; //vertical player speed
playerSpeedVerDoor = 0.9; //vertical player speed - door

ScreenFixSpeed = 4;

//Variables that cannot be modified
canProgressDoor = false;
canStep = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.switchingSections = false;

event_user(0);

global.frozen = false;

if instance_exists(triggerPlayer)
{
    with objMegaman
    {
        visible = true;
    }
    
    with triggerPlayer
    {
        playerDeactivateObjects();
    }
    
    with objMegaman
    {
        //bring all players to same position and state
        x = other.triggerPlayer.x
        y = other.triggerPlayer.y
        yspeed = other.triggerPlayer.yspeed
        xspeed = other.triggerPlayer.xspeed
        image_xscale = other.triggerPlayer.image_xscale
        climbing = other.triggerPlayer.climbing
        canGravity = other.triggerPlayer.canGravity
        isSlide = other.triggerPlayer.isSlide
        mask_index = other.triggerPlayer.mask_index;
        ladderXScale = -1;
        if id != other.triggerPlayer
        {
            slideTimer = slideFrames-5;
        }
        canStep = true;
        canMove = !climbing
        bullets = 0;
        mask_index = other.triggerPlayer.mask_index;
        premask = other.triggerPlayer.premask;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canProgressDoor = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if door
{
    alarm[1] = ceil(doorWait / 0.125);
}
    
canStep = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving the screen and player

if instance_exists(objMegaman)
{
    with objMegaman
    {
        depth = -1500;
    }
}

if !instance_exists(triggerPlayer)
{
    instance_destroy();
    exit;
}

if canStep //When the door is closing, we should not move
{
    if !(door &amp;&amp; !canProgressDoor)
    {
        //Right / Left
        if dir = 'x'
        {
            endit = 0;
            repeat(ScreenFixSpeed) 
            {
                if global.sectionTop &gt; view_yview {
                    view_yview += 1; endit = 1;
                }
                else if global.sectionBottom &lt; (view_yview+view_hview) {
                    view_yview -= 1; endit = 1;
                }
                else {break;}
            }
            if endit {exit;}
            if (view_xview &gt;= global.sectionLeft &amp;&amp; num = 1) or (view_xview &lt;= global.sectionRight-view_wview &amp;&amp; num = -1)
            {
                if num = 1 {view_xview = global.sectionLeft;}
                if num =-1 {view_xview = global.sectionRight-view_wview;}
                endit = 0;
                repeat(ScreenFixSpeed)
                {
                    if (global.sectionTop &lt; view_yview) &amp;&amp; (round(triggerPlayer.y) &lt; view_yview+view_hview*0.5) {
                        view_yview -= 1; endit = 1;
                    }
                    else if (global.sectionBottom &gt; view_yview+view_hview) &amp;&amp; (round(triggerPlayer.y) &gt; view_yview+view_hview*0.5) {
                        view_yview += 1; endit = 1;
                    }
                    else {break;}
                }
                if endit {exit;}
                if darken
                {
                    if alpha &gt; 0 {alpha -= darksp; exit;}
                }
                if !mydoor
                {
                    instance_destroy();
                }
                else {
                    mydoor.opening = false;
                    mydoor.closing = true;
                    canStep = 0;
                }
            }
            else
            {
                if darken
                {
                    if alpha &lt; 1 {alpha += darksp; exit;}
                }
                view_xview += screenSpeedHor*num;
                if mydoor {
                    sp = playerSpeedHorDoor;
                }
                else {sp = playerSpeedHor;}
                triggerPlayer.x += sp*num;
                if instance_exists(Plat)
                {
                    Plat.x = triggerPlayer.x+Platx;
                }
                with triggerPlayer {playerHandleSprites('Normal');} //This activates the animation
            }
        }
        
        //Down / Up
        else if dir = 'y'
        {
            endit = 0;
            repeat(ScreenFixSpeed)
            {
                if global.sectionLeft &gt; view_xview {
                    view_xview += 1; endit = 1;
                }
                else if global.sectionRight &lt; (view_xview+view_wview) {
                    view_xview -= 1; endit = 1;
                }
                else {break;}
            }
            if endit {exit;}
            if (view_yview &gt;= global.sectionTop &amp;&amp; num = 1) or (view_yview &lt;= global.sectionBottom-view_hview &amp;&amp; num = -1)
            {
                if num = 1 {view_yview = global.sectionTop;}
                if num =-1 {view_yview = global.sectionBottom-view_hview;}
                endit = 0;
                repeat(ScreenFixSpeed)
                {
                    if (global.sectionLeft &lt; view_xview) &amp;&amp; (round(triggerPlayer.x) &lt; view_xview+view_wview*0.5) {
                        view_xview -= 1; endit = 1;
                    }
                    else if (global.sectionRight &gt; view_xview+view_wview) &amp;&amp; (round(triggerPlayer.x) &gt; view_xview+view_wview*0.5) {
                        view_xview += 1; endit = 1;
                    }
                    else {break;}
                }
                if endit {exit;}
                if darken
                {
                    if alpha &gt; 0 {alpha -= darksp; exit;}
                }
                if !mydoor
                {
                    instance_destroy();
                }
                else
                {
                    mydoor.opening = false;
                    mydoor.closing = true;
                    canStep = 0;
                }
            }
            else
            {
                if darken
                {
                    if alpha &lt; 1 {alpha += darksp; exit;}
                }
                view_yview += screenSpeedVer*num;
                if mydoor {
                    sp = playerSpeedVerDoor;
                }
                else {sp = playerSpeedVer;}
                triggerPlayer.y += sp*num;
                if instance_exists(Plat)
                {
                    //Doable the speed to make the bubble move up too so it doesn't go off screen
                    triggerPlayer.y += (sp*num)/2;
                    Plat.y = triggerPlayer.y+Platy;
                }
                with triggerPlayer {playerHandleSprites('Normal');} //This activates the animation
            }
        }
    }
}

//Quick weapon switching
with triggerPlayer {playerSwitchWeapons();}

x = triggerPlayer.x;
y = triggerPlayer.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sw;
sw = global.switchingSections;

//Reset objects
for (i=0; i&lt;2; i+=1;)
{
    with (i=0)*prtEnemy+(i=1)*prtGimmick
    {
        if (!shiftvisible or !sw) &amp;&amp; id != other.Plat
        {
            if !respawn {instance_destroy();}
            dead = 1;
            event_perform(ev_step,ev_step_normal);
            beenOutsideView = 1;
            dead = 0; visible = 1;
        }
    }
}

with prtEnemyProjectile
{
    instance_destroy();
}

with prtPickup 
{
    if (alarm[0] &gt; 0 or alarm[1] &gt; 0)
    {
        instance_destroy();
    }
}

with prtPlayerProjectile 
{
    if object_index = objSakugarne
    {
        if !Active {instance_destroy();}
    }
    else
    {
        instance_destroy();
    }
}

with prtEffect
{
    if !neverDespawn
    {
        instance_destroy();
    }
}

if instance_exists(objMegaman)
{
    with objMegaman
    {
        depth = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alpha &gt; 0
{
    draw_sprite_ext(sprDot,0,view_xview,view_yview,view_wview,view_hview,0,c_black,alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
