<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprQuintStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprQuintIntro;
sprite_index = pose;
poseImgSpeed = 8/60;
contactDamage = 4;

ground = false;
attackTimer = 0;
jumpTimer = 0;
jumpAmount = 0;
canInitShoot = true;
phase = 0;

// Sprites 0 = no cutter, 1 = cutter
cutter = 1;
spriteStand[0] = sprCutStandShame;
spriteRun[0] = sprCutRunShame;
spriteJump[0] = sprCutJumpShame;
spriteStand[1] = sprCutStand;
spriteRun[1] = sprCutRun;
spriteJump[1] = sprCutJump;

//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 2; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 1; //HornetChaser
wpndmg[5] = 1; //JewelSatellite
wpndmg[6] = 1; //GrabBuster
wpndmg[7] = 2; //TripleBlade
wpndmg[8] = 2; //WheelCutter
wpndmg[9] = 1; //SlashClaw
wpndmg[10] = 4; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 1; //WireAdapter

TeleportSakugarne = false;

teleporting = true;
teleportTimer = 0;
teleportY = 0;
teleportIndex = 0;

teleportX = x;
while teleportX &gt; x-48 &amp;&amp; !place_meeting(teleportX,y,objSolid)
{
    teleportX -= 4;
}

bouncePhase = 2;
getLastY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead &amp;&amp; instance_exists(prtEnemyProjectile)
{
    with prtEnemyProjectile
    {
        instance_create(x,y,objExplosion);
        instance_destroy();
    }
}

event_inherited();

if !global.frozen &amp;&amp; !global.flashStopper
{
    if isFight &amp;&amp; !teleporting
    {       
        checkGround();
        gravityCheckGround();
        generalCollision();
        
        switch phase
        {
            case 0:
                sprite_index = sprQuintJump;
                if ground
                {
                    if round(x) != round(teleportX)
                    {
                        yspeed = -6;
                        xspeed = arcCalcXspeed(yspeed, 0.25, x, y, teleportX, y);
                    }
                    else
                    {
                        xspeed = 0;
                        phase = 1;
                    }
                }
                break;
            case 1: //Idle (standing still)
            case 3: //Idle (standing still) Big rock
                sprite_index = sprQuintSakugarne;
                
                if image_index &lt; 2-0.1
                {
                    image_index += 0.1;
                }
                else
                {
                    image_index = 0;
                    if attackTimer &gt;= 0
                    {
                        if phase == 1
                        {
                            for(i=-2;i&lt;=2;i+=1)
                            if i != 0
                            {
                                Rock = instance_create(x,y+8,objSakugarneRock);
                                Rock.yspeed = -abs(i)*2;
                                Rock.xspeed = i;
                            }
                        }
                        else
                        {
                            for(i=-1;i&lt;=1;i+=1)
                            if i != 0
                            {
                                Rock = instance_create(x,y+4,objSakugarneBigRock);
                                Rock.yspeed = -abs(i)*6;
                                Rock.xspeed = i*3;
                                attackTimer = 15;
                            }
                        }
                    }
                }
                
                attackTimer -= 1;
                if (attackTimer &lt;= 0 &amp;&amp; bouncePhase == 2)
                or (attackTimer &lt;= -60 &amp;&amp; bouncePhase == 4)
                {
                    phase = bouncePhase;
                }
                
                calibrateDirection();
                break;
            case 2: //Jumping
            case 4: //Sakugarne Toss
                image_index = 1;
                if instance_exists(objSakugarneToss)
                {
                    sprite_index = sprQuintJump;
                    objSakugarneToss.x = x+xspeed;
                    objSakugarneToss.image_xscale = image_xscale;
                    phase = 2;
                }
                else
                {
                    sprite_index = sprQuintSakugarne;
                }
                
                if attackTimer &lt;= 0
                {
                    attackTimer = 35;
                    
                    if instance_exists(target)
                    {
                        startXScale = image_xscale;
                        yspeed = -6.5;
                        if phase == 4
                            startXspeed = arcCalcXspeed(yspeed, 0.25, x, y, sprite_get_xcenter_object(target), y)*1.5;
                        else
                            startXspeed = arcCalcXspeed(yspeed, 0.25, x, y, sprite_get_xcenter_object(target), y);
                        ground = false;
                    }
                    else
                    {
                        startXScale = image_xscale;
                        startXspeed = 0;
                    }
                }
                if phase == 4
                {
                    if collision_line(x,y,x+image_xscale*128,y+256,target,1,1)
                    and !instance_exists(objSakugarneToss)
                    {
                        instance_create(x,y,objSakugarneToss);
                    }
                }
                if !place_meeting(x+startXspeed, y, objSolid) &amp;&amp; !place_meeting(x+startXspeed, y, prtMovingPlatformSolid)
                {
                    xspeed = startXspeed;
                }
                else
                {
                    while place_meeting(x, y, objSolid)
                    {
                        x -= image_xscale;
                    }
                    xspeed = 0;
                }
                
                //When grounded, end the jump
                if ground
                {
                    phase = choose(1,3);
                    bouncePhase = choose(2,4);
                    xspeed = 0;
                    yspeed = 0;
                }
                break;
        }
        
        x += xspeed;
        y += yspeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if teleporting &amp;&amp; isFight
{
    if round(view_yview[0]-32+teleportY) &gt;= y
    {
        if teleportTimer == 0
        {
            playSFX(sfxTeleportIn);
        }
        
        //Done teleporting; play a little animation before giving Mega Man control
        draw_sprite_ext(sprRushTeleport, teleportIndex, round(teleportX), round(view_yview[0]+teleportY-24), image_xscale, image_yscale, image_angle, c_white, 1);
            
        if teleportTimer == 2
        {
            teleportIndex = 1;
        }
        else if teleportTimer == 4
        {
            teleportIndex = 0;
        }
        else if teleportTimer == 6
        {
            teleportIndex = 2;
        }
        else if (teleportTimer = 9 &amp;&amp; !collision_rectangle(x-5, bbox_top, x+5, bbox_bottom, objSolid, false, false))
        || (teleportTimer == 15 &amp;&amp; collision_rectangle(x-5, bbox_top, x+5, bbox_bottom, objSolid, false, false))
        {
            teleporting = false;
            teleportTimer = 0;
            teleportY = 0;
            if !collision_rectangle(x-5, bbox_top, x+5, bbox_bottom, objSolid, false, false)
            {
                canCoil = true;
            }
            exit;
        }
        
        if !global.frozen
        {
            teleportTimer += 1;
        }
    }
    else
    {
        //Teleporting downwards
        draw_sprite_ext(sprRushTeleport, teleportIndex, round(teleportX), round(view_yview[0]+teleportY-24), image_xscale, image_yscale, image_angle, c_white, 1);
        
        if !global.frozen
        {
            teleportY += 7;
        }
    }
}

if phase == 0 &amp;&amp; isFight &amp;&amp; !teleporting
{
    draw_sprite_ext(sprSakugarne, 1, round(teleportX), round(ystart), image_xscale, image_yscale, image_angle, c_white, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
