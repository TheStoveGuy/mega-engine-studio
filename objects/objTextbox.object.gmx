<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTextbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0;

neverDespawn = 0;

sizex = 1;
sizey = 1;
phase = 0;
dir = 1;

showtext = 0;
textlength = 0;
canincrease = 0;
skipbuffer = 0;

alarm[0] = 2;

name = '...'
itext = "Sorry Nothing"

boxy = 32;
origin = 0;
o_event = 0;

specialShop = false;

text = ds_list_create();

;

//MegaMan specific
with objMegaman
{
    canMove = 0;
    other.repcanPause = canPause;
    canPause = 0;
    
    xspeed = 0;
    yspeed = 0;
}

offset = 0; // This is a constantly growing variable you can reference in text events, e.g. a constantly waving text.

col[0] = c_white; //white
col[1] = global.nesPalette[18]; //red
col[2] = global.nesPalette[34]; //yellow
col[3] = global.nesPalette[36]; //green
col[4] = global.nesPalette[27]; //blue

didButtCheat = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with origin {
    event_user(other.o_event);
}

if instance_exists(objMegaman)
{
    if repcanPause {
        with objMegaman {
            canPause = 1;
        }
    }
}

ds_list_destroy(text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>skipbuffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canincrease = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 1;
sizex += dir;
if sizex = 4 or sizex = 8 or sizex = 12 {
    sizey += dir;
}

if sizex = 16 {
    alarm[0] = 0;
    showtext = 1;
    alarm[1] = 14;
    itext = ds_list_find_value(text,0);
}
if sizex = 0 {
    alarm[0] = 0;
    visible = 0; 
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if !global.frozen {
    if showtext
    {
        playerLockMovement();
        if textlength = string_length(itext)
        {
            if skipbuffer = 0
            {
                if (global.keyJumpPressed[0] or global.keyPausePressed[0]) &amp;&amp; !specialShop
                {
                    ds_list_delete(text,0);
                    if !ds_list_empty(text)
                    {
                        itext = ds_list_find_value(text,0);
                        alarm[1] = 4;
                        playSFX(sfxTextBox);
                    }
                    else
                    {
                        alarm[0] = 2;
                        dir = -1;
                        showtext = 0;
                    }
                    textlength = 0;
                    canincrease = 0;
                    skipbuffer = 0;
                }
            }
        }
        else if canincrease
        {
            textlength += 0.5;
            if global.keyJump[0] or global.keyPause[0]
            {
                textlength += 1.5;
            }
            
            if textlength &gt;= string_length(itext)
            {
                textlength = string_length(itext)
                alarm[2] = 12; skipbuffer = 1;
            }
        }
        
        if (alarm[1] &lt; 4 &amp;&amp; global.keyPausePressed[0])
        {
            textlength = string_length(itext);
            alarm[2] = 0;
            skipbuffer = 0;
        }
    }
    
    offset += 1;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Upper Left
draw_sprite(sprite_index,0,view_xview[0]+128-8*sizex,view_yview[0]+boxy-8*sizey);
//Upper Right
draw_sprite(sprite_index,2,view_xview[0]+128+8*sizex-8,view_yview[0]+boxy-8*sizey);
//Lower Left
draw_sprite(sprite_index,5,view_xview[0]+128-8*sizex,view_yview[0]+boxy+8*sizey-8);
//Lower Right
draw_sprite(sprite_index,7,view_xview[0]+128+8*sizex-8,view_yview[0]+boxy+8*sizey-8);

//Top
draw_sprite_ext(sprite_index,1,view_xview[0]+128-8*sizex+8,view_yview[0]+boxy-8*sizey,sizex*2-2,1,image_angle,image_blend,image_alpha);
//Left
draw_sprite_ext(sprite_index,3,view_xview[0]+128-8*sizex,view_yview[0]+boxy-8*sizey+8,1,sizey*2-2,image_angle,image_blend,image_alpha);
//Right
draw_sprite_ext(sprite_index,4,view_xview[0]+128+8*sizex-8,view_yview[0]+boxy-8*sizey+8,1,sizey*2-2,image_angle,image_blend,image_alpha);
//Bottom
draw_sprite_ext(sprite_index,6,view_xview[0]+128-8*sizex+8,view_yview[0]+boxy+8*sizey-8,sizex*2-2,1,image_angle,image_blend,image_alpha);

//Middel
draw_sprite_ext(sprite_index,8,view_xview[0]+128-8*sizex+8,view_yview[0]+boxy-8*sizey+8,sizex*2-2,sizey*2-2,image_angle,image_blend,image_alpha);

//Text
if showtext
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    draw_set_color(c_white);
    
    line = 0;
    extraline = 1;
    if string_length(name)
    {
        draw_text(view_xview+16,view_yview+boxy-24,name+':');
        extraline = 0;
    }
    
    //These variables checks if the current line reaches over the boundry.
    length = 28;
    count = 0;
    counttotal = 0;
    
    effect = 0; // /0 = normal text, /1 = shakey /2 = wavey
    colour = c_white // /C0 = white, /C1 = red, /C2 = green, /C3 = green
    
    for(i=1; i&lt;=textlength; i+=1;) //we're going to draw the text individually, that way we can apply all sorts of effects to it.
    {
        sk = 0;
        drawChar = string_char_at(itext,i);
        
        if drawChar == "/" //Get effects
        {
            if string_char_at(itext,i+1) == "C" //Color
            {
                colour = col[real(string_char_at(itext,i+2))];
                sk = 3;
            }
            else if string_digits(string_char_at(itext,i+1)) != "" //Movement
            {
                effect = real(string_char_at(itext,i+1));
                sk = 2;
            }
        }
        if drawChar == "#" //Line break
        {
            line += 1;
            count = counttotal;
            sk = 1;
        }
        
        if sk //How much to skip
        {
            i += sk-1;
            continue;
        }
        
        //New line handling
        iadd = i;
        e = 1;
        while e &amp;&amp; iadd &lt;= string_length(itext) //Check for something that seperates words
        {
            check = string_char_at(itext,iadd);
            if check = " " or check = "/" or check = "#"
            {
                e = 0;
            }
            iadd += 1;
        }
        
        if (counttotal-count)+(iadd-i) &gt; length+2
        {
            line += 1;
            count = counttotal;
        }
        
        //Process effect
        switch(effect)
        {
            case 1: //Shakey
                xd = choose(1,0,-1); yd = choose(1,0,-1);
                break;
            case 2: //Wavey
                xd = 0; yd = cos((offset+i*8)/8);
                break;
            default: //also 0 - Normal
                xd = 0; yd = 0;
                break;
        }
        
        //Finally draw a single letter *clap*
        draw_text_colour(view_xview+16+(((counttotal-count)*8))+xd,view_yview+boxy-16+((line-extraline)*8)+yd,drawChar,colour,colour,colour,colour,1);
        
        counttotal += 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
