<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPooker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>prtGimmick</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 3;

phase = 0;
timer = 0;

Direction = 1;
getY = y;
yOffset = 0;
MovingPlat = noone;
lock = false;

weapondamage();
canflash = 0;
boss = 0;

doesShift = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead
{
    calibrateDirection();
    switch phase
    {
        case 0:
            if place_meeting(x,y+8,target)
            {
                with target
                {
                    playerGetHit(other.contactDamage);
                }
            }
            if !global.flashStopper
            {
                timer += 1;
                if timer == 120
                {
                    instance_create(x,y-8,objPookerProjectile);
                    playSFX(sfxEnemyDrop);
                    image_index = 1;
                }
                if timer &gt;= 150
                {
                    timer = 0;
                    image_index = 0;
                }
            }
            break;
        case 1:
            timer = 0;
            if image_index &lt; 3
            {
                image_index += 1/5;
            }
            if image_index &lt; 2
            {
                image_index = 2;
            }
            
            x += xspeed;
            y += yspeed;
            yspeed += 0.15;
            
            if place_meeting(x,y,objOil) or place_meeting(x,y,objWater) and !place_meeting(x,y,objSolid)
            {
                phase = 2;
                xspeed = 0;
                yspeed = 0;
                break;
            }
            if !place_meeting(x,y,objSolid)
            while place_meeting(x+xspeed,y,objSolid)
                xspeed -= sign(xspeed);
            if place_meeting(x,y+yspeed,objSolid) and yspeed &lt; 0
            {
                yspeed = 0;
            }
            if place_meeting(x,y,objSolid)
            {
                instance_create(x,y,objBigExplosion);
                audio_stop_sound(sfxMM3Explode);
                playSFX(sfxExplosion);
                dead = true;
                visible = false;
                phase = 0;
                image_index = 0;
                if instance_exists(MovingPlat)
                    with MovingPlat
                        instance_destroy();
            }
            if instance_exists(MovingPlat)
            {
                MovingPlat.x = x;
                MovingPlat.y = y;
                MovingPlat.xspeed = xspeed;
                MovingPlat.yspeed = yspeed;
            }
            break;
        case 2:
            if instance_place(x,y+4,objOil)
            {
                ID = instance_place(x,y+4,objOil)
            }
            else if instance_place(x,y+4,objWater)
            {
                ID = instance_place(x,y+4,objWater)
            }
            else
            {
                phase = 1;
                break;
            }
            getY = ID.y-8;
            if image_index &lt; 7.4
            {
                image_index += 1/5;
                yOffset = (7-round(image_index))*2;
                xspeed = 0;
            }
            else
            {
                if !instance_exists(MovingPlat)
                {
                    MovingPlat = instance_create(x,y,prtMovingPlatformJumpthrough);
                    MovingPlat.sprite_index = sprite_index;
                    MovingPlat.respawn = false;
                    MovingPlat.visible = false;
                }
                
                if floor(image_index) = 7
                {
                    timer += 1;
                    if timer = floor(timer/30)*30
                    {
                        if yOffset == 1
                        {
                            yOffset = 0;
                        }
                        else
                        {
                            yOffset = 1;
                        }
                    }
                }
                
                if place_meeting(x,y-1,target) &amp;&amp; !lock
                {
                    if target.ground
                    {
                        image_index = 8;
                        timer = 32;
                        lock = true;
                        yOffset = 2;
                    }
                }
                else if !place_meeting(x,y-1,target)
                {
                    lock = false;
                }
                if instance_exists(target) &amp;&amp; !lock
                {
                    Direction = target.image_xscale;
                }
                if floor(image_index) == 8
                {
                    if !place_meeting(x+xspeed,y,objSolid)
                    {
                        xspeed = Direction;
                    }
                    else
                    {
                        xspeed = 0;
                    }
                    
                    if timer = 30
                    {
                        yOffset = 3;
                    }
                    if timer = 25
                    {
                        yOffset = 2;
                    }
                    if timer &gt; 0
                    {
                        timer -= 1;
                    }
                    else
                    {
                        image_index = 7.4;
                        xspeed =  0;
                        yOffset = 0;
                    }
                }
            }
            
            yspeed = ((getY+yOffset)-y);
            if instance_exists(MovingPlat)
            {
                MovingPlat.x = x;
                MovingPlat.y = y;
                MovingPlat.xspeed = xspeed;
                MovingPlat.yspeed = yspeed;
            }
            
            x += xspeed;
            y += yspeed;
            break;
    }

}
else if dead
{
    if instance_exists(target)
    {
        if target.x &lt; x
        {
            Direction = -1;
        }
        else {Direction = 1;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prtPlayerProjectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other {
    event_perform(ev_collision,prtEnemy);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if phase == 0
{
    if other.object_index == objBusterShotCharged || other.object_index == objSuperMegaManSwirlShot
    {
        phase = 1;
        yspeed = -3;
        xspeed = sign(other.xspeed);
        Direction = sign(other.xspeed)
        image_xscale = Direction;
    }
    
    if other.penetrate = 2
    {
        other.guardcancel = 2;
    }
    else
    {
        other.guardcancel = 1;
    }
}
else
{
    other.guardcancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
