<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBombomb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//popDelay - how long it is until the bombomb is ready to pop out.
//col - color. 0 = blue; 1 = red

event_inherited();

respawn = true;
explodeWhenDead = true;

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

//Enemy specific code
contactStart = contactDamage;
popped = false;

col = 0; //0 = blue, 1 = red
init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    switch col
    {
        case 0: sprite_index = sprBombomb; break;
        case 1: sprite_index = sprBombombRed; break;
        default: sprite_index = sprBombomb; break;
    }
}

event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
   if collision_rectangle(x-96,y-224,x+96,y+224,target,false,true) &amp;&amp; !popped
   {
        popped = true;
        visible = true;
        yspeed = -7.5;
        i = collision_rectangle(bbox_left+1,y,bbox_right-1,y-view_hview,objBombombStopper,false,false);
        if i
        {
            with i
            {
                ix = -(other.y-y);
                if ix = 0 {ix = -1;}
                iy = 0;
                repeat(1000) {
                    iy += gravAccel*sign(ix);
                    if abs(ix) &lt;= abs(iy*((iy-0.25)*2)) {break;}
                }
                other.yspeed = iy;
            }
        }
    }
    
    if popped
    {
        gravityNoGround();
    }
    generalCollision();
    
    x += xspeed;
    y += yspeed;
    
    if popped &amp;&amp; yspeed &gt; 0 &amp;&amp; healthpoints &gt; 0
    {
        dead = 1;
        visible = 0;
        instance_create(x+8,y+8,objHarmfulExplosion)
        playSFX(sfxClassicExplosion);
        i = instance_create(bbox_get_xcenter(),bbox_get_ycenter(),objShrapnel);
        i.xspeed = 1.5;
        i.yspeed = -3.8;
        if col == 1 { i.sprite_index = sprBombombShrapnelRed }
        i = instance_create(bbox_get_xcenter(),bbox_get_ycenter(),objShrapnel);
        i.xspeed = 2.5;
        i.yspeed = -3.5;
        if col == 1 { i.sprite_index = sprBombombShrapnelRed }
        i = instance_create(bbox_get_xcenter(),bbox_get_ycenter(),objShrapnel);
        i.xspeed = -1.5;
        i.yspeed = -3.8;
        if col == 1 { i.sprite_index = sprBombombShrapnelRed }
        i = instance_create(bbox_get_xcenter(),bbox_get_ycenter(),objShrapnel);
        i.xspeed = -2.5;
        i.yspeed = -3.5;
        if col == 1 { i.sprite_index = sprBombombShrapnelRed }
    }
}
else if dead
{
    popped = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardcancel = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !popped {exit;}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
