<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVoltIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtGimmick</parentName>
  <maskName>maskNPC</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//creation code (technically all optional)
//name = "string here" (sets the name in their dialogue box)
//text = "string here" (sets the text in their dialogue box)

//face_player = true / false (default) (constantly turns to face the player as the player moves around)
//face_player_distance (default: 16) (even if face_player is true, will not turn to face if player is closer than this)
//face_player_on_talk = true (default) / false (if true, turns towards the player when talked to, and returns to previous direction when done [unless face_player is true])
//standard_physics = true (default) / false (sets whether the npc has physics or not)

//idle_sprite = [sprite] (sets the sprite they use for their idle animation) (becomes the default of all of the other animations if the rest aren't set)
//idle_start = # (the starting frame of their idle animation)
//idle_end = # (the ending frame of their idle animation)
//idle_speed = # (the speed of the idle animation)

//talk_sprite = [sprite] (sets the sprite of their talking animation) (default is the same as the idle animation)
//talk_start = # (the starting frame of their talking animation)
//talk_end = # (the ending frame of their talking animation)
//talk_speed = # (the speed of the talk animation)

//mask = [sprite] (default: knight man) (sets the mask used for collision)
//talk_distance = 12: distance ahead that mega man checks when pressing up to talk

//script_on_talk_start
//script_on_talk_end

event_inherited();

active = false;

name = 'Volt Man';
text = 'I have nothing to say.';

// idle animation:

idle_sprite = sprite_index;
idle_start = 0;
idle_end = sprite_get_number(idle_sprite) - idle_start;
idle_speed = 0.1;

// idle talking:
talk_sprite = sprVoltThrowShield;
talk_start = 0;
talk_end = sprite_get_number(talk_sprite) - talk_start
talk_speed = idle_speed;

// collision
mask = maskNPC;
mask_index = mask;
standard_physics = true;
talk_distance = 12;

// details:
face_player = false;
face_player_distance = 8;
face_player_on_talk = true;
    
script_on_talk_start = 0;
script_on_talk_end = 0;

// private:

_prev_direction = 1;

xspeed = 0;
yspeed = 0;
inWater = false
_im = 0
ground = false;

setTargetCreate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

setTargetStep();

//don't do this if statement if this is actually objNPC_motile and it's inheriting this code
if (!global.frozen &amp;&amp; !global.flashStopper &amp;&amp; !dead &amp;&amp; object_get_name(object_index) != "objNPC_motile")
{
    // physics:
    if (standard_physics)
    {
        checkGround();
        gravityCheckGround();
        generalCollision();
    }
    
    sprite_index = idle_sprite;
    animationLoop(idle_start, idle_end, idle_speed);
    
    if (face_player)
    {
        xtarg = x;
        if instance_exists(target)
            xtarg = target.x
        if abs(x-xtarg) &gt; face_player_distance
            calibrateDirection();
    }
    
    if (standard_physics)
    {
        x += xspeed;
        y += yspeed;
    }
}

if (!global.frozen)
{
    with target {
        talk_x = other.talk_distance*image_xscale
        // text bubble: 
        if (place_meeting(x + talk_x,y,other)) with other {
            talkable = false;
            //these are seperated so game maker never complains about ground not existing
            if (!standard_physics &amp;&amp; object_get_name(object_index) != "objNPC_motile")
            {
                talkable = true;
            }
            else if ((standard_physics || object_get_name(object_index) == "objNPC_motile") &amp;&amp; ground)
            {
                talkable = true;
            }
            
            var do_talk = talkable;
            do_talk &amp;= global.keyUpPressed[other.player_id]
            if do_talk
            {
                if (other.canMove &amp;&amp; other.ground)
                {
                
                    spawnTextBoxSingleString(name, text);    
                    
                    active = 1;
                    _prev_direction = image_xscale;
                    
                    if (face_player_on_talk)
                    {
                        calibrateDirection();
                    }
                    
                    event_user(1); // start dialogue
                    global.frozen = 1;
                }
            }
        }
    }
}

if active &amp;&amp; ((standard_physics &amp;&amp; ground) || !standard_physics)
{
    animationLoop(talk_start,talk_end,talk_speed)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start dialogue
sprite_index = talk_sprite
image_speed = talk_speed

if (script_on_talk_start != 0)
    script_execute(script_on_talk_start);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end dialogue
with (objMegaman)
{
    canMove = 1;
    canStep = true;
    global.frozen = 0;
}

active = false;
// return to previous orientation, whether it was the same or not -- unless face_player is true
if (!face_player)
{
    image_xscale = _prev_direction;
}

if (script_on_talk_end != 0)
    script_execute(script_on_talk_end);
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//creation code setup stuff
if (string_length(name) &gt; 27)
{
    name = string_copy(name, 0, 27);
}

//make custom idle sprites the default sprites for unset sprites
if (idle_sprite != sprVoltIdle)
{
    if (talk_sprite == sprVoltThrowShield)
    {
        talk_sprite = idle_sprite;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index == sprVoltIdle 
and text != "hey gamers" 
and text != "Congratulations to the winner! He may have won the level design contest, but I think it goes without saying that I'd win the Best Robot Master contest... right?" 
{
    exit;
}

drawSelf();

with (target)
{
    if (place_meeting(x + image_xscale*other.talk_distance,y,other)) &amp;&amp; ground &amp;&amp; canMove
    {
        with (other)
        {
            draw_sprite(sprPressUp,0,bbox_get_xcenter(),bbox_top-12);
            exit;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
