<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM8Sled</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//creation code (all optional)
//dir = 1 / -1 (1 = goes right (default); -1 = goes left)
//MaxSpeed = &lt;number&gt; (sets how fast the sled goes) (lowest speed allowed is 1.5)

image_speed = 0;
Active = 0;
dir = 1;
Speed = 0;
MaxSpeed = 4;
    
Dead = false;

viewX = noone; //the Game Maker camera can't be set to a position with a decimal value, so we need to use our own variable and
//then set view_xview to this variable rounded so that Mega Man doesn't gradually drift left/right while on the sled if his speed
//has a decimal value

yspeed = 0;
image_xscale = dir;

playerProjectiles = ds_list_create(); //to keep track of which projecitles have been speed increased

alarm[0] = 1;

rider = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(playerProjectiles);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// co-op: spawn additional

if !place_meeting(x,y,object_index)
{
    for (var i=1; i&lt;global.playerCount; i+=1;)
    {
        with instance_create(x+4*i*dir,y,object_index)
        {
            alarm[0] = 0;
            dir = other.dir;
            MaxSpeed = other.MaxSpeed;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !global.frozen &amp;&amp; (insideView() || Active)
{
    //activate stuff
    if !Active with objMegaman with other
    {
        //deactivate again since it's unused
        if (!insideSection(x,y))
        {
            instance_deactivate_object(id); exit;
        }
        
        //if on the middle of the sled
        if (!other.onSled)
        {
            if (place_meeting(x, y, other) &amp;&amp; round(other.x / 2) * 2 == round(x))
            {
                other.viewplayer = 0;
                rider = other.id;
                Active = true;
                image_speed = 1;
            }
            else
            {
                if (abs(x - (view_xview + view_wview * 0.5)) &lt; 3)
                {
                    with (other)
                    {
                        viewplayer = 0;
                    }
                }
            }
            
            viewX = view_xview;
        }
    }
    else if Active
    {
        //MaxSpeed minimum
        /*if (MaxSpeed &lt; 1.1)
        {
            MaxSpeed = 1.1;
        }*/
        
        //speed up new player projectiles
        if insideView() and !Dead
        {
            var i;
            for (i = 0; i &lt; instance_number(prtPlayerProjectile); i += 1)
            {
                proj = instance_find(prtPlayerProjectile, i);
            
                exception = false;
                if (proj.object_index == objJewelSatellite)
                {
                    if (proj.followPlayer)
                    {
                        exception = true; //because any speed would be immediately overwritten if still following the player
                    }
                }
            
                if (ds_list_find_index(playerProjectiles, proj) == -1 &amp;&amp; !exception)
                {
                    proj.xspeed += Speed;
                
                    added = false;
                    var j;
                    for (j = 0; j &lt; ds_list_size(playerProjectiles); j += 1)
                    {
                        if (!instance_exists(ds_list_find_value(playerProjectiles, j)))
                        {
                            ds_list_replace(playerProjectiles, j, proj);
                            added = true;
                        }
                    }
                
                    if (!added)
                    {
                        ds_list_add(playerProjectiles, proj);
                    }
                }
            }
        }
        
        //sled controls
        if instance_exists(rider)
        {
            if !Dead
            {
                y = rider.y + 16 * global.GravityDir; //automatically place itself under Mega Man (doesn't actually do physics, it just alter's Mega Man's movement)
                rider.x = x; 
                rider.onSled = true;
                rider.onSakugarne = false;
                
                with (objSakugarne)
                {
                    instance_destroy();
                }
                
                //movement
                if global.keyRight[rider.player_id]
                {
                    addspeed = 1;
                }
                else if global.keyLeft[rider.player_id]
                {
                    addspeed = -1;
                }
                else
                {
                    addspeed = 0;
                }
                
                with (rider)
                {
                    ys = yspeed;
                    xspeed = other.Speed+other.addspeed;
                    yspeed = 0;
                    playerCollision();
                    x += xspeed;
                    yspeed = ys;
                }
                
                x = rider.x;
            }
            else 
            {
                //fly off the screen after Mega Man gets off
                x += Speed;
                yspeed += 0.05;
                y += yspeed;
                visible = !visible;
            }
            
            if (!Dead)
            {
                //Kill Mega if he gets stuck
                if (x &lt;= view_xview + 8)
                {
                    x = view_xview + 8;
                    if (collision_rectangle(rider.bbox_left + Speed, rider.bbox_top, rider.bbox_right + Speed, rider.bbox_bottom, objSolid, 0, 0))
                    {
                        with rider
                            global.playerHealth[player_id] = 0;
                        Dead = false;
                    }
                }
                
                if (x &gt;= view_xview + view_wview - 8)
                {
                    x = view_xview + view_wview - 8;
                    if (collision_rectangle(rider.bbox_left + Speed, rider.bbox_top, rider.bbox_right + Speed, rider.bbox_bottom, objSolid, 0, 0))
                    {
                       with rider
                            global.playerHealth[player_id] = 0;
                        Dead = false;
                    }
                }
                
                //Stop the sled
                if (instance_exists(objMegaman8SledStopper))
                {
                    with (objMegaman8SledStopper )
                    {
                        if ((other.bbox_left &gt; bbox_left &amp;&amp; other.dir == 1) or (other.bbox_right &lt; bbox_right &amp;&amp; other.dir == -1))
                        {
                            with (other)
                            {
                                Dead = true
                                rider.onSled = false;
                                rider.viewplayer = 1;
                            }
                        }
                    }
                }
                
                //scroll screen
                if (dir == 1)
                {
                    if (!collision_line(view_xview + view_wview, view_yview + 8, view_xview + view_wview, view_yview + view_hview - 8, objSectionBorderHorizontal, 0, 0))
                    {
                        viewX += Speed;
                    }
                    else
                    {
                        if (rider.yspeed &gt;= 0)
                        {
                            rider.yspeed = -3;
                        }
                        
                        Dead = true
                        rider.onSled = false;
                    }
                }
                
                if (dir == -1)
                {
                    if (!collision_line(view_xview, view_yview + 8, view_xview, view_yview + view_hview - 8, objSectionBorderHorizontal, 0, 0) &amp;&amp; view_xview &gt; 0)
                    {
                        viewX += Speed;
                    }
                    else
                    {
                        if (rider.yspeed &lt;= 0)
                        {
                            rider.yspeed = 3;
                        }
                        
                        Dead = true
                        rider.onSled = false;
                    }
                }
                
                if (viewX != noone)
                {
                    view_xview = floor(viewX);
                }
            }
        }
        else
        {
            Dead = true;
        }
        
        //change speeds
        acc = 0.05;
        if (abs(Speed) != MaxSpeed * dir)
        {
            if (Speed &gt;= MaxSpeed * dir - acc &amp;&amp; Speed &lt;= MaxSpeed * dir + acc)
            {
                Speed = MaxSpeed * dir;
            }
            else
            {
                if (Speed &gt; MaxSpeed * dir)
                {
                    Speed -= acc;
                }
                else
                {
                    Speed += acc;
                }
            }
        }
        
        image_yscale = global.GravityDir;
        image_xscale = dir;
    }
}
else if (Dead)
{
    if (instance_exists(rider))
    {
        rider.onSled = false;
    }
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
