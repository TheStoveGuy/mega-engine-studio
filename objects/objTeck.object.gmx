<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTeckOrange</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//creation code (all optional)
//col = &lt;number&gt; (0 = orange (default); 1 = red)

event_inherited();

respawn = true;

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 4;

//Enemy specific code
col = 0;
init = 1;

phase = 0;
timer = 0;
waitDiff = 30;
spd = 0.5;

imgSpd = 0.1;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    switch (col)
    {
        case 0: sprite_index = sprTeckOrange; break;
        case 1: sprite_index = sprTeckRed;    break;
    }
}

event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    generalCollision();
    
    if instance_exists(target)
    {
        switch (phase)
        {
            case 0: //face megaman at the start
                calibrateDirection();
                phase = 1;
                break;
            case 1: //walk around
                imgIndex += imgSpd;
                if (imgIndex &gt;= 6)
                {
                    imgIndex = imgIndex mod 6;
                }
                
                if (xspeed == 0 || !place_meeting(x + sprite_width * 0.8, bbox_top, objSolid))
                {
                    image_xscale = -image_xscale;
                }
                
                xspeed = spd * image_xscale;
                
                if (instance_exists(target))
                {
                    if (abs(target.x - x) &lt;= 58 + abs(sprite_width) / 2)
                    {
                        phase = 2;
                        xspeed = 0;
                        imgIndex = 5;
                    }
                }
                break;
            case 2: //wait &amp; shoot
                if (timer &lt; 2)
                {
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 7 &amp;&amp; timer == 0)
                    {
                        timer = 1;
                        shot = instance_create(x, y + sprite_height * 0.5, objEnemyBullet);
                        shot.sprite_index = sprEnemyBulletMM6;
                        shot.contactDamage = 4;
                        shot.yspeed = 2.3;
                        playSFX(sfxEnemyShoot);
                    }
                    
                    if (imgIndex &gt;= 8 &amp;&amp; timer == 1)
                    {
                        timer = 2;
                        imgIndex = 5;
                    }
                }
                else
                {
                    timer += 1;
                    if (timer &gt; 16) //&lt;-- time waiting after shot here
                    {
                        phase = 1;
                        timer = 0;
                        xspeed = spd * image_xscale;
                    }
                }
                break;
        }
    }
    
    x += xspeed;
    y += yspeed;
}
else if dead
{
    phase = 0;
    timer = 0;
    xspeed = 0;
    yspeed = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
