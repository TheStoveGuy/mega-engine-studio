<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprOptionsCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_number(object_index) &gt; 1 {instance_destroy(); visible = 0; exit;}

image_speed = 0.2;

playMusic("0-menu.ogg",1,1);

option = 1;
selected = 0;
buffer = 0;
page = 1

//Control settings
newcontrols = 0;
current = 'NONE';
press = 1;

maxpage = 2;

//Option text
endx[1] = 9;
optiontext[1] =
'    - OPTIONS 1 -
CONFIGURE CONTROLS
CONFIGURE GAMEPAD
RESOLUTION
MUSIC VOLUME
SOUND VOLUME
TEXT CONTENT
ESCAPE KEY USE
EXIT';

endx[2] = 8;
optiontext[2] =
'    - OPTIONS 2 -
DAMAGE POPUP
MM COLOR
CHARGE BAR
SHOW FPS
SHOW CONTROLLER
PLAYER COUNT
EXIT';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///most menu selections
if !selected
{
    //var maxplayers = min(4+gamepad_get_device_count(),4);
    
    dir = global.keyRightPressed[0]-global.keyLeftPressed[0];
    if dir != 0
    {
        switch (option+9*(page-1))
        {
            case 1: //Switch pages
            case 10:
                page += dir;
                if page &gt; maxpage {page = 1;}
                if !page {page = maxpage;}
                break;
            case 4: //Screensize
                Setscreensize(global.screensize+dir);
                break;
            case 5: //Music volume
                global.musicvolume = max(0,min(100,global.musicvolume+10*dir));
                FMODInstanceSetVolume(global.mscPlay, global.musicvolume*0.01);
                break;
            case 6: //Sound volume
                global.musicvolume = max(0,min(100,global.soundvolume+10*dir));
                audio_master_gain(global.soundvolume*0.01);
                break;
            case 7: //Profanity filter
                global.familyFriendlyText = !global.familyFriendlyText;
                break;
            case 8: //Escape key behavior
                global.escapeBehavior = max(0,min(2,global.escapeBehavior+dir));
                break;
            case 11: //Damagepopup
                if global.damagepopup = 1 {global.damagepopup = 0;}
                else {global.damagepopup = 1;}
                break;
            case 12: //MM Color
                if global.mmColor = 1 {global.mmColor = 0;}
                else {global.mmColor = 1;}
                break;
            case 13: //Charge Bar
                if global.chargeBar = 1 {global.chargeBar = 0;}
                else {global.chargeBar = 1;}
                break;
            case 14: //FPS
                if global.showFPS = 1 {global.showFPS = 0;}
                else {global.showFPS = 1;}
                break;
            case 15: //Controller Overlay
                global.showControllerOverlay = (global.showControllerOverlay + dir) mod 3;
                break;
            case 16: // Players (co-op)
                global.playerCount = max(1,min(4,global.playerCount+dir));
                break;
        }
        playSFX(sfxMenuMove);
    }
    
    if global.keyUpPressed[0]
    {
        option -= 1;
        if option = 0 {option = endx[page];}
        playSFX(sfxMenuMove);
    }
    else if global.keyDownPressed[0]
    {
        option += 1;
        if option &gt; endx[page] {option = 1;}
        playSFX(sfxMenuMove);
    }
    
    if global.keyPausePressed[0]
    {
        if option+endx[1]*(page&gt;1) == 2
        {
            if buffer {exit;}
            newcontrols = 1; selected = 1; current = 'LEFT';
            pid = 0;
        }
        else if option+endx[1]*(page&gt;1) == 3
        {
            if buffer {exit;}
            //objGlobalControl.joystick_connected = xin_update(0);
            if (!objGlobalControl.joystick_connected)
            {
                objGlobalControl.joystick_connected = joystick_exists(1);
            }
            if !objGlobalControl.joystick_connected
            {
                playSFX(sfxError); exit;
            }
            newcontrols = 2; selected = 1; current = 'JUMP';
            pid = 0;
        }
        else if option = endx[page]
        {
            var ID;
            ID = instance_create(0, 0, objFadeout);
            ID.type = "room";
            ID.myRoom = rmTitleScreen;
            selected = 1;
            playSFX(sfxMenuSelect);
            saveorload('save',0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup controls
if (!newcontrols) exit;

//control configuration
var key;
key = 0;

if newcontrols = 1 //control configuration
{
    if keyboard_check_pressed(vk_anykey)
    {
        key = keyboard_key;
        switch(key) 
        {
            case vk_f1: case vk_f2: case vk_f3: case vk_f4: case vk_f5: case vk_f6:
            case vk_f7: case vk_f8: case vk_f9: case vk_f10: case vk_f11: case vk_f12:
            case vk_escape:
            case vk_alt:
            case vk_nokey:
            case vk_printscreen: exit;
        }
    }
    else {press = 0;}
    if key &amp;&amp; !press
    {
        press = 1;
        switch(current) 
        {
            case 'LEFT':    global.leftKey[pid] = key; current = 'RIGHT'; break;
            case 'RIGHT':   global.rightKey[pid] = key; current = 'UP'; break;
            case 'UP':      global.upKey[pid] = key; current = 'DOWN'; break;
            case 'DOWN':    global.downKey[pid] = key; current = 'JUMP'; break;
            case 'JUMP':    global.jumpKey[pid] = key; current = 'SHOOT'; break;
            case 'SHOOT':   global.shootKey[pid] = key; current = 'SLIDE'; break;
            case 'SLIDE':   global.slideKey[pid] = key; current = 'PREV WPN'; break;
            case 'PREV WPN':global.weaponSwitchLeftKey[pid] = key; current = 'NEXT WPN'; break;
            case 'NEXT WPN':global.weaponSwitchRightKey[pid] = key; current = 'PAUSE'; break;
            case 'PAUSE':   global.pauseKey[pid] = key; current = 'LEFT'; 
                            pid += 1;
                            if pid &gt;= global.playerCount
                            {
                                selected = 0;
                                buffer = 1;
                                alarm[0] = 10;
                                newcontrols = 0;
                            }
                            break;
        }
        playSFX(sfxMenuMove);
    }
}

if newcontrols = 2 //gamepad configuration
{
    if !objGlobalControl.joystick_connected
    {
        newcontrols = 0; selected = 0;
        press = 1; buffer = 1; alarm[0] = 10;
        exit;
    }
        
    var i,b; b = joystick_buttons(pid);
    for (i=1; i&lt;=b; i+=1;)
    {
        if joystick_check_button(pid,i)
        {
            if press = 0
            {
                key = i;
            }
            break;
        }
        if i = b {press = 0;}
    }
    
    if key &amp;&amp; !press
    {
        press = 1;
        switch(current)
        {
            case 'JUMP':    global.joystick_jumpKey[pid] = key; current = 'SHOOT'; break;
            case 'SHOOT':   global.joystick_shootKey[pid] = key; current = 'SLIDE'; break;
            case 'SLIDE':   global.joystick_slideKey[pid] = key; current = 'PREVIOUS WPN'; break;
            case 'PREVIOUS WPN':global.joystick_weaponSwitchLeftKey[pid] = key; current = 'NEXT WPN'; break;
            case 'NEXT WPN':global.joystick_weaponSwitchRightKey[pid] = key; current = 'PAUSE'; break;
            case 'PAUSE':   global.joystick_pauseKey[pid] = key; current = 'JUMP';
                            pid += 1;
                            if pid &gt;= 1 //global.playerCount
                            {
                                selected = 0; 
                                buffer = 1;
                                alarm[0] = 10;
                                newcontrols = 0;
                            }
                            break;
        }
        playSFX(sfxMenuMove);
    }
    /*}else{
        //setup xin controls
        
        //not going to check through all possible inputs, because honestly why would you be pressing two keys at the same time to set a control
        buttonInput = xin_get_input(0);
        
        //don't allow the setting of a dpad button
        if (buttonInput == xb_left || buttonInput == xb_right || buttonInput == xb_up || buttonInput == xb_down){
            buttonInput = false;
        }
        
        //trigger buttons (xin_get_input does not get inputs from buttons that have a range of detection, like the triggers or joysticks)
        if (xin_check(0, xb_leftTrigger)){ buttonInput = xb_leftTrigger; }
        if (xin_check(0, xb_rightTrigger)){ buttonInput = xb_rightTrigger; }
        
        if (buttonInput == 0){
            press = false;
        }
        
        if (buttonInput &amp;&amp; !press){
            press = true;
            switch(current) {
                case 'JUMP':        global.joystick_jumpKey = buttonInput;              current = 'SHOOT';          break;
                case 'SHOOT':       global.joystick_shootKey = buttonInput;             current = 'SLIDE';          break;
                case 'SLIDE':       global.joystick_slideKey = buttonInput;             current = 'PREVIOUS WPN';   break;
                case 'PREVIOUS WPN':global.joystick_weaponSwitchLeftKey = buttonInput;  current = 'NEXT WPN';       break;
                case 'NEXT WPN':    global.joystick_weaponSwitchRightKey = buttonInput; current = 'PAUSE';          break;
                case 'PAUSE':       global.joystick_pauseKey = buttonInput;             current = 'LEFT';
                                        newcontrols = 0; selected = 0; 
                                        press = 1; buffer = 1; alarm[0] = 10; break;
            }
            
            playSFX(sfxMenuMove);
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

draw_sprite_ext(sprOptionsLight,image_index,128,24,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(sprOptionsLight,image_index,128,224-19,1,-1,image_angle,image_blend,image_alpha);

draw_sprite(sprite_index,image_index,x,y+(option-1)*16);

draw_set_halign(fa_left);
draw_text_ext(48,48,optiontext[page],16,256);

opt = '';
if page = 1
{
    opt = '##';
    if !window_get_fullscreen()
    {
        opt += string(global.screensize)+'X#';
    }
    else {opt += 'FULL#';}
    opt += string(global.musicvolume)+'%#';
    opt += string(global.soundvolume)+'%#';
    if global.familyFriendlyText = 1
    {
        opt += 'FAMILY#';
    }
    else {opt += 'PG-13#';}
    switch global.escapeBehavior
    {
        case 0:
            opt += 'QUIT'; break;
        case 1:
            opt += 'PAUSE'; break;
        case 2:
           opt += 'N/A'; break;
    }
}
if page = 2
{
    if global.damagepopup = 1 {
        opt += 'ON#';
    }
    else {opt += 'OFF#';}
    if global.mmColor {
        opt += 'MM9/MM10#';
    }
    else {opt += 'MM1-MM6#';}
    if global.chargeBar = 1 {
        opt += 'ON#';
    }
    else {opt += 'OFF#';}
    if global.showFPS = 1 {
        opt += 'ON#';
    }
    else {opt += 'OFF#';}
    switch global.showControllerOverlay
    {
        case 0:
            opt += 'OFF#'; break;
        case 1:
            opt += 'WIDE#'; break;
        case 2:
           opt += 'THIN#'; break;
    }
    opt += string(global.playerCount)
}

draw_set_halign(fa_right);
draw_text_ext(224,64,opt,16,256);

if newcontrols
{
    draw_sprite(sprControlconfigureScreen,0,64,64);
    draw_set_halign(fa_center);
    draw_text(128,88,'PRESS KEY FOR');
    var player_mod = "";
    player_mod = " (P" + string(pid+1) + ")";
    draw_text(128,104,current + player_mod);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
