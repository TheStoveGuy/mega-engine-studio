<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprToadIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprToadMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprToadIntro;
poseImgSpeed = 3/60;
contactDamage = 8;

ground = false;
attackTimer = 0;
jumpTimer = 0;
jumpAmount = 0;
canInitShoot = true;
phase = 0; //0 = nothing; 1 = jumping; 2 = dancing;

//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 2; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 1; //HornetChaser
wpndmg[5] = 1; //JewelSatellite
wpndmg[6] = 1; //GrabBuster
wpndmg[7] = 2; //TripleBlade
wpndmg[8] = 2; //WheelCutter
wpndmg[9] = 3; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 1; //WireAdapter

startXspeed = xspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false
{
    if isFight == true
    {
        x += xspeed;
        y += yspeed;
            
        checkGround();
        gravityCheckGround();
        generalCollision();
        
        switch phase
        {
            case 0: //Idle (standing still)
                sprite_index = sprToadIdle;
                image_speed = 0;
                
                attackTimer -= 1;
                if attackTimer &lt;= 0
                {
                    if attackTimer == -1 //It's -1 when first attacking; the first attack is always a jump 'n shoot
                    or instance_exists(objToadRainParticle)
                        phase = 1;
                    else
                    {
                        randomize();
                        phase = choose(1, 2); //There seems to be a higher chance of him shooting
                    }
                }
            break;
            
            
            
            case 1: //Jumping
                if attackTimer &lt;= 0
                    attackTimer = 45
                if attackTimer == 30
                {
                    
                    if instance_exists(target)
                    {
                        startXScale = image_xscale;
                        
                        //Calculate the time needed to jump to MM's position, and with that, calculate the horizontal speed
                        var dx, initYspeed;
                        dx = sprite_get_xcenter_object(target) - sprite_get_xcenter();
                        initYspeed = -6.5;
                        
                        var time, yy, yyspeed; //time: How much time (in frames) it would take to land on Mega Man's location
                        yy = bbox_bottom;
                        yyspeed = initYspeed;
                        time = 0;
                        
                        while yy &lt; target.bbox_bottom || yyspeed &lt; 0
                        {
                            yyspeed += 0.25;
                            yy += yyspeed;
                            time += 1;
                        }
                        
                        startXspeed = dx / time;
                        yspeed = initYspeed;
                        ground = false;
                    }
                    else
                    {
                        startXScale = image_xscale;
                        startXspeed = 0;
                    }
                }
                
                if !place_meeting(x+startXspeed, y, objSolid) &amp;&amp; !place_meeting(x+startXspeed, y, prtMovingPlatformSolid)
                    xspeed = startXspeed;
                else
                {
                    while place_meeting(x, y, objSolid)
                        x -= image_xscale;
                        
                    xspeed = 0;
                }
                
                
                //Face the player
                sprite_index = sprToadJump;
                if ground
                    {
                    image_index = 0;
                    xspeed = 0;
                    }
                else
                    image_index = 1;
                
                if (attackTimer &gt; 1 &amp;&amp; ground == true)
                or (attackTimer &gt; 5 &amp;&amp; ground == false)
                    attackTimer -= 1;
                
                //When grounded, end the jump
                if ground == true
                and attackTimer &lt;= 1
                {
                    attackTimer = 30;
                    phase = 0;
                    sprite_index = sprToadIdle;
                    xspeed = 0;
                    yspeed = 0;
                }
            break;
            
            
            
            case 2: //Dancing
                if attackTimer &lt;= 0
                {
                    attackTimer = 120;
                    jumpTimer = 0;
                    
                    sprite_index = sprToadDance;
                    image_index = 0;
                    image_speed = 0;
                }
                image_index += 0.2;
                if round(image_index) &gt;= image_number
                    image_index = image_number-2;
                attackTimer -= 1;
                if attackTimer == 60
                    {
                    instance_create(x,y,objToadRainParticle);
                    if instance_exists(target)
                    if target.canHit {  
                        with target playerGetHit(other.contactDamage);
                    }
                    }
                if attackTimer == 0
                or drawHitSpark == true
                    {
                    phase = 0;
                    attackTimer = 30;
                    }
            break;
        }
        
        
        //Face the player
        if instance_exists(target)
        {
            if x &gt; target.x
                image_xscale = -1;
            else
                image_xscale = 1;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
