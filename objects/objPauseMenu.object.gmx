<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blackAlpha = 0;
blackAlphaIncrease = 0.2;
blackAlphaTimer = 0;
blackAlphaTimerMax = 2;

phase = 0;  //0: increasing the black rectangle's alpha
option = global.weapon[0];
oldWeapon = option;
resetWeapon = false; //Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened? 
mtank = 0;

with objMegaman {event_user(0);}

xshift = 0;
yshift = 0;

exitconfirm = 0;

player_id = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch phase
{
    case 0: //Fading in
        blackAlphaTimer += 1;
        if blackAlphaTimer &gt;= blackAlphaTimerMax {
            blackAlphaTimer = 0;
            blackAlpha += blackAlphaIncrease;
            if blackAlpha &gt;= 1
                phase = 1;
        }
        break;
    
    case 1: //Fading out
        event_user(0); //Moving the selection
            
        blackAlphaTimer += 1;
        if blackAlphaTimer &gt;= blackAlphaTimerMax {
            blackAlphaTimer = 0;
            blackAlpha -= blackAlphaIncrease;
            if blackAlpha &lt;= 0
                phase = 2;
        }
        break;
    
    case 2: //Idle
        event_user(0); //Moving the selection
        //Select the weapon/tank
        if global.keyJumpPressed[player_id] || global.keyPausePressed[player_id]
        {
            if option &lt;= global.totalWeapons
            {
                if objMegaman.inWaveBike &amp;&amp; option != megabuster {playSFX(sfxError);}
                else
                {
                    phase = 3;
                    global.weapon[player_id] = option;
                    with objMegaman {
                        if onRushJet {
                            onRushJet = false;
                            canMove = true;
                        }
                    }
                    playSFX(sfxMenuSelect);
                }
            }
            else if option == global.totalWeapons+1 //E-Tank
            {
                if global.eTanks &amp;&amp; global.playerHealth[player_id] &lt; 28
                {
                    option = 99; //Nothing selected
                    phase = 5;
                    mtank = 0;
                    global.eTanks -= 1;
                    eTankTimer = 0;
                    loopSFX(sfxEnergyRestore);
                }
                else {playSFX(sfxError);}
            }
            else if option == global.totalWeapons+2 //M-Tank
            { 
                if global.mTanks &gt; 0
                {
                    var proceed;
                    proceed = false;
                    for(i = 1; i &lt;= global.totalWeapons; i += 1)
                    {
                        if ceil(global.ammo[player_id,i]) &lt; 28
                        {
                            proceed = true;
                        }
                    }
                    if ceil(global.playerHealth[player_id]) &lt; 28
                    {
                        proceed = true;
                    }
                    
                    if proceed //If proceed is still false after the past calculations, it seems there is nothing to fill
                    {
                        option = 99; //Nothing selected
                        phase = 5;
                        mtank = 1;
                        global.mTanks -= 1;
                        eTankTimer = 0;
                        loopSFX(sfxEnergyRestore);
                    }
                    else {playSFX(sfxError);}
                }
                else {playSFX(sfxError);}
            }
            else if option == global.totalWeapons+3 //Exit
            {
                if !exitconfirm 
                {
                    exitconfirm = 1;
                    playSFX(sfxMenuSelect); exit;
                }
            }
        }
        
        if exitconfirm &amp;&amp; !instance_exists(objFadeout) //Confirming exit
        {
            if option == global.totalWeapons+3
            {
                if global.keyJumpPressed[player_id] || global.keyPausePressed[player_id]
                {
                    var ID;
                    ID = instance_create(x, y, objFadeout);
                    ID.type = "roomHub";
                    playSFX(sfxMenuSelect);
                }
            }
            else {exitconfirm = 0;}
        }
        break;
    
    case 3: //Fading out
        blackAlphaTimer += 1;
        if blackAlphaTimer &gt;= blackAlphaTimerMax
        {
            blackAlphaTimer = 0;
            blackAlpha += blackAlphaIncrease;
            if blackAlpha &gt;= 1
            {
                phase = 4;
                if resetWeapon == true
                {
                    global.weapon[player_id] = oldWeapon;
                    with objMegaman event_user(0);
                }
                
                if (global.weapon[player_id] != oldWeapon)
                {
                    with (prtPlayerProjectile)
                    {
                        instance_destroy();
                    }
                }
            }
        }
        break;
    
    case 4: //Fading in
        blackAlphaTimer += 1;
        if blackAlphaTimer &gt;= blackAlphaTimerMax
        {
            blackAlphaTimer = 0;
            blackAlpha -= blackAlphaIncrease;
            if blackAlpha &lt;= 0
            {
                global.frozen = false;
                instance_destroy();
            }
        }
        break;
    
    case 5: //E/M-Tank restoring health
        eTankTimer += 1;
        if eTankTimer &gt;= 3
        {
            eTankTimer = 0;
            
            var proceed;
            proceed = false;
            
            if mtank //Fill weapons - M-Tank only
            {
                for(i = 1; i &lt;= global.totalWeapons; i += 1)
                {
                    if global.ammo[player_id,i] &lt; 28
                    {
                        global.ammo[player_id,i] = min(28,global.ammo[player_id,i]+1);
                        proceed = true;
                    }
                }
            }
            
            if global.playerHealth[player_id] &lt; 28 //Fill health
            {
                global.playerHealth[player_id] = min(28,global.playerHealth[player_id]+1);
                proceed = true;
            }
            
            if !proceed
            {
                eTankTimer = 0;
                phase = 2;
                option = oldWeapon;
                global.weapon[player_id] = oldWeapon;
                with objMegaman event_user(0);
                audio_stop_sound(sfxEnergyRestore);
            }
        }              
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.keyDownPressed[player_id] { //Moving Downwards
    playSFX(sfxMenuMove);
    loops = 1;
    switch (option) 
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            option += 1;
            for (i=option; i&lt;=9; i+=1)
            {
                if global.weaponUnlocked[option] == false { option += 1; }
            }
            if option &gt;= 9 { option = 0; }
            break;
        case 9:
        case 10:
        case 11:
            option += 1;
            for (i=option; i&lt;=global.totalWeapons+1; i+=1)
            {
                if global.weaponUnlocked[option] == false { option += 1; }
            }
            if option &gt;= global.totalWeapons+1 { option = global.totalWeapons+3; }
            break;
        case 12:
            option = global.totalWeapons+3; //Exit
            break;
        case 13: //E-Tank
            if global.weaponUnlocked[9] == false { option = 0; }
            else { option = 9; }
            break;
        case 14: //M-Tank
            if global.weaponUnlocked[9] == false { option = 0; }
            else { option = 9; } //M-tank
            break;
        case 15: //Exit
            option = global.totalWeapons+1; //E-tank
            break;
        default: loops = 0; break;
    }
    
    /*if option &lt;= global.totalWeapons {
        while !global.weaponUnlocked[option] || loops == 0 {
            if option != 8 &amp;&amp; option != global.totalWeapons {
                option += 1;
                if option &lt; 0 {option = 8;} //Keep from underflowing
                else if option &gt; global.totalWeapons {option = 0;} //Keep from overflowing
            }
            loops += 1;
        }
    }*/
}
else if global.keyUpPressed[player_id] { //Moving Upwards
    playSFX(sfxMenuMove);
    loops = 1;
    switch (option) 
    {
        case 0:
            option = 8;
            for (i=option; i&gt;0; i-=1)
            {
                if global.weaponUnlocked[option] == false { option -= 1; }
            }
            break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            option -= 1;
            for (i=option; i&gt;=0; i-=1)
            {
                if global.weaponUnlocked[option] == false { option -= 1; }
            }
            break;
        case 9:
        case 10:
        case 11:
        case 12:
            option -= 1;
            for (i=option; i&gt;=9; i-=1)
            {
                if global.weaponUnlocked[option] == false { option -= 1; }
            }
            if option &lt; 9 { option = global.totalWeapons+1; } //E-tank
            break;
        case 13: //E-tank
        case 14: //M-tank
            option = global.totalWeapons+3; //Exit
            break;
        case 15: //Exit
            option = global.totalWeapons;
            if global.weaponUnlocked[12] == false { option = 11; }
            if global.weaponUnlocked[11] == false { option = 10; }
            if global.weaponUnlocked[10] == false { option = 9; }
            if global.weaponUnlocked[9] == false { option = 0; }
            break;
        default: loops = 0; break;
    }
    
    /*if option &lt;= global.totalWeapons {
        while !global.weaponUnlocked[option] || loops == 0 {
            option -= 1;
            if option &lt; 0 {option = 9;}
            else if option &gt; global.totalWeapons+1 {option = 0;}
            loops += 1;
        }
    }*/
}

if global.keyLeftPressed[0] || global.keyRightPressed[0]
{
    playSFX(sfxMenuMove);
    switch (option) 
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            option += 9;
            if option &gt; global.totalWeapons { option = global.totalWeapons+3; }
            if global.weaponUnlocked[9] == false { option = 10; }
            if global.weaponUnlocked[10] == false { option = 11; }
            if global.weaponUnlocked[11] == false { option = 12; }
            if global.weaponUnlocked[12] == false { option = global.totalWeapons+3; }
            break;
        
        case 9:
        case 10:
        case 11:
        case 12:
            option -= 9;
            if option &lt; 0 { option = 0; }
            if global.weaponUnlocked[3] == false { option = 2; }
            if global.weaponUnlocked[2] == false { option = 1; }
            if global.weaponUnlocked[1] == false { option = 0; }
            break;
            
        case 13: //E-Tanks
            if global.keyLeftPressed[0]
            {
                if global.weaponUnlocked[8] == false { option = 0; }
                else { option = 8; }
            }
            else {option = global.totalWeapons+2;}
            break;
        case 14: //M-Tanks
            if global.keyLeftPressed[0] {option = global.totalWeapons+1;}
            else 
            {
                if global.weaponUnlocked[8] == false { option = 0; }
                else { option = 8; }
            }
            break;
        case 15: //Exit
            if global.weaponUnlocked[8] == false { option = 0; }
            else { option = 8; }
            break;
            
        /*default:
            if option &lt;= global.totalWeapons {
                if option &gt; 8 {option -= 9;} //Jump to the right column
                else {option += 9;} //Jump to the left column
                    
                if option &gt; global.totalWeapons {option = global.totalWeapons;}  //Keep from overflowing
                else if option &lt; 0 {option = 0;} //Keep from underflowing
                
                while !global.weaponUnlocked[option] {
                    switch (option) {
                        case 0: //The top weapon of the left column
                            if global.totalWeapons &gt; 8 {option = 8;}
                            else {option = global.totalWeapons;}
                            break;
                        case 9: //The top weapon of the right column
                            option = global.totalWeapons;
                            break;
                        default:
                            option -= 1;
                            break;
                    }
                }
            }
            break;*/
    }
}

//Set weapon
if option &lt;= global.totalWeapons
{
    global.weapon[player_id] = option;
}
else {global.weapon[player_id] = 0;}

with objMegaman event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var oldCol, oldAlp, wepIcon, wepPri, wepSec;
oldCol = draw_get_color();
oldAlp = draw_get_alpha();
wepIcon = sprWeaponIcons;
wepPri = sprWeaponIconsPrimary;
wepSec = sprWeaponIconsSecondary;

x = view_xview+xshift;
y = view_yview+yshift;

//Menu
if (phase &gt;= 1 &amp;&amp; phase &lt;= 3) || phase &gt;= 5
{
    draw_set_color(c_black);
    draw_rectangle(view_xview+xshift,view_yview+yshift,view_xview+view_wview,view_yview+view_hview,false);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    
    drawSelf();
    
    //Icons, ammo bars and names
    maxI = global.totalWeapons;
    xset = 24; yset = 9;
    
    //Left column
    for(i = 0; i &lt;= maxI; i += 1)
    {
        if global.weaponUnlocked[i] 
        {
            //Icon
            if option == i {
                draw_sprite_ext(wepIcon,i, x+xset, y+yset, 1, 1, 0, make_color_rgb(255,228,164), 1);
                draw_sprite_ext(wepPri, i, x+xset, y+yset, 1, 1, 0, global.primaryCol[0], 1);
                draw_sprite_ext(wepSec, i, x+xset, y+yset, 1, 1, 0, global.secondaryCol[0], 1);
            }
            else {
                draw_sprite_ext(wepIcon, i, x+xset, y+yset, 1, 1, 0, c_white, 1);
            }
            
            //Ammo bar
            var ammo,priCol,secCol;
            if i == 0 
            {
                ammo = global.playerHealth[player_id];
                priCol = make_color_rgb(255, 217, 162); secCol = c_white;
            }
            else
            {
                ammo = ceil(global.ammo[player_id,i]);
                priCol = global.primaryCol[0];
                secCol = global.secondaryCol[0];
            }
            
            if option == i 
            {
                draw_sprite_ext(sprPauseMenuBarPrimary,  ammo, x+xset+18, y+yset+8, 1, 1, 0, priCol, 1);
                draw_sprite_ext(sprPauseMenuBarSecondary,ammo, x+xset+18, y+yset+8, 1, 1, 0, secCol, 1);
                
                if global.infiniteEnergy[i]
                {
                    draw_sprite_ext(sprInfinityMark, 0, x+xset+18+28, y+yset+8, 1, 1, 0, c_white, 1);
                    draw_sprite_ext(sprInfinityMark, 1, x+xset+18+28, y+yset+8, 1, 1, 0, priCol, 1);
                    draw_sprite_ext(sprInfinityMark, 2, x+xset+18+28, y+yset+8, 1, 1, 0, secCol, 1);
                }
            }
            else 
            {
                draw_sprite_ext(sprPauseMenuBarGray, ammo, x+xset+18, y+yset+8, 1, 1, 0, c_white, 1);
                if global.infiniteEnergy[i]
                {
                    draw_sprite_ext(sprInfinityMark, 0, x+xset+18+28, y+yset+8, 1, 1, 0, c_white, 1);
                }
            }
            //Name
            if option == i {
                draw_set_color(make_color_rgb(255, 217, 162)); //Light yellow-ish
                draw_text(x+xset+18, y+yset, global.weaponName[i]);
                draw_set_color(c_white);
            }
            else {draw_text(x+xset+18, y+yset, global.weaponName[i]);}
        }
        else
        {
            draw_sprite_ext(wepIcon, i, x+xset, y+yset, 1, 1, 0, c_white, 1);
            draw_sprite_ext(sprPauseMenuWeaponDisabled, 0, x+xset+18, y+yset, 1, 1, 0, c_white, 1);
        }
        yset += 18;
        if i = 8 {yset-=(i+1)*18-4; xset = 152;}
    }
    
    if option == global.totalWeapons+3 { //Exit
        draw_sprite_ext(sprExit, 0+exitconfirm*3, x+160, y+112, 1, 1, 0, make_color_rgb(255,228,164), 1);
        draw_sprite_ext(sprExit, 1+exitconfirm*3, x+160, y+112, 1, 1, 0, global.primaryCol[0], 1);
        draw_sprite_ext(sprExit, 2+exitconfirm*3, x+160, y+112, 1, 1, 0, global.secondaryCol[0], 1);
    }
    else {
        draw_sprite_ext(sprExit, 0+exitconfirm*3, x+160, y+112, 1, 1, 0, c_white, 1);
    }
    
    //E-Tank
    if option == global.totalWeapons+1 {
        draw_sprite_ext(sprETankPrimary, 0, x+156, y+136, 1, 1, 0, global.primaryCol[0], 1);
        draw_sprite_ext(sprETankSecondary, 0, x+156, y+136, 1, 1, 0, global.secondaryCol[0], 1);
    }
    else {draw_sprite(sprETankGrey, 0, x+156, y+136);}
    var etankn = global.eTanks
    draw_text(x+160, y+154, string(etankn));
    //M-Tank
    if option == global.totalWeapons+2 {
        draw_sprite_ext(sprMTankPrimary, 0, x+180, y+136, 1, 1, 0, global.primaryCol[0], 1);
        draw_sprite_ext(sprMTankSecondary, 0, x+180, y+136, 1, 1, 0, global.secondaryCol[0], 1);
    }
    else {draw_sprite(sprMTankGrey, 0, x+180, y+136);}
    draw_text(x+184, y+154, string(global.mTanks));
    
    //Bolts
    draw_sprite(sprBoltBig, 0, x+208, y+136);
    draw_sprite_ext(sprBoltBig, 1, x+208, y+136, 1, 1, 0, global.primaryCol[0], 1);
    draw_sprite_ext(sprBoltBig, 2, x+208, y+136, 1, 1, 0, global.secondaryCol[0], 1);
    bl = string(global.bolts);
    repeat(4-string_length(bl)) {bl = '0'+bl;}
    draw_text(x+208-8, y+154, bl);
    
    //Energy Elements
    draw_sprite_ext(sprEnergyElement, 0, x+160+24+16+8, y+108, 1, 1, 0, c_white, 1);
    bl = string(global.energyElements);
    repeat(3-string_length(bl)) {bl = '0'+bl;}
    draw_text(x+208-4, y+124+2, bl);
    
    //Upgrades
    draw_sprite_ext(sprUpgrades, 0, x+24+8, y+180+16, 1, 1, 0, c_white, 1);                                                        //energy balancer
    if global.chargeUpgrade { draw_sprite_ext(sprUpgrades, 1, x+24+24, y+180+16, 1, 1, 0, c_white, 1); }                           //charged buster upgrade
    if global.shotUpgrade { draw_sprite_ext(sprUpgrades, 3, x+24+40, y+180+16, 1, 1, 0, c_white, 1); }                             //uncharged buster upgrade
    if global.dropUpgrade { draw_sprite_ext(sprUpgrades, 2, x+24+48+8, y+180+16, 1, 1, 0, c_white, 1); }                           //drop rate upgrade
    if global.skullAmulet { draw_sprite_ext(sprUpgrades, 4, x+24+48+16+8, y+180+16, 1, 1, 0, c_white, 1); }                        //skull amulet
    if global.sturdyHelmet { draw_sprite_ext(sprUpgrades, 5, x+24+48+8+24+8, y+180+16, 1, 1, 0, c_white, 1); }                     //met helmet
    if global.converter { draw_sprite_ext(sprUpgrades, 6, x+24+48+48+8, y+180+16, 1, 1, 0, c_white, 1); }                          //converter
}

//Black rectangle
draw_set_color(c_black);
draw_set_alpha(blackAlpha);
draw_rectangle(x, y, x+view_wview, y+view_hview, false);

draw_set_color(oldCol);
draw_set_alpha(oldAlp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
