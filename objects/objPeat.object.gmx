<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPeat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 3;

//Enemy specific code
phase = 0;
breakY = 0;
timer = 0;

yspeed = 0;
xspeed = 0;

imgSpd = 0.2;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper){
    switch (phase){
        //set break height
        case 0:
            visible = false;
            canHit = false;
            
            if (instance_exists(target) &amp;&amp; !place_meeting(x, y, objXBlock)){
                phase = 1;
                breakY = target.y - 16;
                
                visible = true;
                canHit = true;
            }
            
            break;
        
        //rise in egg
        case 1:
            yspeed = -0.9; //&lt;-- egg rise speed here
            
            //break out of egg
            if (y &lt;= breakY || healthpoints &lt; healthpointsStart){
                phase = 2;
                imgIndex = 1;
                calibrateDirection();
                yspeed = 0;
                
                //spawn egg shell particles
                yOUwILLgIVEmEaNeGG = instance_create(x - 4, y, objPeatEggParticle);
                yOUwILLgIVEmEaNeGG.xspeed = -0.5;
                
                yOUwILLgIVEmEaNeGG = instance_create(x + 1, y, objPeatEggParticle);
                yOUwILLgIVEmEaNeGG.xspeed = 0.2;
                yOUwILLgIVEmEaNeGG.image_index = 1;
                
                yOUwILLgIVEmEaNeGG = instance_create(x + 4, y, objPeatEggParticle);
                yOUwILLgIVEmEaNeGG.xspeed = 0.5;
                yOUwILLgIVEmEaNeGG.image_index = 2;
            }
            
            break;
        
        //wait until flying
        case 2:
            waitTime = 20; //&lt;-- time waiting until flying here
            
            //set direction to fly to
            if (timer == waitTime / 2){
                if (instance_exists(target)){
                    direction = point_direction(x, y, target.x, target.y);
                    
                    //restriction on flight angle (can't fly 90 degrees above or below)
                    if (direction &gt; 45 &amp;&amp; direction &lt;= 90){
                        direction = 45;
                    }
                    
                    if (direction &gt; 90 &amp;&amp; direction &lt; 135){
                        direction = 135;
                    }
                    
                    if (direction &gt; 225 &amp;&amp; direction &lt; 270){
                        direction = 270;
                    }
                    
                    if (direction &gt;= 270 &amp;&amp; direction &lt; 315){
                        direction = 315;
                    }
                }
            }
            
            timer += 1;
            if (timer &gt;= 40){
                phase = 3;
                timer = 0;
                speed = 4.5; //&lt;-- flying speed here
            }
            break;
            
        //fly
        case 3:
            //lol don't need to do anything. just need to wait until it kills itself offscreen.
            break;
    }
    
    //animation 
    if (phase == 2 || phase == 3){
        imgIndex += imgSpd;
        if (imgIndex &gt;= 3){
            imgIndex = 1;
        }
    }
    
    x += xspeed;
    y += yspeed;
    
} else if (dead) {
    //respawn. not my best code, I must admit
    if (phase &gt; 0){
        timer += 1;
        if (timer &gt;= 120){ //&lt;-- respawn time here
            phase = 0;
            timer = 0;
            
            dead = false;
            healthpoints = healthpointsStart;
            beenOutsideView = false;
        }
    }else{
        timer = 0;
    }
    
    speed = 0;
    direction = 0;
    xpeed = 0;
    yspeed = 0;
    
    image_xscale = 1;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
