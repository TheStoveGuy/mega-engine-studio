<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBossControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Place this object at the topleft corner of the screen your boss is in!
//This handles the boss health bar, as well as locking the player and boss movement at the start

//Creation code:
//music = "Boss.ogg" (just the file name of the music you're using for the boss)
//musicVolume = 0-1 (the volume of the music; optional)
//musicLoopSecondsStart = 0-song point in seconds (the starting loop point of the music in seconds; optional)
//musicLoopSecondsEnd = 0-song length in seconds (the ending of the loop of the music in seconds; if musicLoopSecondsStart is used, this one is required)

//Extra
//SpawnType = (0 = drop in, 1 = pop in, 2 MM6, 3 Fortress Boss)
//LockDoors = false/true
//Drop = (0 = End level, 1 = none, 2 = large health pickup)
//healthBarPrimaryCol = &lt;0-54&gt; (the color of the left/right of the boss's health bar)
//healthBarSecondaryCol = &lt;0-54&gt; (the color of the middle of the boss's health bar)
//colorSkip = &lt;number&gt; (how many colors the health bar skips in the nesPalette when automatically choosing the colors for the health bar layers)

/*for reference for what index in the nesPalette array is what color, see the nesPalleteArrayKey. It's not in the devkit, but it
should be pinned in the devkit-changelog channel in the discord.*/

/*there's also healthBarPrimaryColList, and healthBarSecondaryColList. They work like the singlular variables, but you can add
multiple color indexes for the colors of multiple health bars. If you're going to have more than one health bar, then completely
use this instead of the singular variables. Example below:


//setup lists
healthBarPrimaryColList = ds_list_create();
healthBarSecondaryColList = ds_list_create();
//first health bar (bottom layer) - orange
ds_list_add(healthBarPrimaryColList, 34);
ds_list_add(healthBarSecondaryColList, 40);
//second health bar - green
ds_list_add(healthBarPrimaryColList, 22);
ds_list_add(healthBarSecondaryColList, 37);
//third health bar (top layer) - spoopy &amp; ejjy dark blue and dark magenta
ds_list_add(healthBarPrimaryColList, 2);
ds_list_add(healthBarSecondaryColList, 18);

if you want your boss to sprout introduction text, use this template. you can have a max of eleven lines of dialogue.
example of a boss intro text:
    name ="Barry";
    lines = 4;
    text[0] = "According to all known laws of aviation,";
    text[1] = "there is no way a bee should be able to fly.";
    text[2] = "Its wings are too small to get its fat little body off the ground.";
    text[3] = "The bee, of course, flies anyway";
    text[4] = "because bees don't care what humans think is impossible.";
    text[5] = -1;


The order in which you add the colors to the respective lists will be the order of the colors of the bars.*/

healthBarPrimaryColList = ds_list_create();
healthBarPrimaryCol = 34;

healthBarSecondaryColList = ds_list_create();
healthBarSecondaryCol = 40;

colinit = 1;
    
colorSkip = 4;
    
SpawnType = 0;
LockDoors = false;
Drop = 0;
Dropkey = 0;

ElementNum = 1;

colorSkip = 4; 

drawHealthBar = false;
canFillHealthBar = true;
fillingHealthBar = false;
healthBarTimer = 0;
healthBarTimerSpeed = 1;
healthBarTimerSpeedExtra = 0.25;
healthBarTimerMax = 30;

depthstart = depth;

canInitDeactivation = true;

alarm[0] = 1;

music = "";
musicLoopPointStart = -1;
musicLoopPointEnd = 1;
musicLoopSecondsStart = -1;
musicLoopSecondsEnd = -1;

name = 'Boss';
lines = -1;
text = "";

dontStartMusicYet = false;

maxFanOutDistance = 80;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(healthBarPrimaryColList);
ds_list_destroy(healthBarSecondaryColList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myBoss = instance_nearest(x, y, prtBoss);
if myBoss
{
    bossHealth = myBoss.healthpoints;
}
else {bossHealth = 1;}

myVis = 0;
global.bossHealth[1] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(myBoss)
{
if instance_exists(objMegaman) &amp;&amp; !global.frozen
{
if (x &gt;= view_xview &amp;&amp; x &lt;= view_xview+view_wview-1 &amp;&amp; y &gt;= view_yview &amp;&amp; y &lt;= view_yview+view_hview-1)
&amp;&amp; !objMegaman.teleporting &amp;&amp; !objMegaman.showReady
{
    //Locks the player and activates the boss (but won't make the boss move yet, it just performs its starting pose)
    //Also plays the boss music
    if (canInitDeactivation)
    {
        canInitDeactivation = false;
        myBoss.startIntro = true;
        
        with objMegaman
        {
            playerLockMovement();
            yspeed = 0;
            if (x &lt; other.myBoss.x)
            {
                image_xscale = 1;
            }
            else
            {
                image_xscale = -1;
            }
            if abs(other.maxFanOutDistance) &gt; 0
                playerFanOut(20*image_xscale,other.maxFanOutDistance);
        }
        if myVis {myBoss.visible = 1;}
        
        if (SpawnType == 1)
        {
            myBoss.y = myBoss.ystart;
        }
        else if (SpawnType == 0 or SpawnType == 2)
        {
            myBoss.y = view_yview[0]-sprite_get_yoffset(myBoss.sprite_index);
        }
        
        if (SpawnType == 2)
        {
            myBoss.IntroType = 1;
        }
        if (LockDoors)
        {
            global.LockTransition = true;
        }
        
        myBoss.Drop = Drop;
        myBoss.Dropkey = Dropkey;
        myBoss.ElementNum = ElementNum;
        
        if (music != "") &amp;&amp; (!dontStartMusicYet)
        {
            myBoss.StopAllMusic = true;
            playMusic(music, 1, musicVolume);
            
            if (musicLoopPointStart != -1)
            {
                setMusicLoop(musicLoopPointStart, musicLoopPointEnd);
            }
        }
        else { if music != "" { stopMusic(); } }
    }
    
    //Preparing to fill the health bar
    if (canFillHealthBar) 
    {
        if !instance_exists(myBoss) { exit; }
        if (myBoss.y &gt;= myBoss.ystart || SpawnType == 3)
            &amp;&amp; ((myBoss.image_index &gt;= myBoss.image_number-1 &amp;&amp; SpawnType != 3)
                || (SpawnType == 3 &amp;&amp; myBoss.isIntro == false &amp;&amp; myBoss.startIntro == false))
            
            {
            if !global.bossTextShown &amp;&amp; text != ""
            {
                global.bossTextShown = true;
                switch lines
                { 
                    case 0: 
                        Spawntextbox(0,0,name, text[0],-1);
                    break;
                    case 1: 
                        Spawntextbox(0,0,name, text[0],text[1],-1);
                    break;
                    case 2: 
                        Spawntextbox(0,0,name, text[0],text[1],text[2],-1);
                    break;
                    case 3: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],-1);
                    break;
                    case 4: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],-1);
                    break;
                    case 5: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],text[5],-1);
                    break;
                    case 6: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],text[5],text[6],-1);
                    break;
                    case 7: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],text[5],text[6],text[7],-1);
                    break;
                    case 8: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],text[5],text[6],text[7],text[8],-1);
                    break;
                    case 9: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],text[5],text[6],text[7],text[8],text[9],-1);
                    break;
                    case 10: 
                        Spawntextbox(0,0,name,text[0],text[1],text[2],text[3],text[4],text[5],text[6],text[7],text[8],text[9],text[10],-1);
                    break;
                }
            }
            
            if (!instance_exists(objTextbox) &amp;&amp; global.bossTextShown &amp;&amp; text != "") || (text == "")
                healthBarTimer += 1;
                if healthBarTimer == 1 &amp;&amp; dontStartMusicYet
                {
                    myBoss.StopAllMusic = true;
                    playMusic(music, 1, musicVolume);
                    
                    if (musicLoopPointStart != -1)
                    {
                        setMusicLoop(musicLoopPointStart, musicLoopPointEnd);
                    }
                }
            }
        
        if (healthBarTimer &gt;= healthBarTimerMax)
        {
            healthBarTimer = 0;
            canFillHealthBar = false;
            fillingHealthBar = true;
            loopSFX(sfxEnergyRestore);
            drawHealthBar = true;
        }
    }
    
    
    //Filling the health bar
    if (fillingHealthBar)
    {
        healthBarTimerSpeed = (global.bossHealth[1] div 28) * healthBarTimerSpeedExtra + 1;
        healthBarTimer += healthBarTimerSpeed;
        
        if (healthBarTimer &gt;= 3)
        {
            global.bossHealth[1] += healthBarTimer div 3;
            healthBarTimer = healthBarTimer mod 3;
        }
        
        if (global.bossHealth[1] &gt;= bossHealth)
        {
            global.bossHealth[1] = bossHealth;
            audio_stop_sound(sfxEnergyRestore);
            playerFreeMovement();
            myBoss.startFight = true;
            fillingHealthBar = false;
            if string_pos("lvlTier",room_get_name(room)) == 1
            {
                global.levelTime = 0;
            }
        }
    }
    
    if (!canFillHealthBar &amp;&amp; !fillingHealthBar &amp;&amp; drawHealthBar &amp;&amp; Drop != 0 &amp;&amp; global.bossHealth[1] &lt;= 0)
    {
        drawHealthBar = false;
    }
}
}
if canInitDeactivation
{
    if myBoss.visible
    {
        myVis = 1;
        myBoss.visible = 0;
    }
}
}

if depth = depthstart
{
    depth = 10;
}
else
{
    depth = depthstart;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if colinit
{
    if music == "0-boss.ogg" {musicLoopPointStart = 24.5;} //musicLoopSecondsStart
    if (musicLoopSecondsStart != -1)
    {
        musicLoopPointStart = musicLoopSecondsStart/musicLoopSecondsEnd;
        musicLoopPointEnd = 1;
    }
    
    if ds_list_empty(healthBarPrimaryColList)
    {
        ds_list_add(healthBarPrimaryColList, healthBarPrimaryCol);
    }
    if ds_list_empty(healthBarSecondaryColList)
    {
        ds_list_add(healthBarSecondaryColList, healthBarSecondaryCol);
    }
    
    colinit = 0;
}

if drawHealthBar
{
    var draw_x = 32;
    if global.coop
        draw_x = view_wview[0] - 24;
    draw_sprite_ext(sprHealthbarBackground,0,view_xview[0]+draw_x,view_yview[0]+17,1,1,image_angle,c_black,image_alpha);
    
    barLayers = global.bossHealth[1] div 28;
    
    //top layer of health
    //primaryColor = healthBarPrimaryCol + barLayers * colorSkip;
    var primaryColor;
    if (barLayers &lt; ds_list_size(healthBarPrimaryColList))
    {
        primaryColor = ds_list_find_value(healthBarPrimaryColList, barLayers);
    }
    else
    {
        primaryColor = ds_list_find_value(healthBarPrimaryColList, ds_list_size(healthBarPrimaryColList) - 1) + (barLayers - (ds_list_size(healthBarPrimaryColList) - 1)) * colorSkip;
    }
    
    if (primaryColor &lt; 0){primaryColor = 54 - (abs(primaryColor) mod 54);}
    if (primaryColor &gt; 54){primaryColor = (primaryColor mod 54);}
    
    //secondaryColor = healthBarSecondaryCol - barLayers * colorSkip;
    var secondaryColor;
    if (barLayers &lt; ds_list_size(healthBarSecondaryColList))
    {
        secondaryColor = ds_list_find_value(healthBarSecondaryColList, barLayers);
    }
    else
    {
        secondaryColor = ds_list_find_value(healthBarSecondaryColList, ds_list_size(healthBarSecondaryColList) - 1) - (barLayers - (ds_list_size(healthBarSecondaryColList) - 1)) * colorSkip;
    }
    if (secondaryColor &lt; 0){secondaryColor = 54 - (abs(secondaryColor) mod 54);}
    if (secondaryColor &gt; 54){secondaryColor = (secondaryColor mod 54);}
    
    var i;
    for (i = 1; i &lt;= global.bossHealth[1] - 28 * barLayers; i += 1)
    {
        draw_sprite_ext(sprHealthbarPrimary,  0,view_xview[0]+draw_x+1,view_yview[0]+17+(sprite_get_height(sprHealthbarBackground) - i * 2), 1, 1, 0, global.nesPalette[primaryColor], 1);
        draw_sprite_ext(sprHealthbarSecondary,0,view_xview[0]+draw_x+1,view_yview[0]+17+(sprite_get_height(sprHealthbarBackground) - i * 2), 1, 1, 0, global.nesPalette[secondaryColor], 1);
    }
    
    //bottom layer of health
    if (barLayers != 0)
    {
        if (barLayers &lt; ds_list_size(healthBarPrimaryColList)){
            primaryColor = ds_list_find_value(healthBarPrimaryColList, barLayers - 1);
        }else{
            primaryColor = ds_list_find_value(healthBarPrimaryColList, ds_list_size(healthBarPrimaryColList) - 1) + (barLayers - (ds_list_size(healthBarPrimaryColList) - 1)) * colorSkip - colorSkip;
        }
        
        //primaryColor = healthBarPrimaryCol + barLayers * colorSkip - colorSkip;
        if (primaryColor &lt; 0){primaryColor = 54 - (abs(primaryColor) mod 54);}
        if (primaryColor &gt; 54){primaryColor = (primaryColor mod 54);}
        
        if (barLayers &lt; ds_list_size(healthBarSecondaryColList)){
            secondaryColor = ds_list_find_value(healthBarSecondaryColList, barLayers - 1);
        }else{
            secondaryColor = ds_list_find_value(healthBarSecondaryColList, ds_list_size(healthBarSecondaryColList) - 1) - (barLayers - (ds_list_size(healthBarSecondaryColList) - 1)) * colorSkip + colorSkip;
        }
        
        //secondaryColor = healthBarSecondaryCol - barLayers * colorSkip + colorSkip;
        if (secondaryColor &lt; 0){secondaryColor = 54 - (abs(secondaryColor) mod 54);}
        if (secondaryColor &gt; 54){secondaryColor = (secondaryColor mod 54);}
        
        
        for (i = global.bossHealth[1] - 28 * barLayers + 1; i &lt;= 28; i += 1){
            draw_sprite_ext(sprHealthbarPrimary,  0,view_xview[0]+draw_x+1,view_yview[0]+17+(sprite_get_height(sprHealthbarBackground) - i * 2), 1, 1, 0, global.nesPalette[primaryColor], 1);
            draw_sprite_ext(sprHealthbarSecondary,0,view_xview[0]+draw_x+1,view_yview[0]+17+(sprite_get_height(sprHealthbarBackground) - i * 2), 1, 1, 0, global.nesPalette[secondaryColor], 1);
        }
    }
    
    //debug health counter   ;^)
    //draw_text(view_xview[0]+7+8+1+5+16+20, view_yview[0]+17, string(global.bossHealth[1]));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
