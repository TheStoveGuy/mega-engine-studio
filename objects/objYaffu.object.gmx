<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprYaffu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;

//enemy specific code
phase = 0;
pullDuration = 90;
pullDurationExtra = 40;
pullTimer = 0;
pullSpd = -1.1;
pullDir = 1;

xspeed = 0;
yspeed = 0;

turnSet = 1;
imgSpd = 0.4;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    checkGround();
    
    switch (phase)
    {
        case 0: //face megaman at the start
            calibrateDirection();
            phase = 1;
            break;
        case 1: //pull/push
            pullTimer += 1;
            currentPullSpd = 0;
            if (pullTimer &lt; pullDuration)
            {
                currentPullSpd = pullSpd;
                imgIndex += imgSpd;
            }
            else if (pullTimer &lt; pullDuration + pullDurationExtra)
            {
                currentPullSpd = pullSpd / 2;
                imgIndex += imgSpd * 0.4;
            }
            else
            {
                phase = 2;
                pullTimer = 0;
                if (pullDir &gt; 0){
                    imgIndex = 3;
                }
                else {imgIndex = 10;}
                break;
            }
            
            if (pullDir &gt; 0 &amp;&amp; imgIndex &gt;= 3)
            {
                imgIndex = 0;
            }
            else if (pullDir &lt; 0 &amp;&amp; imgIndex &gt;= 10)
            {
                imgIndex = 7;
            }
            
            with objMegaman
            {
                if !climbing &amp;&amp; (canMove || isSlide)
                {
                    xs = xspeed;
                    ys = yspeed;
                    xspeed = other.currentPullSpd*other.pullDir*other.image_xscale;
                    yspeed = 0;
                    playerCollision();
                    x += xspeed;
                    xspeed = xs;
                    yspeed = ys;
                }
            }
            break;
        case 2: //turn around
            imgIndex += imgSpd * 0.4;
            if (pullDir &gt; 0 &amp;&amp; imgIndex &gt;= 7)
            {
                phase = 1;
                pullDir = -1;
                imgIndex = 7;
            }
            else if (imgIndex &gt;= 14)
            {
                phase = 1;
                pullDir = 1;
                imgIndex = 0;
            }
            break;
    }
    
    checkGround();
    gravityCheckGround();
    generalCollision();
    
    x += xspeed;
    y += yspeed;
}
else if dead
{
    phase = 0;
    pullDir = 1;
    pullTimer = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
