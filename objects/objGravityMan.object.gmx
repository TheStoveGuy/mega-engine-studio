<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGravityIntro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprGravityMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprGravityIntro;
poseImgSpeed = 0.25;
contactDamage = 5; //4 shots

ground = false;
attackTimer = 0;
fireTimer = 0;
canInitShoot = true;
phase = 0; //0 = nothing; 1 = running; 2 = jumping; 3 = flipping;
myGrav = 1;

//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 2; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 1; //HornetChaser
wpndmg[5] = 4; //JewelSatellite
wpndmg[6] = 1; //GrabBuster
wpndmg[7] = 2; //TripleBlade
wpndmg[8] = 1; //WheelCutter - why not it looks like the metal blade and has a low chance of hitting ~Ren
wpndmg[9] = 1; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 1; //WireAdapter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if startIntro &amp;&amp; global.GravityDir = 1
{
    if instance_exists(objMegaman)
    {
        i = instance_create(objMegaman.x-8,objMegaman.y-8,objGravityFlipUp)
        with i
        {
            event_perform(ev_step,ev_step_normal);
            instance_destroy();
        }
    }
}

event_inherited();

if !global.frozen
{
    if isFight
    {
        x += xspeed;
        y += yspeed;
            
        checkGroundExt(myGrav);
        gravityCheckGroundExt(0.25*myGrav);
        generalCollisionExt(myGrav);
        
        switch phase
        {
            case 0: //GravityFlip
                if y &lt; view_yview+view_hview/2
                    image_yscale = -1;
                else
                    image_yscale = 1;
                image_speed = 0;
                if attackTimer == 0
                    image_index = 0;
                if ground
                    {
                    attackTimer += 1;
                    sprite_index = sprGravityReadyingJump;
                    }
                if attackTimer == 15
                    image_index = 1;
                if attackTimer == 30
                    {
                    sprite_index = sprGravityJump;
                    if global.GravityDir != myGrav
                    {
                        with objMegaman
                        {
                            yspeed = yspeed/2
                            image_yscale = other.myGrav;
                            y += sprite_get_yoffset(mask_index)*-other.myGrav;
                            other.GetX = x;
                        }
                        global.GravityDir = myGrav;
                    }
                    myGrav = -myGrav;
                    ground = false;
                    attackTimer = 31;
                    }
            if attackTimer == 32
                {
                image_index = 1;
                }
            if attackTimer &gt;= 37
                {
                attackTimer = 0;
                randomize();
                phase = choose(1,2);
                }
            break;

            case 1: //Jump and shoot
                image_speed = 0;
                if attackTimer == 0
                    image_index = 0;
                if ground
                    {
                    attackTimer += 1;
                    sprite_index = sprGravityReadyingJump;
                    }
                if attackTimer == 15
                    image_index = 1;
                if attackTimer == 30
                    {
                    var dx, initYspeed;
                    dx = GetX - x;
                    initYspeed = -5*myGrav;
                    
                    var time, yy, yyspeed; //time: How much time (in frames) it would take to land on Mega Man's location
                    if myGrav == 1
                        yy = bbox_bottom;
                    else
                        yy = bbox_top;
                    yyspeed = initYspeed;
                    time = 0;
                    
                    while ((yy &lt; bbox_bottom &amp;&amp; myGrav == 1) || (yyspeed &lt; 0 &amp;&amp; myGrav == 1))
                    or ((yy &gt; bbox_top &amp;&amp; myGrav == -1) || (yyspeed &gt; 0 &amp;&amp; myGrav == -1))
                    {
                        yyspeed += 0.25*myGrav;
                        yy += yyspeed;
                        time += 1;
                    }
                    if x &gt; view_xview+view_wview/2
                        xspeed = -max(abs(dx / time),1);
                    else
                        xspeed = max(abs(dx / time),1);
                    yspeed = initYspeed;
                    sprite_index = sprGravityJump;
                    attackTimer = 31;
                    }
            if attackTimer == 32
                {
                image_index = 1;
                xspeed = 0;
                }
            if attackTimer == 37
                {
                attackTimer = 0;
                phase = 0;
                }
            break;

            case 2: //Run
            image_speed = 0.2;
            sprite_index = sprGravityWalk;
            xspeed = image_xscale*1.5
            attackTimer += 1;
            if attackTimer &gt;= 60
                {
                attackTimer = 0;
                phase = 0;
                xspeed = 0;
                }
            break;
        }
        if sprite_index == sprGravityJump
            {
            if fireTimer &lt; 45
                fireTimer += 1;
            else
                {
                fireTimer = 0;
                instance_create(x+8*image_xscale,y-8*myGrav,objGravityShot);
                sprite_index = sprGravityJumpShoot;
                }
            }
        //Face the player
        if sprite_index != sprGravityWalk
            calibrateDirection();
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objMegaman)
{
    i = instance_create(objMegaman.x-8,objMegaman.y-8,objGravityFlipDown)
    with i
    {
        event_perform(ev_step,ev_step_normal);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
