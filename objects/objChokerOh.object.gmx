<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChockerOh</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;

//Enemy specific code
phase = 0;
shootWait = 60;
shots = 0;
shootTimer = 0;

xspeed = 0;
yspeed = 0;
sinCounter = 0;

imgSpd = 0.05;
imgIndex = 0;
image_speed = 0.1;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    checkGround();
    gravityCheckGround();
    generalCollision();
    
    x += xspeed;
    y += yspeed;
    
    switch (phase)
    {
        case 0: //idle
            calibrateDirection();
            
            //animation
            imgIndex += imgSpd;
            if (imgIndex &gt;= 2)
            {
                imgIndex = imgIndex mod 2;
            }
            
            //detect when a player projectile is approaching
            var i;
            for (i = 0; i &lt; instance_number(prtPlayerProjectile); i += 1)
            {
                projectile = instance_find(prtPlayerProjectile, i);
                
                if (projectile.object_index == objGrabBusterPickup) {continue;} //don't jump to avoid grab buster health pickups; they do no damage!
                
                jump = false;
                
                if (projectile.bbox_bottom - bbox_top &gt;= 0 &amp;&amp; projectile.bbox_top - bbox_bottom &lt;= 0
                &amp;&amp; ((projectile.xspeed &gt; 0 &amp;&amp; projectile.x &lt; x) || (projectile.xspeed &lt; 0 &amp;&amp; projectile.x &gt; x)
                || (projectile.object_index == objSlashClaw &amp;&amp; abs(x - projectile.x) &lt; 40)))
                {
                    jump = true;
                }
                else if (projectile.speed != 0)
                {
                    myAngle = point_direction(x, y, projectile.x, projectile.y);
                    myAngle += 180;
                    if (myAngle &gt;= 360){ myAngle -= 360; }
                    leftBound = myAngle - 40;
                    rightBound = myAngle + 40;
                    
                    if (projectile.direction + 360 &lt; rightBound + 360 &amp;&amp; projectile.direction + 360 &gt; leftBound + 360)
                    {
                        jump = true;
                    }
                }
                 
                if (jump)
                {   
                    phase = 2;
                    shootTimer = 0;
                    imgIndex = 2;
                    xspeed = 2 * image_xscale;
                    yspeed = -3.2; //&lt;-- jump height here
                }
            }
            
            //wait to shoot
            shootTimer += 1;
            if (shots &lt; 3)
            {
                if (shootTimer &gt;= shootWait)
                {
                    phase = 1;
                    imgIndex = 3;
                    shootTimer = 0;
                }
            }
            else
            {
                if (shootTimer &gt;= 130)
                {
                    shots = 0;
                    shootTimer = 0;
                }
            }
            break;
        case 1: //shoot
            calibrateDirection();
            
            //animation
            if (imgIndex &lt;= 4){
                imgIndex += imgSpd * 6;
                if (imgIndex &gt;= 5){ imgIndex = 4; }
            }
            
            if instance_exists(target)
            {
                shootTimer += 1;
            }
            if (shootTimer &gt;= 30)
            {
                phase = 0;
                shootTimer = 0;
                imgIndex = 0;
                shots += 1;
                
                projectileX = x + sprite_width * 0.3;
                projectileY = y - 14;
                projectileSpeed = 2;
                projectileDirection = point_direction(projectileX, projectileY, target.x, target.y);
                
                directionMax = 75; //&lt;-- projectile angle limits here
                fail = false;
                if (image_xscale &gt; 0)
                {
                    if (projectileDirection &gt; directionMax &amp;&amp; projectileDirection &lt;= 180){ fail = true; /*direction = directionMax;*/ }
                    if (projectileDirection &lt; 360 - directionMax &amp;&amp; projectileDirection &gt; 180){ fail = true; /*projectileDirection = 360 - directionMax; */ }
                }
                else
                {
                    if (projectileDirection &gt; 180 + directionMax &amp;&amp; projectileDirection &lt; 360){ fail = true; /*projectileDirection = 180 + directionMax;*/ }
                    if (projectileDirection &lt; 180 - directionMax &amp;&amp; directionMax &gt;= 0){ fail = true; /*projectileDirection = 180 - directionMax;*/ }
                }
                
                if (!fail)
                {
                    projectile = instance_create(projectileX, projectileY, objEnemyBullet);
                    projectile.xspeed = 0;
                    projectile.yspeed = 0;
                    
                    projectile.speed = projectileSpeed; //&lt;-- speed here
                    projectile.direction = projectileDirection;
                    
                    projectile.sprite_index = sprEnemyBulletMM6;
                
                    playSFX(sfxEnemyShoot);
                }
            }
            break;
        case 2: //jump
            if (ground)
            {
                phase = 0;
                imgIndex = 0;
                xspeed = 0;
            }
            break
    }
}
else if dead
{
    phase = 0;
    shootTimer = 0;
    shots = 0;
    
    xspeed = 0;
    yspeed = 0;
    
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
