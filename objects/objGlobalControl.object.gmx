<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keys
global.keyLeft[4] = 0;
global.keyRight[4] = 0;
global.keyUp[4] = 0;
global.keyDown[4] = 0;
global.keyJump[4] = 0;
global.keyShoot[4] = 0;
global.keySlide[4] = 0;
global.keyPause[4] = 0;
global.keyWeaponSwitchLeft[4] = 0;
global.keyWeaponSwitchRight[4] = 0;

global.keyLeftPressed[4] = 0;
global.keyRightPressed[4] = 0;
global.keyUpPressed[4] = 0;
global.keyDownPressed[4] = 0;
global.keyJumpPressed[4] = 0;
global.keyShootPressed[4] = 0;
global.keySlidePressed[4] = 0;
global.keyPausePressed[4] = 0;
global.keyWeaponSwitchLeftPressed[4] = 0;
global.keyWeaponSwitchRightPressed[4] = 0;

joystick_connected = 0;
alarm[0] = 3;

//event_perform(ev_step_begin, 0); //Registers the key inputs

//Variables
global.playerHealth[4] = 28;
global.GravityDir = 1;
global.weapon[4] = 0;

global.respawnTimer[4] = -1;

global.coop = false;
global.playerCount = 1; //the number of players playing

global.respawnTime = 3*room_speed; // how long it takes for players to respawn
global.respawnTimeBoss = 4; //multiplier when there is a boss on-screen

global.respawnDonateThreshold = 5;
global.respawnAllowed = true;

global.font = font_add_sprite(sprMM9Font, ord(' '), false, 0);
draw_set_font(global.font);

//Debug keys
global.isInvincible = false;
global.alwaysHealth = false;

//Options - Default values
for(i=0; i&lt;4; i+=1;)
{
    global.leftKey[i] = vk_left;
    global.rightKey[i] = vk_right;
    global.upKey[i] = vk_up;
    global.downKey[i] = vk_down;
    global.jumpKey[i] = ord('Z');
    global.shootKey[i] = ord('X');
    global.slideKey[i] = ord('C');
    global.pauseKey[i] = vk_space;
    global.weaponSwitchLeftKey[i] = ord('A');
    global.weaponSwitchRightKey[i] = ord('S');
    
    global.joystick_jumpKey[i] = gp_face1;
    global.joystick_shootKey[i] = gp_face3;
    global.joystick_slideKey[i] = gp_face4;
    global.joystick_pauseKey[i] = gp_start;
    global.joystick_weaponSwitchLeftKey[i] = gp_shoulderlb;
    global.joystick_weaponSwitchRightKey[i] = gp_shoulderrb;
}

global.screensize = 3;
lr = room_add();
global.musicvolume = 80;
global.soundvolume = 100;
global.damagepopup = 0;
global.mmColor = 0;
global.chargeBar = 0;
global.showFPS = 0;
global.showControllerOverlay = false;
global.familyFriendlyText = false;
global.escapeBehavior = 0;

global.unlockedCheatMode = false;

global.frozen = false;
global.switchingSections = false;
setfrozen = 0;

global.currentElementTotal = 0;
global.currentNickelTotal = 0;

global.flashStopper = false;
global.timeStopped = false;

//Go to the next room if this is the initializing room
//Also, initialize some variables

LoadFMOD();
FMODInit(5, false); //If you somehow have over 200 pieces of music, increase this number
global.msc = -1;
global.mscName = '';

//Collectibles
entryScores();
allCollectibles();

global.keyCoinTotal = 0;
global.keyCoinCollected = 0;
global.keyNumber = 0;

pickups = ds_list_create();

//misc
global.lastRoom = rmInit;
global.checkpoint = false;
global.checkpointX = -1;
global.checkpointY = -1;
global.hasTeleported = 0;

global.primaryCol[0] = c_white;
global.secondaryCol[0] = c_white;
global.outlineCol[0] = c_black;

global.currentLevel = lvlBeta;

global.lastRoomHub = global.currentLevel;
global.lastTeleporterX = 128;
global.lastTeleporterY = 160;

global.lastRoomHubDeluxe = global.lastRoomHub;
global.lastTeleporterXHub = global.lastTeleporterX;
global.lastTeleporterYHub = global.lastTeleporterY;

global.nextRoom = 0;

global.creditsFromTitleScreen = false;

//initialize nes palette

//dark grey
global.nesPalette[0] = make_color_rgb(124,124,124);
//deep blue
global.nesPalette[1] = make_color_rgb(0,0,252);
//dark blue
global.nesPalette[2] = make_color_rgb(0,0,188);
//dark purple
global.nesPalette[3] = make_color_rgb(68,40,188);
//dark magenta
global.nesPalette[4] = make_color_rgb(148,0,132);
//magenta-red
global.nesPalette[5] = make_color_rgb(168,0,32);
//red
global.nesPalette[6] = make_color_rgb(168,16,0);
//dark red
global.nesPalette[7] = make_color_rgb(136,20,0);
//brown
global.nesPalette[8] = make_color_rgb(80,48,0);
//lighter dark green
global.nesPalette[9] = make_color_rgb(0,120,0);
//medium dark green
global.nesPalette[10] = make_color_rgb(0,104,0);
//darker dark green
global.nesPalette[11] = make_color_rgb(0,88,0);
//navy blue
global.nesPalette[12] = make_color_rgb(0,64,88);

//row 2

//light grey
global.nesPalette[13] = make_color_rgb(188,188,188);
//darkish sky blue
global.nesPalette[14] = make_color_rgb(0,120,248);
//dark sky blue
global.nesPalette[15] = make_color_rgb(0,88,248);
//purple
global.nesPalette[16] = make_color_rgb(104,68,252);
//pink
global.nesPalette[17] = make_color_rgb(216,0,204);
//hot pink
global.nesPalette[18] = make_color_rgb(228,0,88);
//hot red
global.nesPalette[19] = make_color_rgb(248,56,0);
//earth orange
global.nesPalette[20] = make_color_rgb(228,92,16);
//light brown
global.nesPalette[21] = make_color_rgb(172,124,0);
//slightly lighter green
global.nesPalette[22] = make_color_rgb(0,184,0);
//green
global.nesPalette[23] = make_color_rgb(0,168,0);
//forest green
global.nesPalette[24] = make_color_rgb(0,168,68);
//dark cyan
global.nesPalette[25] = make_color_rgb(0,136,136);

//row 3

//near white
global.nesPalette[26] = make_color_rgb(248,248,248)
//sky blue
global.nesPalette[27] = make_color_rgb(60,188,252)
//blue-purple
global.nesPalette[28] = make_color_rgb(104,136,252)
//light purple
global.nesPalette[29] = make_color_rgb(152,120,248)
//light pink
global.nesPalette[30] = make_color_rgb(248,120,248)
//magenta
global.nesPalette[31] = make_color_rgb(248,88,152)
//hazel-pink
global.nesPalette[32] = make_color_rgb(248,120,88)
//hazel
global.nesPalette[33] = make_color_rgb(252,160,68)
//dirty orange
global.nesPalette[34] = make_color_rgb(248,184,0)
//lime green
global.nesPalette[35] = make_color_rgb(184,248,24)
//another green
global.nesPalette[36] = make_color_rgb(88,216,84)
//some other light green
global.nesPalette[37] = make_color_rgb(88,248,152)
//cyan
global.nesPalette[38] = make_color_rgb(0,232,216)
//slightly-different normal grey
global.nesPalette[39] = make_color_rgb(120,120,120)

//row 4

//white
global.nesPalette[40] = make_color_rgb(252,252,252)
//faded blue
global.nesPalette[41] = make_color_rgb(164,228,252)
//faded purple
global.nesPalette[42] = make_color_rgb(184,184,248)
//faded light purple
global.nesPalette[43] = make_color_rgb(216,184,248)
//faded pink
global.nesPalette[44] = make_color_rgb(248,184,248)
//faded magenta
global.nesPalette[45] = make_color_rgb(248,164,192)
//faded hazel
global.nesPalette[46] = make_color_rgb(240,208,176)
//cream
global.nesPalette[47] = make_color_rgb(252,224,168)
//faded dirty orange
global.nesPalette[48] = make_color_rgb(248,216,120)
//bright lime green
global.nesPalette[49] = make_color_rgb(216,248,120)
//faded green
global.nesPalette[50] = make_color_rgb(184,248,184)
//I don't even know anymore
global.nesPalette[51] = make_color_rgb(184,248,216);
//vomit-inducingly-bright cyan
global.nesPalette[52] = make_color_rgb(0,252,252);
//even more faded pink
global.nesPalette[53] = make_color_rgb(248,216,248);
//black
global.nesPalette[54] = make_color_rgb(0,0,0);

lb = background_duplicate(bgRoomgrid);

//Option variables
global.enableCharge = true; //Can we charge the buster?
global.enableSlide = true; //Can we slide?

//Weapon inventory
global.totalWeapons = 12; //8 weapons in total including the buster, but since 0 is also a valid weapon ID, the value becomes 7

for(i = 0; i &lt;= global.totalWeapons; i += 1)
{
    global.ammo[0,i] = 28;
    global.infiniteEnergy[i] = false;
}

global.weaponName[0] = "M.BUSTER";
global.weaponUnlocked[0] = true;
global.weaponName[1] = "H.CHASER";
global.weaponUnlocked[1] = true; 
global.weaponName[2] = "J.SATELLITE";
global.weaponUnlocked[2] = true;
global.weaponName[3] = "G.BUSTER";
global.weaponUnlocked[3] = true;
global.weaponName[4] = "T.BLADE";
global.weaponUnlocked[4] = true;
global.weaponName[5] = "F.STOPPER";
global.weaponUnlocked[5] = true;
global.weaponName[6] = "S.CLAW";
global.weaponUnlocked[6] = true;
global.weaponName[7] = "W.CUTTER";
global.weaponUnlocked[7] = true;
global.weaponName[8] = "SAKUGARNE";
global.weaponUnlocked[8] = true;
global.weaponName[9] = "R.COIL";
global.weaponUnlocked[9] = true;
global.weaponName[10] = "R.JET";
global.weaponUnlocked[10] = true;
global.weaponName[11] = "WIRE";
global.weaponUnlocked[11] = true;
global.weaponName[12] = "S.ARROW";
global.weaponUnlocked[12] = true;
global.weaponName[13] = "EXIT";
global.weaponUnlocked[13] = true;

global.weaponUnlocked[global.totalWeapons+1] = true; //E-tank
global.weaponUnlocked[global.totalWeapons+2] = true; //M-tank

global.lockBuster = false;

//saves whether or not the boss text has been shown.
global.bossTextShown = false;

global.currentsavefile = 0;
saveorload('load',0);

cleanmem('init');

audio_master_gain(global.soundvolume*0.01);

Setscreensize(global.screensize);

//Freezelist
freezelist = ds_list_create();

//ds_list_add(freezelist,);
ds_list_add(freezelist,objMegaman);
ds_list_add(freezelist,prtPlayerProjectile);
ds_list_add(freezelist,prtGimmick);
ds_list_add(freezelist,prtEnemy);
ds_list_add(freezelist,prtEnemyProjectile);
ds_list_add(freezelist,prtEffect);
ds_list_add(freezelist,prtPickup);

global.frozen = false;
global.LockTransition = false;
global.switchingSections = false;

global.keyCoinTotal = 0;
global.keyCoinCollected = 0;

global.nextRoom = room;

randomize();

//save icon uwu
saveTimer = -1;
saveFrame = 0;

//etc
room_goto(rmDisclaimer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (xin_update(0)){
    joystick_connected = true;
}else */

if (joystick_exists(1))
{
    joystick_connected = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FMODUpdate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player input
//Inputs

for (i=0;i&lt;global.playerCount;i+=1)
{
    //Inputs
    keyLeftHold = global.keyLeft[i];
    keyRightHold = global.keyRight[i];
    keyUpHold = global.keyUp[i];
    keyDownHold = global.keyDown[i];
    keyJumpHold = global.keyJump[i];
    keyShootHold = global.keyShoot[i];
    keySlideHold = global.keySlide[i];
    keyPauseHold = global.keyPause[i];
    keyWeaponSwitchLeftHold = global.keyWeaponSwitchLeft[i];
    keyWeaponSwitchRightHold = global.keyWeaponSwitchRight[i];
    
    //Check keys
    global.keyLeft[i] = keyboard_check(global.leftKey[i]);
    global.keyRight[i] = keyboard_check(global.rightKey[i]);
    global.keyUp[i] = keyboard_check(global.upKey[i]);
    global.keyDown[i] = keyboard_check(global.downKey[i]);
    global.keyJump[i] = keyboard_check(global.jumpKey[i]);
    global.keyShoot[i] = keyboard_check(global.shootKey[i]);
    global.keySlide[i] = keyboard_check(global.slideKey[i]);
    global.keyPause[i] = keyboard_check(global.pauseKey[i]);
    global.keyWeaponSwitchLeft[i] = keyboard_check(global.weaponSwitchLeftKey[i]);
    global.keyWeaponSwitchRight[i] = keyboard_check(global.weaponSwitchRightKey[i]);
    
    //Joystick input
    var n_connected = 0;
    for (var rr=0; rr&lt;gamepad_get_device_count(); rr+=1;)
    {
        if gamepad_is_connected(rr)
        {
            n_connected +=1;
        }
    }
    n_connected = min(n_connected,global.playerCount);
    jp = i+n_connected - global.playerCount;
    if jp &gt;= 0
    {
        if gamepad_is_connected(jp)
        {
            if gamepad_axis_count(jp) &gt;= 2
            {
                //Analog Stick position
                var ax_x = gamepad_axis_value(jp,gp_axislh);
                var ax_y = gamepad_axis_value(jp,gp_axislv);
                if ((abs(ax_y) &gt; 0.4) || (abs(ax_x) &gt; 0.36))
                {
                    gamepad_stick = point_direction(0,0,ax_x,ax_y);
                    global.keyLeft[i] += (gamepad_stick &gt;= 120 &amp;&amp; gamepad_stick &lt;= 240);
                    global.keyRight[i] += ((gamepad_stick &lt;= 60) or gamepad_stick &gt;= 300);
                    global.keyUp[i] += (gamepad_stick &gt;= 30 &amp;&amp; gamepad_stick &lt;= 150);
                    global.keyDown[i] += (gamepad_stick &gt;= 210 &amp;&amp; gamepad_stick &lt;= 330);
                }
            }
            global.keyJump[i] += gamepad_button_check(jp,global.joystick_jumpKey[i]);
            global.keyShoot[i] += gamepad_button_check(jp,global.joystick_shootKey[i]);
            global.keySlide[i] += gamepad_button_check(jp,global.joystick_slideKey[i]);
            global.keyPause[i] += gamepad_button_check(jp,global.joystick_pauseKey[i]);
            global.keyWeaponSwitchLeft[i] += gamepad_button_check(jp,global.joystick_weaponSwitchLeftKey[i]);
            global.keyWeaponSwitchRight[i] += gamepad_button_check(jp,global.joystick_weaponSwitchRightKey[i]);
        }
    }
    
    //Key pressed stuff
    global.keyLeftPressed[i] = global.keyLeft[i] &amp;&amp; !keyLeftHold;
    global.keyRightPressed[i] = global.keyRight[i] &amp;&amp; !keyRightHold;
    global.keyUpPressed[i] = global.keyUp[i] &amp;&amp; !keyUpHold;
    global.keyDownPressed[i] = global.keyDown[i] &amp;&amp; !keyDownHold;
    global.keyJumpPressed[i] = global.keyJump[i] &amp;&amp; !keyJumpHold;
    global.keyShootPressed[i] = global.keyShoot[i] &amp;&amp; !keyShootHold;
    global.keySlidePressed[i] = global.keySlide[i] &amp;&amp; !keySlideHold;
    global.keyPausePressed[i] = global.keyPause[i] &amp;&amp; !keyPauseHold;
    global.keyWeaponSwitchLeftPressed[i] = global.keyWeaponSwitchLeft[i] &amp;&amp; !keyWeaponSwitchLeftHold;
    global.keyWeaponSwitchRightPressed[i] = global.keyWeaponSwitchRight[i] &amp;&amp; !keyWeaponSwitchRightHold;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn players
if global.frozen {exit;}

global.respawnAllowed = false;

with objMegaman
{
    if global.playerHealth[player_id] &gt; global.respawnDonateThreshold
    {
        global.respawnAllowed = true;
    }
    if !canPause
    {
        global.respawnAllowed = false;
    }
}

if instance_exists(objAutoScroller)
{
    global.respawnAllowed = false;
}
if global.GravityDir != 1
{
    global.respawnAllowed = false;
}

for (i=0;i&lt;global.playerCount;i+=1)
{
    if global.respawnTimer[i] &gt;= 0
    {
        if global.respawnTimer[i]
        {
            global.respawnTimer[i] -= 1;
            if !instance_exists(objMegaman) {global.respawnTimer[i] = -1;}
        }
        
        if !instance_exists(prtBoss) &amp;&amp; global.respawnTimer[i] &gt; global.respawnTime
        {
            global.respawnTimer[i] = global.respawnTime;
        }
        
        if global.keyPausePressed[i] &amp;&amp; global.respawnAllowed &amp;&amp; !global.respawnTimer[i]
        {
            //Check no existing player already has this id
            var nogo = false;
            with objMegaman
            {
                if player_id == i {nogo = true;}
            }
            if nogo {continue;}
                
            if !global.respawnAllowed
            {
                playSFX(sfxError)
                continue;
            }
            playSFX(sfxMenuSelect)
            
            // determine respawn health:
            var donators = 1;
            var respawn_health = 0;
            
            with objMegaman
            {
                if global.playerHealth[player_id] &gt; global.respawnDonateThreshold
                {
                    donators += 1
                }
            }
            with objMegaman
            {
                donate = floor(global.playerHealth[player_id]/donators)*(global.playerHealth[player_id] &gt; global.respawnDonateThreshold)
                respawn_health += donate;
                global.playerHealth[player_id] -= donate;
            }
           
            // respawn player at random other player's coords
            targetPlayer = instance_find(objMegaman,irandom(instance_number(objMegaman)-1))
            prev_checkpoint = global.checkpoint
            global.checkpoint = -1;
            
            p = instance_create(targetPlayer.x,targetPlayer.y,objMegaman)
            p.currentGrav = targetPlayer.currentGrav;
            p.currentJumpSpeed = targetPlayer.currentJumpSpeed;
            p.grav = targetPlayer.grav;
            p.gravfactor = targetPlayer.gravfactor;
            p.gravWater = targetPlayer.gravWater;
            
            global.checkpoint = prev_checkpoint;
            p.player_id = i;
            global.playerHealth[i] = respawn_health;
            global.respawnTimer[i] = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///freeze / unfreeze game objects
if !global.frozen &amp;&amp; !setfrozen {exit;}

if global.frozen
{
    for (i=0; i&lt;ds_list_size(freezelist); i+=1;)
    {
        freezeobject = ds_list_find_value(freezelist,i)
        with (freezeobject)
        {
            if !frozen //Start Freeze
            {
                pre_hsp = hspeed;
                pre_vsp = vspeed;
                pre_spe = speed;
                pre_isp = image_speed;
                hspeed = 0;
                vspeed = 0;
                speed = 0;
                image_speed = 0;
                frozen = 1;
            }
            for (_i=0; _i&lt;=11; _i+=1) {if (alarm[_i] &gt; 0) {alarm[_i]+=1;} } 
        }
    }
    setfrozen = 1;
}
else if setfrozen //Stop Freeze
{
    for (i=0; i&lt;ds_list_size(freezelist); i+=1;)
    {
        freezeobject = ds_list_find_value(freezelist,i)
        with (freezeobject)
        {
            if frozen
            {
                hspeed = pre_hsp;
                vspeed = pre_vsp;
                speed = pre_spe;
                image_speed = pre_isp;
                frozen = 0;
            }
        }
    }
    setfrozen = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objGlobalControl</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0]+16
y = view_yview[0]+16

//Infinite energy handling
for(i=0; i&lt;=global.totalWeapons; i+=1) 
{
    if global.infiniteEnergy[i]
    {
        for (j=0; j&lt;global.playerCount; j+=1;)
        {
            global.ammo[j,i] = 28
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug keys
if keyboard_check_pressed(vk_f2) 
{
    audio_stop_all();
    stopMusic();
    game_restart();
}
if keyboard_check_pressed(vk_f4) 
{
    window_set_fullscreen( !window_get_fullscreen() );
}
if keyboard_check_pressed(vk_escape) and global.escapeBehavior == 0
{
    game_end();
}

//PRESS 2
if keyboard_check_pressed(ord('2')) 
{
    // marked invalid because it gives a small time advantage on TSNAF and a huge time advantage on Wily Tower
    with instance_find(objMegaman,random(instance_number(objMegaman)-1))
    {
        global.playerHealth[player_id] = 0;
    }
}

if keyboard_check_pressed(ord('3')) &amp;&amp; instance_exists(objMegaman)
{
    objMegaman.canHit = not objMegaman.canHit;
    if objMegaman.canHit == true { playSFX(sfxHit) }
    else { playSFX(sfxImportantItem) }
}
if keyboard_check_pressed(ord('4')) 
{
    global.alwaysHealth = !global.alwaysHealth;
    if !global.alwaysHealth { playSFX(sfxHit) }
    else { playSFX(sfxEnergyRestore) }
}
if keyboard_check_pressed(ord('5')) 
{
    if instance_exists(objMegaman)
    {
        global.GravityDir = -global.GravityDir;
        with objMegaman
        {
            yspeed = yspeed/2;
            image_yscale = global.GravityDir;
            y += sprite_get_yoffset(mask_index)*-global.GravityDir;
        }
        playSFX(sfxGravityFlip);
    }
}
if keyboard_check_pressed(ord('6'))
{
    playSFX(sfxKeySpawn)
    global.chargeUpgrade = not global.chargeUpgrade;
    global.shotUpgrade = not global.shotUpgrade;
    global.dropUpgrade = not global.dropUpgrade;
    global.skullAmulet = not global.skullAmulet;
    global.sturdyHelmet = not global.sturdyHelmet;
    global.converter = not global.converter;
    global.energySaver = not global.energySaver;
}

if keyboard_check(ord('9')) 
{
    if global.keyUpPressed[0] { global.energyElements += 1; }
    if global.keyDownPressed[0] { global.energyElements -= 1; }
    if keyboard_check_pressed(vk_shift) { global.cutsceneCounter = 0; }
    if keyboard_check_pressed(vk_control) { global.cutsceneCounter = 4; }
    if keyboard_check_pressed(vk_backspace) { global.cutsceneCounter = 5; }
    
    if keyboard_check_pressed(ord('Y'))
    {
        saveorload('save',0);
        playSFX(sfxUnlocked)
        global.beatPit = true;
        global.endingValue = 2;
        global.bolts = 9999
        global.unlockedCheatMode = true;
    }
}

if keyboard_check_pressed(ord('0')) 
{
    var fade;
    fade = instance_create(x,y,objFadeout);
    fade.myRoom = rmStageSelect;
}

//Effects
if global.alwaysHealth
{
    with objMegaman
    {
        global.playerHealth[player_id] = 28;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset variables on level start
global.GravityDir = 1;

for (i=0; i&lt;global.playerCount; i+=1)
{
    global.playerHealth[i] = 28;
    global.weapon[i] = 0;
    global.respawnTimer[i] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();

cleanmem('clear');

setfrozen = 0;

//New level - reset stuff
if roomsID(global.nextRoom) != roomsID(room)
{
    ds_list_clear(pickups);
        
    event_user(1);
    
    global.checkpoint = false;
    global.checkpointX = -1;
    global.checkpointY = -1;
    
    for (i=0; i&lt;global.playerCount; i+=1)
    {
        for(j=0; j&lt;=global.totalWeapons; j+=1)
        {
            global.ammo[i,j] = 28;
            global.infiniteEnergy[j] = 0;
        }
    }
    
    global.currentLevel = global.nextRoom;
    
    global.bossTextShown = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;=7; i+=1;)
{
    if (background_index[i] = bgRoomgrid)
    {
        background_index[i] = -1;
    }
}

alarm[0] = 1; //Check for gamepad

global.frozen = false;

global.LockTransition = false;
global.switchingSections = false;

global.keyCoinTotal = 0;
global.keyCoinCollected = 0;
global.keyNumber = 0;

global.nextRoom = room;

//Destroy collected pickups
var i,str,slash,totalPickups;

totalPickups = ds_list_size(pickups)

for(i = 0; i &lt;= totalPickups; i += 1)
{
    str = ds_list_find_value(pickups,i);
    if !is_string(str) { exit; }
    slash = string_pos('/',str);
    if room = real(string_copy(str,1,slash-1))
    {
        with real(string_delete(str,1,slash))
        {
            visible = 0; instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>saveorload('save',0);
if global.currentsavefile &gt; 0
{
    saveorload('save',global.currentsavefile);
}

cleanmem('clear');
cleanmem('free');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center)

if global.showControllerOverlay
{
    drawControllerOverlay(view_xview+view_wview - 20 * global.showFPS,view_yview+view_hview);
}

if saveTimer &gt;= 0
{
    saveTimer -= .5;
    draw_sprite(sprSavingIcon,saveFrame,view_xview[0]+2+7,view_yview[0]+224-16+5)
    draw_text(view_xview[0]+16+32+4+2,view_yview[0]+224-10-4,"SAVING...")
    
    if saveTimer mod 4 == 0
    {
        saveFrame = not saveFrame;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
