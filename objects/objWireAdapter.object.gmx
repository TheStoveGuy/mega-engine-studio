<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWireAdapter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

wpnID = 12; //Weapon ID

ammo_cost = 1;

image_speed = 0.15;

penetrate = 1;
pierces = 2;

xspeed=0;
yspeed=-4*global.GravityDir;
grav=0;

phase = 1;

resetSpriteChange = 0;

parent.xspeed = 0;

xx = -4;
ys = 0;
if global.GravityDir == -1 {y+=32;}

playSFX(sfxWire);
sfxloop = 0;
alarm[0] = 12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if resetmove {
    with parent {
        if !isHit {
            canMove = 1;
        }
    }
}
if resetGravity {
    with parent {
        canGravity = 1;
    }
}
if resetSpriteChange {
    with parent {
        canSpriteChange = 1;
    }
}
if resetTurn
{
    with parent {
        canturn = 1;
    }
}
audio_stop_sound(sfxWire); alarm[0] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playSFX(sfxWire);
alarm[0] = 12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(parent)
{
    parent.spriteY = 15;
    if parent.ground &amp;&amp; phase = 1 
    {
        parent.spriteX = 18;
    }
    else 
    {
        if parent.isShoot
        {
            parent.spriteX = 20;
        }
        else
        {
            parent.spriteX = 19;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !global.timeStopped
{
    if phase &gt;= 2 
    {
        if instance_place(x,y-1,prtMovingPlatformSolid)
        {
            plat = instance_place(x,y-1,prtMovingPlatformSolid);
            x += plat.xspeed;
            y += plat.yspeed;
            if instance_exists(parent)
            {
                shiftObject(plat.xspeed,0,0,parent,global.GravityDir);
                if plat.doesShiftY
                {
                    if (parent.y &gt;= y+9-plat.yspeed &amp;&amp; global.GravityDir == 1)
                    or (parent.y &lt;= y-9-plat.yspeed &amp;&amp; global.GravityDir == -1)
                    {
                    with parent
                    {
                        if !place_meeting(x,y+other.plat.yspeed,objSolid)
                            y += other.plat.yspeed;
                    }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !global.timeStopped
{
    x += xspeed;
    y += yspeed;
    
    if !instance_exists(parent)
    {
        instance_destroy();
        visible = 0;
        exit;
    }
    
    if parent.isHit
    {
        with parent {xspeed = image_xscale * -0.5;}
        instance_destroy(); visible = 0; exit;
    }
    
    x = parent.x + xx * image_xscale;
    parent.xspeed = 0;
    
    if phase = 1
    {
        if place_meeting(x,y-1*global.GravityDir,objSolid)
        or place_meeting(x,y-1*global.GravityDir,prtMovingPlatformSolid)
        {
            yspeed = 0;
            image_speed = 0;
            image_index = 0;
            phase = 2;
            parent.isShoot = 0;
            y-=1;
        }
        if y &lt; view_yview &amp;&amp; global.GravityDir == 1 
        {
            yspeed = 4;
        }
        if y &gt; view_yview+view_hview &amp;&amp; global.GravityDir == -1 
        {
            yspeed = -4;
        }
        
        if (global.GravityDir == 1 &amp;&amp; y &gt; parent.y+ys) or (global.GravityDir == -1 &amp;&amp; y &lt; parent.y-ys)
        {
            instance_destroy();
            visible = 0;
        }
    }
    else
    {
        if phase = 2
        {
            with parent
            {
                other.parent.yspeed = -4*global.GravityDir;
                if place_meeting(x,y-4,other.id)
                {
                    other.parent.yspeed = 0;
                    other.phase = 3;
                    y = other.y+9*global.GravityDir;
                    audio_stop_sound(sfxWire);
                    other.alarm[0] = -1;
                    other.resetSpriteChange = canSpriteChange;
                    canSpriteChange = 0;
                    ground = 0;
                    playerHandleSprites('Normal');
                }
            }
        }
        
        if phase &gt;= 2
        {
            if global.keyJumpPressed[parent.player_id]
            {
                parent.yspeed = -1*global.GravityDir;
                instance_destroy();
            }
            else
            {
                with parent
                {
                    canMove = 1;
                    playerShoot();
                    if isShoot
                    {
                        shootTimer -= 1;
                    }
                    canMove = 0;
                }
            }
            
            if (y &gt; view_yview[0] + 14) //don't grab the ground that are from higher screens in the hub
            &amp;&amp; !place_meeting(x,y-1*global.GravityDir,objSolid)
            &amp;&amp; !place_meeting(x,y-1*global.GravityDir,prtMovingPlatformSolid)
            or (!place_meeting(x,y+5*global.GravityDir,parent) &amp;&amp; phase &gt; 2)
            {
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with parent
{
    other.resetmove = canMove;
    canMove = 0;
    other.resetGravity = canGravity;
    canGravity = 0;
    other.resetTurn = canturn;
    canturn = 0;
}

ys = parent.y-y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//No
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawSelf();
image_yscale=global.GravityDir;

if phase = 3 {exit;}

if !instance_exists(parent) { instance_destroy(); exit;}

wirelength = (floor(((parent.y-6*parent.image_yscale)-y)/4))*global.GravityDir;
wireimg = 1;
if image_xscale = -1 {wireimg = 3;}
if phase = 2 {wireimg = 4;}

for (i=0; i&lt;=wirelength; i+=1;) {
    if phase = 1 {
        wireimg += 1;
        if wireimg = 4 {wireimg = 0;}
    }
    draw_sprite_ext(sprWireAdapterWire,wireimg,x,y+i*4*global.GravityDir,1,global.GravityDir,image_angle,image_blend,image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
