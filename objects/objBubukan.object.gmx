<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBubukanOrange</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 4;

//enemy specific
phase = 0;
radius = 4.5 * 16;
landingWait = 10;
landingWaitTimer = landingWait;

runSpd = 2;
jumpSpd = 1.5;

imgSpd = 0.15;
runCycleBack = false;
imgIndex = 0;

calibrateDirection();

col = 0; //0 = blue; 1 = orange;
init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init
{
    init = 0;
    switch col
    {
        case 0: sprite_index = sprBubukanOrange; break;
        case 1: sprite_index = sprBubukanRed; break;
    }
}

event_inherited();

if global.frozen == false &amp;&amp; dead == false &amp;&amp; global.flashStopper == false
{
    if (instance_exists(target)){
        checkGround();
        gravityCheckGround();
        generalCollision();
        
        switch (phase){
            //start towards player
            case 0:
                calibrateDirection();
                xspeed = runSpd * image_xscale;
                phase = 1;
                break;
                
            //approaching the player
            case 1:
                if (!runCycleBack){
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 3){
                        imgIndex = 2 - imgSpd;
                        runCycleBack = true;
                    }
                }else{
                    imgIndex -= imgSpd;
                    if (imgIndex &lt; 0){
                        imgIndex = 1 + imgSpd;
                        runCycleBack = false;
                    }
                }
                
                //detect mega man
                if (abs(target.x - x) &lt;= radius){
                    phase = 2;
                    imgIndex = 3;
                    runCycleBack = false;
                    xspeed = 0;
                }
                break;
            
            //pole vaulting
            case 2:
                imgIndex += imgSpd * 0.8;
                if (imgIndex &gt;= 5){
                    phase = 3;
                    xspeed = jumpSpd * image_xscale;
                    yspeed = -6; //&lt;-- jump speed
                    pole = instance_create(x + sprite_width * 0.6, y, objBubukanPole); //sprite_width becomes negative if xscale is negative
                    /*if (image_xscale &lt; 0){
                        pole.x = pole.x + sprite_width * 0.75;
                    }else{
                        pole.x = pole.x + sprite_width * 0.5;
                    }*/
                    pole.image_xscale = image_xscale;
                }
                break;
            
            //flying through the air
            case 3:
                imgIndex += imgSpd;
                if (imgIndex &gt;= 9){
                    imgIndex = 5 + (imgIndex - 9);
                }
                
                if (ground){
                    phase = 4;
                    xspeed = 0;
                    imgIndex = 10; //thought it looked better as a standing sprite
                }
                break;
            
            //waiting a moment after landing
            case 4:
                //note: in the original game it did its running animation in place during the pause after landing, but that's a little odd, so I didn't do it
                if (landingWaitTimer &gt; 0){
                    landingWaitTimer -= 1;
                }else{
                    phase = 5;
                    calibrateDirection();
                    xspeed = runSpd * image_xscale;
                }
                break;
                
            //running around
            case 5:
                if (!runCycleBack){
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= image_number){
                        imgIndex = image_number - 1 - imgSpd;
                        runCycleBack = true;
                    }
                }else{
                    imgIndex -= imgSpd;
                    if (imgIndex &lt; 9){
                        imgIndex = 10 + imgSpd;
                        runCycleBack = false;
                    }
                }
                break;
        }
        
        //turn around if a wall is run into
        if (xspeed == 0 &amp;&amp; (phase == 1 || phase == 3 || phase == 5)){
            image_xscale = -image_xscale;
            if (phase == 1 || phase == 5){
                xspeed = runSpd * image_xscale;
            }
            
            if (phase == 3){
                xspeed = jumpSpd * image_xscale;
            }
        }
        
        x += xspeed;
        y += yspeed;
    }
}
else
{
    if dead == true
    {
        phase = 0;
        landingWaitTimer = landingWait;
        
        xspeed = 0;
        yspeed = 0;
        
        imgIndex = 0;
        runCycleBack = false;
    }
}
    
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
