<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

frozen = 0;
boss = 0;

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 1;

dead = false;
beenOutsideView = false;
canHit = true;

respawnRange = 4; //set to -1 to make infinite
despawnRange = 4; //set to -1 to make infinite
shiftvisible = 0;

respawn = true; //Should we respawn after leaving the screen and entering it again?
inWater = 0;
bubbleTimer = 0;

weapondamage();
canflash = true;
flashing = 0;

xspeed = 0;
yspeed = 0;
ground = 0;

explodeWhenDead = 0;

itemDrop = noone;

setTargetCreate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    visible = true;
    flashing -= 1;
    if flashing &gt; 0 {alarm[11] = 2;}
}
else
{
    flashing = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setTargetStep();
    
//if !global.switchingSections
//{
    if dead //Respawning
    {
        if !respawn {instance_destroy(); exit;}
        
        if beenOutsideView
        {
            if (respawnRange == -1
            || (bbox_right &gt; view_xview - respawnRange &amp;&amp; bbox_left &lt; view_xview + view_wview + respawnRange
            &amp;&amp; bbox_bottom &gt; view_yview - respawnRange &amp;&amp; bbox_top &lt; view_yview + view_hview + respawnRange))
            {
                setTargetCreate();
                visible = true;
                dead = false;
                healthpoints = healthpointsStart;
                beenOutsideView = false;
                if inWater != -1 {inWater = place_meeting(x,y,objWater);}
            }
        }
    }
    
    if (despawnRange != -1) //Despawning
    {
        if bbox_right &lt; view_xview - despawnRange || bbox_left&gt; view_xview+view_wview + despawnRange 
        || bbox_bottom&lt; view_yview - despawnRange || bbox_top &gt; view_yview+view_hview + despawnRange
        {
            if !dead
            {
                dead = true;
            }
            else {beenOutsideView = true;}
        }
    }
//}
    
if dead
{
    healthpoints = healthpointsStart;
    visible = 0;
    x = xstart;
    y = ystart;
    speed = 0;
    hspeed = 0;
    vspeed = 0;
    xspeed = 0;
    yspeed = 0;
}
else
{
    beenOutsideView = false;
    if inWater != -1 //Water
    {
        if inWater
        {
            bubbleTimer += 1;
            if bubbleTimer &gt;= 64 
            {
                bubbleTimer = 0;
                instance_create(bbox_get_xcenter(), bbox_get_ycenter(), objAirBubble);
            }
            var _yc; _yc = bbox_get_ycenter();
            if _yc &gt;= view_yview &amp;&amp; _yc &lt;= view_yview+view_hview
            {
                var wtr, splash;
                if !place_meeting(x,y,objWater)
                {
                    inWater = false;
                    wtr = instance_place(x,y-yspeed,objWater);
                    if wtr 
                    {
                        if bbox_bottom &lt; wtr.bbox_top {
                            if insideView() {playSFX(sfxSplash);}
                            instance_create(bbox_get_xcenter(), wtr.bbox_top+1, objSplash);
                        }
                        if bbox_top &gt; wtr.bbox_bottom {
                            if insideView() {playSFX(sfxSplash);}
                            splash = instance_create(bbox_get_xcenter(), wtr.bbox_bottom, objSplash);
                            splash.image_yscale = -1;
                        }
                    }
                }
            }
        }
        else if place_meeting(x,y,objWater)
        {
            inWater = true;
            var wtr, splash;
            wtr = instance_place(x, y, objWater);
            if wtr.bbox_top &gt; bbox_top &amp;&amp; !collision_line(bbox_left,bbox_top,bbox_right,bbox_top,objWater,false,false) {
                instance_create(bbox_get_xcenter(), wtr.bbox_top+1, objSplash);
                if insideView() {playSFX(sfxSplash);}
            }
            if wtr.bbox_bottom &lt; bbox_bottom &amp;&amp; !collision_line(bbox_left,bbox_bottom,bbox_right,bbox_bottom,objWater,false,false) {
                with instance_create(bbox_get_xcenter(), wtr.bbox_bottom, objSplash) {image_yscale = -1;}
                if insideView() {playSFX(sfxSplash);}
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMegaman">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if other.canHit
    {
        with other
        {
            playerGetHit(other.contactDamage);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You can use this event to create code for special interactions between an enemy and a player projectile

//This event is called when an enemy collides with a player projectile
//You can reflect the bullet by setting "other.guardcancel" to 1
//or you can outright cancel the collision event by setting "other.guardcancel" to 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = 1;

if explodeWhenDead
{
    instance_create(bbox_get_xcenter(), bbox_get_ycenter(), objHarmfulExplosion);
    playSFX(sfxMM3Explode);
    exit;
}

a = instance_create(bbox_get_xcenter(), bbox_get_ycenter(), objItemExplosion);

if itemDrop == noone {exit;}

if itemDrop == objKey
{
    a = instance_create(bbox_get_xcenter()-8, bbox_get_ycenter()-8, objKey);
    a.yspeed = -4;
    a.homingTimer = 90;
    playSFX(sfxKeySpawn);
}
else 
{
    a.myitem = itemDrop;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flashing = 1 or flashing = 3) &amp;&amp; (canflash)
{
    d3d_set_fog(true, c_white, 0, 0);
    drawSelf();
    d3d_set_fog(false, 0, 0, 0);
}
else
{
    drawSelf();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
