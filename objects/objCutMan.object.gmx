<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCutIntro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprCutMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//hasKnockback = true; -  use this if you want to enable cut man's knockback

event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprCutIntro;
poseImgSpeed = 6/60;
contactDamage = 4;

ground = false;
attackTimer = 0;
jumpTimer = 0;
jumpAmount = 0;
canInitShoot = true;
phase = 0; //0 = nothing; 1 = running; 2 = jumping; 3 = shooting;
getLastXspeed = xspeed;

delay = 0;

hasKnockback = false;
knockbackTimer = -1;

// Sprites 0 = no cutter, 1 = cutter
cutter = 1;
spriteStand[0] = sprCutStandShame;
spriteRun[0] = sprCutRunShame;
spriteJump[0] = sprCutJumpShame;
spriteStand[1] = sprCutStand;
spriteRun[1] = sprCutRun;
spriteJump[1] = sprCutJump;

//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 2; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 1; //Weapon Explosion
wpndmg[4] = 2; //HornetChaser
wpndmg[5] = 1; //JewelSatellite
wpndmg[6] = 5; //GrabBuster
wpndmg[7] = 2; //TripleBlade
wpndmg[8] = 2; //WheelCutter
wpndmg[9] = 1; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 1; //WireAdapter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>disable hitflash and renable ability to be knocked back</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canHit = true;
drawBoss = true;
drawHitSpark = false;

alarm[9] = -1;
knockbackTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>when hit, trigger flash and knockback</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hitspark
drawHitSpark = !drawHitSpark;
drawBoss = !drawBoss;

alarm[9] = 2;
if knockbackTimer == -1
    knockbackTimer = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false
{
    if isFight == true
    {
        if (xspeed &gt; 0 &amp;&amp; !place_meeting (x + xspeed +2,y,objSolid)) || (xspeed &lt; 0 &amp;&amp; !place_meeting (x + xspeed - 2,y,objSolid))
            x += xspeed;
        
        y += yspeed;
        
        checkGround();
        gravityCheckGround();
        generalCollision();
        
        if delay &gt; 0
            delay -= 1;
        
        switch phase
        {
            case 0: //Idle (standing still)
                xspeed = 0;
                sprite_index = spriteStand[cutter];
                image_speed = 0.15;
                
                attackTimer -= 1;
                if attackTimer &lt;= 0
                {
                randomize();
                if attackTimer == -1
                    phase = 1;
                else
                    phase = 2;
                attackTimer = 60;
                }
            break;
            
            case 1: //Walking/Jumping
                image_speed = 0.15;
                if ground
                    {
                    sprite_index = spriteRun[cutter];
                    xspeed = image_xscale*1.5
                    getLastXspeed = xspeed;
                    }
                else
                    {
                    sprite_index = spriteJump[cutter];
                    xspeed = getLastXspeed;
                    }
                generalCollision();
                if xspeed == 0
                and ground
                    yspeed = -6;
                if instance_exists(target)
                if distance_to_point(target.x,y) &lt; 48
                and ground
                    {
                    randomize();
                    if cutter == 0
                        phase = 3;
                    else
                        phase = choose(0, 2);
                    attackTimer = 60;
                    }
            break;
            
            case 2: //Shooting
            if attackTimer == 60
                attackTimer = 30;
            attackTimer -= 1;
            xspeed = 0;
            sprite_index = sprCutThrow;
            if attackTimer &gt; 10
                {
                if cutter = 0
                    {
                    phase = 3
                    attackTimer = 60;
                    }
                image_single = 0;
                }
            else
            if attackTimer == 10
                {
                image_single = 1;
                instance_create(x,y,objCutBullet);
                }
            if attackTimer &lt;= 0
                {
                if instance_exists(target)
                if distance_to_point(target.x,y) &gt; 48
                    phase = 1;
                else
                    phase = 3;
                attackTimer = 60;
                }
            break;
            
            case 3: //Jumping
                if ground 
                and attackTimer == 60 &amp;&amp; delay = 0
                    {
                    attackTimer -= 1;
                    xspeed = image_xscale*1.5
                    getLastXspeed = xspeed;
                    yspeed = -6;
                    }
                sprite_index = spriteJump[cutter];
                xspeed = getLastXspeed;
                if ground
                    {
                    delay = 5;
                    randomize();
                    phase = 1;
                    attackTimer = 60;
                    }
            break;
        }
        // optional knockback
        if hasKnockback == true &amp;&amp; knockbackTimer &gt; -1
            {
                if knockbackTimer &gt; 0
                {
                if yspeed &lt; 0
                    yspeed = 0;
                knockbackTimer -= 1;
                phase = 4
                sprite_index = spriteRun[cutter];
                image_index = 1;
                xspeed = -0.5 * image_xscale;
                }
                else if phase == 4
                {
                if ground == true
                    sprite_index = spriteStand[cutter];
                else 
                    sprite_index = spriteJump[cutter];
                phase = 0;
                attackTimer = 0;
                knockbackTimer = -2;
                }
            }
        
        
        //Face the player
        if instance_exists(target) &amp;&amp; ((hasKnockback == false) || (hasKnockback == true &amp;&amp; knockbackTimer &lt;= -1)) 
        {
            if x &gt; target.x
                image_xscale = -1;
            else
                image_xscale = 1;
        }
    }
if instance_exists(objCutBullet)
    cutter = 0;
else
    cutter = 1;
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
