<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGutsIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sptGutsMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthIndex = 1;

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprGutsIdle;
poseImgSpeed = 0.1;
contactDamage = 4;

ground = false;
attackTimer = 0;
jumpTimer = 0;
jumpAmount = 0;
canInitShoot = true;
phase = 0; //0 = nothing; 1 = running; 2 = jumping; 3 = shooting;
getLastXspeed = xspeed;
shakeTimer = 0;
choosePhase = 0;
lastPhase = phase;
Block = noone;
//stores the weapon damage values
wpndmg[0] = 1; //Mega Buster
wpndmg[1] = 2; //Mega Buster Charge1
wpndmg[2] = 3; //Mega Buster Charge2
wpndmg[3] = 3; //Weapon Explosion
wpndmg[4] = 1; //HornetChaser
wpndmg[5] = 1; //JewelSatellite
wpndmg[6] = 1; //GrabBuster
wpndmg[7] = 1; //TripleBlade
wpndmg[8] = 1; //WheelCutter
wpndmg[9] = 1; //SlashClaw
wpndmg[10] = 3; //Sakugarne
wpndmg[11] = 2; //SuperArrow
wpndmg[12] = 1; //WireAdapter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if shakeTimer &gt; 0
    {
    view_xview = view_xview+choose(-1,0,1);
    view_yview = view_yview+choose(-1,0,1);
    shakeTimer -= 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false &amp;&amp; global.flashStopper == false // Note to bug fixers: Gutsmans weakness should be flash stopper as Time slow is a similar move and was his in Powered up
{
    if isFight == true
    {
       if (xspeed &gt; 0 &amp;&amp; !place_meeting (x + xspeed +2,y,objSolid)) || (xspeed &lt; 0 &amp;&amp; !place_meeting (x + xspeed - 2,y,objSolid))
            x += xspeed;
        y += yspeed;
        
        checkGround();
        gravityCheckGroundExt(0.15);
        generalCollision();
        switch phase
        {
            case 0: //Idle
                xspeed = 0;
                sprite_index = sprGutsIdle;
                image_speed = 0.15;
                
                attackTimer -= 1;
                if attackTimer &lt;= 0
                    {
                    if attackTimer == -1
                        phase = 2;
                    else
                    if lastPhase == 2
                        phase = 1;
                    else
                        phase = choose(1,2);
                    attackTimer = 50;
                    lastPhase = 0;
                    }
            break;
            
            case 1: //Jumping
                if ground
                    {
                    attackTimer -= 1;
                    sprite_index = sprGutsCrouch;
                    }
                if attackTimer == 10
                and ground
                    {
                    if x &gt; view_xview+view_wview/1.5
                        xspeed = -1;
                    else
                    if x &lt; view_xview+view_wview/3
                        xspeed = 1;
                    else
                        xspeed = choose(1,-1);
                    yspeed = -3.5;
                    sprite_index = sprGutsJump;
                    }
                if ground
                and attackTimer == 9
                    {
                    xspeed = 0;
                    playSFX(sfxGutsQuake);
                    shakeTimer = 60;
                    if instance_exists(target)
                    with target playerGetShocked(false,20);
                    }
                if ground
                and attackTimer &lt;= 0
                    {
                    lastPhase = phase;
                    phase = 0;
                    attackTimer = 30;
                    }
            break;
            
            case 2: //Shooting
                if ground
                    {
                    attackTimer -= 1;
                    if attackTimer &gt; 0
                    sprite_index = sprGutsCrouch;
                    else
                    sprite_index = sprGutsGrab;
                    if instance_exists(Block)
                        {
                        if Block.timer &lt; 30
                            {
                            if instance_place(x,y-1,Block)
                                image_index = 1;
                            else
                                image_index = 0;
                            }
                        else
                            image_index = 2;
                        }
                    }
                if attackTimer == 10
                and ground
                    {
                    yspeed = -3.5;
                    sprite_index = sprGutsJump;
                    }
                if ground
                and attackTimer == 9
                    {
                    xspeed = 0;
                    playSFX(sfxGutsQuake);
                    shakeTimer = 60;
                    if instance_exists(target)
                    with target playerGetShocked(false,20);
                    }
                if attackTimer == 0
                    {
                    Block = instance_create(x,view_yview,objGutsBossBlock);
                    }
                if !instance_exists(Block)
                and attackTimer &lt; 0
                    {
                    lastPhase = phase;
                    phase = 0;
                    attackTimer = 30;
                    }
                    
            break;
        }
        
        //Face the player
        if instance_exists(target)
        {
            if x &gt; target.x
                image_xscale = -1;
            else
                image_xscale = 1;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
