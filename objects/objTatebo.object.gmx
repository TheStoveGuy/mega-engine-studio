<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTatebo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;

//enemy specific code
phase = 0;
timer = 0;
waitDiff = 30;

xspeed = 0;
yspeed = 0;

imgSpd = 0.1;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen &amp;&amp; !dead &amp;&amp; !global.flashStopper
{
    checkGround();
    gravityCheckGround();
    generalCollision();
    
    x += xspeed;
    y += yspeed;
    
    if instance_exists(target)
    {
        switch (phase)
        {
            case 0: //face megaman at the start
                calibrateDirection();
                phase = 1;
                break;
            case 1: //wait &amp; shoot arc shot
                shootWait = 100;
                
                if (timer == shootWait - waitDiff)
                {
                    calibrateDirection();
                }
                
                if (imgIndex == 0)
                {
                    timer += 1;
                    if timer == shootWait
                    {
                        imgIndex = 1;
                        shot = instance_create(x + sprite_width * 0.35, y - 11, objEnemyBullet);
                        with (shot)
                        {
                            sprite_index = sprTateboShot;
                            contactDamage = 3;
                            yspeed = -4;
                            grav = 0.13;
                            xSpeedAim(target, yspeed, grav);
                        }
                        playSFX(sfxEnemyDrop);
                    }
                }
                else
                {
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 2)
                    {
                        imgIndex = 0;
                    }
                }
                
                if (timer &gt;= shootWait + waitDiff)
                {
                    phase = 2;
                    timer = 0;
                    imgIndex = 2;
                }
                break;
            case 2: //wait &amp; shoot straight shot
                shootWait = 30;
                if (imgIndex == 2)
                {
                    timer += 1;
                    if (timer == shootWait)
                    {
                        imgIndex = 3;
                        shot = instance_create(x + sprite_width * 0.5, y + 5, objEnemyBullet);
                        shot.sprite_index = sprTateboShot;
                        shot.contactDamage = 3;
                        shot.xspeed = 1.9 * image_xscale;
                        playSFX(sfxEnemyShoot);
                    }
                }
                else
                {
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 4)
                    {
                        imgIndex = 2;
                    }
                }
                if (timer &gt;= shootWait + waitDiff)
                {
                    phase = 1;
                    timer = 0;
                    imgIndex = 0;
                }
                break;
        }
    }
}
else if dead
{
    phase = 0;
    timer = 0;
    xspeed = 0;
    yspeed = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if phase != 1 {exit;}

if image_xscale = -1 { 
    if bbox_get_xcenter_object(other.id) &lt; bbox_get_xcenter() {
        other.guardcancel = 1;
    }
}
else {
    if bbox_get_xcenter_object(other.id) &gt; bbox_get_xcenter() {
        other.guardcancel = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
